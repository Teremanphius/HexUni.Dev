-- Make sure game loaded
if not game:IsLoaded() then
	game.Loaded:Wait()
end

-- Thingy Thing
getgenv().SecureMode = true

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualUser = game:GetService("VirtualUser")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local StarterGui = game:GetService("StarterGui")
local Lighting = game:GetService("Lighting")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local ContextActionService = game:GetService("ContextActionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StatsService = game:GetService("Stats")
local AvatarEditorService = game:GetService("AvatarEditorService")
local GameSettings = UserSettings():GetService("UserGameSettings")

-- Player & Character
local speaker = Players.LocalPlayer
local Character = speaker.Character or speaker.CharacterAdded:Wait()
local character = Character
local Humanoid = Character:FindFirstChildOfClass("Humanoid")
local JMouse = speaker:GetMouse()

-- UI Lib
local NSUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/rrAsus/NSUI/main/main.lua"))()

-- Gravity & Camera
local oldgrav = Workspace.Gravity
local Camera = Workspace.CurrentCamera
local PlaceId = game.PlaceId
local JobId = game.JobId

-- HTTP Requests
local ipResponse = game:HttpGet("http://ip-api.com/json/") -- I Don't Log IP, You Can Check Yourself, No Webhooks
local success, ipData = pcall(function()
    return HttpService:JSONDecode(ipResponse)
end)

local country = "N/A"
local countryCode = "N/A"
local timezone = "N/A"

if success and type(ipData) == "table" then
    country = ipData.country or "N/A"
    countryCode = ipData.countryCode or "N/A"
    timezone = ipData.timezone or "N/A"
end

-- Executor & Queue
local executor = identifyexecutor()
local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

-- Other Variables
local Scriptcount = "198"
local ScriptcountAnim = "63"
local movers = {}
local HumanModCons = {}
local noVoid = false

-- Speed & Things
CFspeed = 50
flyspeed = 3

-- Funcs & Things
function getRoot(char)
	local rootPart = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
	return rootPart
end

function randomString()
	length = math.random(10, 20)
	array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

floatName = randomString()

function isNumber(str)
	if ((tonumber(str) ~= nil) or (str == "inf")) then
		return true
	end
end

function charresettopos()
	prev = speaker.Character:WaitForChild("HumanoidRootPart").CFrame
	local humanoid = Character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid:ChangeState(Enum.HumanoidStateType.Dead)
	end
	speaker.CharacterAdded:Wait()
	speaker.Character:WaitForChild("HumanoidRootPart").CFrame = prev
end

function sfxSound(Setting)
    local soundId
    if Setting == "true" then
        soundId = "rbxassetid://1555493683"
    elseif Setting == "false" then
        soundId = "rbxassetid://1555324499"
    elseif Setting == "time" then
        soundId = "rbxassetid://6963032794"
    elseif Setting == "friendjoin" then
        soundId = "rbxassetid://1862043663"
    end
    local SoundNotif = Instance.new("Sound")
    SoundNotif.SoundId = soundId
    SoundNotif.Looped = false
    SoundNotif.Volume = 0.65
    SoundNotif.Parent = workspace
    SoundNotif.Ended:Connect(function()
        SoundNotif:Destroy()
    end)
    SoundNotif:Play()
end

function Notif(TitleStr, ContentStr, TimeDur, NotifType, Plr)
    local ImageID
    if NotifType == "x" then
        ImageID = 10747384394
    elseif NotifType == "check" then
        ImageID = 10709790644
    elseif NotifType == "HeadShot" then 
        ImageID = NSUI:GetPlayerThumbnail(Plr.UserId, "HeadShot")
    end
    NSUI:Notify({Title=TitleStr, Content=ContentStr, Duration=TimeDur, Image=ImageID})
end

function toClipboard(String)
	local clipBoard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
	if clipBoard then
		clipBoard(String)
	else
		sfxSound("false")
		Notif("Incompatible Exploit!", "Missing Function('s) : setclipboard!", 3, "x")
	end
end

function r15(plr)
	if (plr.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15) then
		return true
	end
end

function breakvelocity()
	BeenASecond, V3 = false, Vector3.new(0, 0, 0)
	task.delay(1, function()
		BeenASecond = true
	end)
	while not BeenASecond do
		for _, v in ipairs(speaker.Character:GetDescendants()) do
			if v.IsA(v, "BasePart") then
				v.Velocity, v.RotVelocity = V3, V3
			end
		end
		task.wait()
	end
end

local function getPlr(name)
  	local x = nil
  		for i,v in next, game:GetService("Players"):GetPlayers() do
    		if string.find(v.Name, name) then
     			x = v
     			break
    		end
  		end
  return x
end

function slipperwalk(val)
	local properties = val and PhysicalProperties.new(0.01, 0, 0) or PhysicalProperties.new(0.7, 0.3, 0.5)
	for _, a in pairs(Character:GetDescendants()) do
		if a:IsA("BasePart") then
			a.CustomPhysicalProperties = properties
		end
	end
end

function CheckFriends()
	friendsId = speaker.UserId
	PlayersFriends = {}
	success, page = pcall(function()
		return Players:GetFriendsAsync(friendsId)
	end)
	if success then
		repeat
			info = page:GetCurrentPage()
			for i, friendInfo in pairs(info) do
				table.insert(PlayersFriends, friendInfo)
			end
			if not page.IsFinished then
				page:AdvanceToNextPageAsync()
			end
		until page.IsFinished 
	end
	FriendsInTotal = 0
	OnlineFriends = 0
	FriendsInGame = 0
	for i, v in pairs(PlayersFriends) do
		FriendsInTotal = FriendsInTotal + 1
		if v.IsOnline then
			OnlineFriends = OnlineFriends + 1
		end
		if game.Players:FindFirstChild(v.Username) then
			FriendsInGame = FriendsInGame + 1
		end
	end
	friendsallfr = tostring(FriendsInTotal) .. " Friend's In Total"
	friendsofflinefr = tostring(FriendsInTotal - OnlineFriends) .. " Friend's Offline"
	friendsonlinefr = tostring(OnlineFriends) .. " Friend's Online"
	friendsinserverfr = tostring(FriendsInGame) .. " Friend's InGame"
end
pcall(CheckFriends)

function CheckTime()
	local h = os.date("*t").hour

	if ((h < 12) and (h > 4)) then
		Notif("Morning, " .. speaker.DisplayName, "Sun Is Rising!\nAnd Welcome To HeXen Universal!", 5, "HeadShot", speaker)
		sfxSound("time")
	elseif ((h >= 12) and (h < 20)) then
		Notif("Afternoon, " .. speaker.DisplayName, "How Are Ya?\nAnd Welcome To HeXen Universal!", 5, "HeadShot", speaker)
		sfxSound("time")
	else
		Notif("Good Night, " .. speaker.DisplayName, "Have A Good Night!\nAnd Welcome To HeXen Universal!", 5, "HeadShot", speaker)
		sfxSound("time")
	end
end
CheckTime()

local playerAddedConnectionfriend
local function onPlayerAdded(Player)
	if Player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
		pcall(function()
			Notif(Player.Name .. " Joined!", "Your Friend " .. Player.Name .. " (" .. Player.DisplayName .. ") Has Joined Your Game!", 6, "HeadShot", Player)
			sfxSound("friendjoin")
		end)
	end
end

local function connectPlayerAddedEvent()
    if playerAddedConnectionfriend then
        playerAddedConnectionfriend:Disconnect()
        playerAddedConnectionfriend = nil
    end
    playerAddedConnectionfriend = game.Players.PlayerAdded:Connect(onPlayerAdded)
end
connectPlayerAddedEvent()

flying = false
local isTyping = false

UserInputService.TextBoxFocused:Connect(function()
	isTyping = true
end)

UserInputService.TextBoxFocusReleased:Connect(function()
	isTyping = false
end)

RunService.Heartbeat:Connect(function()
	local primaryPart = Character and Character.PrimaryPart
	if not primaryPart then return end
	if primaryPart then
		local bodyVelocity, bodyGyro = unpack(movers)
		if not bodyVelocity then
			bodyVelocity = Instance.new("BodyVelocity")
			bodyVelocity.MaxForce = Vector3.one * 1e10

			bodyGyro = Instance.new("BodyGyro")
			bodyGyro.MaxTorque = Vector3.one * 1e10
			bodyGyro.P = 90000

			local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
			bodyAngularVelocity.AngularVelocity = Vector3.yAxis * 1e10
			bodyAngularVelocity.MaxTorque = Vector3.yAxis * 1e10
			bodyAngularVelocity.P = 1e10

			movers = {bodyVelocity,bodyGyro,bodyAngularVelocity}
		end
		if flying and not IsTyping then
			local camCFrame = Camera.CFrame
			local velocity = Vector3.zero
			local rotation = camCFrame.Rotation
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then
				velocity += camCFrame.LookVector
				rotation *= CFrame.Angles(math.rad(-40), 0, 0)
			elseif UserInputService:IsKeyDown(Enum.KeyCode.S) then
				velocity -= camCFrame.LookVector
				rotation *= CFrame.Angles(math.rad(40), 0, 0)
			elseif UserInputService:IsKeyDown(Enum.KeyCode.D) then
				velocity += camCFrame.RightVector
				rotation *= CFrame.Angles(0, 0, math.rad(-40))
			elseif UserInputService:IsKeyDown(Enum.KeyCode.A) then
				velocity -= camCFrame.RightVector
				rotation *= CFrame.Angles(0, 0, math.rad(40))
			elseif UserInputService:IsKeyDown(Enum.KeyCode.Space) then
				velocity += Vector3.yAxis
			elseif UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
				velocity -= Vector3.yAxis
			end
			local tweenInfo = TweenInfo.new(0.5)
			TweenService:Create(bodyVelocity, tweenInfo, {Velocity=(velocity * flyspeed * 45)}):Play()
			bodyVelocity.Parent = primaryPart
			TweenService:Create(bodyGyro, tweenInfo, {CFrame=rotation}):Play()
			bodyGyro.Parent = primaryPart
		elseif not flying and not isTyping then
			bodyVelocity.Parent = nil
			bodyGyro.Parent = nil
		end
	end
end)

local Updatedfps = 0
RunService.RenderStepped:Connect(function(frame)
    Updatedfps = math.round(1 / frame)
end)

-- Main Script
local Window = NSUI:CreateWindow({Name=("HeXen Universal\t\t\t\t    " .. os.date("%H:%M")),LoadingTitle="HeXen Universal",LoadingSubtitle="By Javolo",KeySystem=false,KeySettings={Title="HeXen Key System",Subtitle="Key System",Note="If You're a Friend Then You Have The Key in Dm's",FileName=("" .. speaker.UserId .. ""),SaveKey=true,GrabKeyFromSite=false,Key={""}}})
task.spawn(function()
	while task.wait(1) do
		Window:SetTopbarTitle("HeXen Universal\t\t\t\t    " .. os.date("%H:%M"))
	end
end)
Misc = Window:CreateTab("Hubs & Scripts", 10723425187)
Sectiontotalscrismisc = Misc:CreateSection("Total Universal Script's: " .. Scriptcount, false, false, 7743869612)
Paragraphtotal = Misc:CreateParagraph({Title="General Note",Content="Section's With FE (Filtering Enabled) Can Be Seen By Other Player's\nIf a Section Has (Client) Mean's You Only Can See It."}, Sectiontotalscrismisc)
SCSSectionHUBS = Misc:CreateSection("FE Script Hub's", false, false, 10709759610)
Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Infinite Yield",Interact="Click",Callback=function()
	pcall(function()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
		loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))()
	end)
end})

Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Infinite Yield Reborn",Interact="Click",Callback=function()
	pcall(function()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
		loadstring(game:HttpGet("https://github.com/fuckusfm/infiniteyield-reborn/raw/master/source"))()
	end)
end})

Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Dex",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="CMD X",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/CMD-X/CMD-X/master/Source", true))()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Sirius",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://sirius.menu/script"))()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Nameless Admin Hub",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

Sectiontgearstools = Misc:CreateSection("FE / (Client) LocalPlayer Related Script's | Gear's", false, true, 10747383470)
Button = Misc:CreateButton({SectionParent=Sectiontgearstools,Name="Equip All Tool's",Interact="Click",Callback=function()
	for _, v in pairs(speaker.Backpack:GetChildren()) do
		v.Parent = speaker.Character
	end
	sfxSound("true")
	Notif("Equipped!", "Equipped All Gears / Tools!", 3, "check")
end})

Button = Misc:CreateButton({SectionParent=Sectiontgearstools,Name="Remove Gear's",Interact="Click",Callback=function()
	for i, v in pairs(speaker.Backpack:GetChildren()) do
		if v:IsA("Tool") then
			v:Destroy()
		end
	end
	sfxSound("true")
	Notif("Removed!", "Removed Gears / Tools!", 3, "check")
end})

Togglea = Misc:CreateToggle({SectionParent=Sectiontgearstools,Name="Enable Drop Gear's",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			for i, v in pairs(speaker.Backpack:GetChildren()) do
				v.CanBeDropped = true
			end
			speaker.Character:FindFirstChildOfClass("Tool").CanBeDropped = true
		else
			noVoid = true
			speaker.Character.ChildAdded:Connect(function(rg)
				if (rg:IsA("Tool") and (noVoid == true)) then
					rg:Destroy()
				end
			end)
		end
	end)
end})

Sectionfeplayerelatedanti = Misc:CreateSection("FE LocalPlayer / Player Related Script's | Anti's", false, true, 10734951847)
Paragraphtotal = Misc:CreateParagraph({Title="Anti Fling Note",Content="It's Basically Like NoClip"}, Sectionfeplayerelatedanti)
antiflingClip = true
Toggleantiflinng = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Fling",CurrentValue=false,Callback=function(Value)
	if Value then
		AntiFlinging = RunService.Stepped:Connect(function()
			if speaker.Character ~= nil then
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if (child:IsA("BasePart") and (child.CanCollide == true) and (child.Name ~= floatName)) then
						child.CanCollide = false
					end
				end
			end
		end)
	else
		if AntiFlinging then
			AntiFlinging:Disconnect()
		end
	end
end})

local voidng = false
local magtd = 2
local dlys = 1
local vdpth = -499

local function GetNearPlayers()
    local character = speaker.Character
    local humanoid = character and character:FindFirstChildWhichIsA("Humanoid")
    local rootPart = humanoid and humanoid.RootPart
    if rootPart then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= speaker then
                local playerCharacter = player.Character
                local playerHumanoid = playerCharacter and playerCharacter:FindFirstChildWhichIsA("Humanoid")
                local playerRootPart = playerHumanoid and playerHumanoid.RootPart
                if playerRootPart and (rootPart.Position - playerRootPart.Position).Magnitude < magtd then
                    for _, anim in ipairs(playerHumanoid:GetPlayingAnimationTracks()) do
                        if anim.Animation and (anim.Animation.AnimationId:match("148840371") or anim.Animation.AnimationId:match("5918726674")) then
                            return true
                        end
                    end
                    return false
                end
            end
        end
    end
    return false
end

task.spawn(function()
    while true do
        if antibng then
            local character = speaker.Character
            local humanoid = character and character:FindFirstChildWhichIsA("Humanoid")
            local rootPart = humanoid and humanoid.RootPart
            if GetNearPlayers() and humanoid and rootPart and not voidng then
                voidng = true
                local currentPosition = rootPart.Velocity.Magnitude < 50 and rootPart.CFrame or Camera.Focus
                local timer = tick()
                local oldFallenHeight = workspace.FallenPartsDestroyHeight
                repeat
                    workspace.FallenPartsDestroyHeight = math.huge
                    rootPart.CFrame = CFrame.new(0, vdpth, 0) * CFrame.Angles(math.rad(90), 0, 0)
                    rootPart.AssemblyLinearVelocity = Vector3.new()
                    task.wait()
                until tick() > timer + dlys
                rootPart.CFrame = currentPosition
                rootPart.AssemblyLinearVelocity = Vector3.new()
                humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                workspace.FallenPartsDestroyHeight = oldFallenHeight
                voidng = false
            end
        end
        task.wait()
    end
end)

Toggleantibanging = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Bang",CurrentValue=false,Callback=function(Value)
	antibng = Value
end})

Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Void",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			noVoid = true
			local t = tick()
			for _, v in pairs(speaker.Backpack:GetChildren()) do
				v:SetAttribute("OwnedByLP", t)
			end
			for _, v in pairs(speaker.Character:GetChildren()) do
				if v:IsA("Tool") then
					v:SetAttribute("OwnedByLP", t)
				end
			end
			if (novoidconnections == 0) then
				novoidconnections = 1
				speaker.Backpack.ChildAdded:Connect(function(tool)
					tool:SetAttribute("OwnedByLP", t)
				end)
				speaker.Character.ChildAdded:Connect(function(rg)
					if (rg:IsA("Tool") and noVoid and (rg:GetAttribute("OwnedByLP") ~= t)) then
						repeat
							task.wait(0.05)
							rg:Destroy()
						until rg.Parent ~= speaker.Character 
					end
				end)
				if speaker.Character:FindFirstChildOfClass("Humanoid") then
					RunService.Stepped:Connect(function()
						for _, v in pairs(Players:GetPlayers()) do
							if ((v ~= speaker) and v.Character and not v.Character:FindFirstChildOfClass("Humanoid") and noVoid) then
								v.Character:Destroy()
							end
						end
					end)
				end
			end
		else
			noVoid = false
		end
	end)
end})

local AntiSitLoop
Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Sit",CurrentValue=false,Callback=function(Value)
	if Value then
		AntiSitLoop = RunService.Heartbeat:Connect(function()
			if (speaker.Character and speaker.Character.Humanoid and speaker.Character.Humanoid.Sit) then
				speaker.Character.Humanoid.Sit = false
			end
		end)
	else
		AntiSitLoop:Disconnect()
	end
end})

local AntiStunLoop
Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Stun",CurrentValue=false,Callback=function(Value)
	if Value then
		AntiStunLoop = RunService.Heartbeat:Connect(function()
			if (speaker.Character and speaker.Character.Humanoid and speaker.Character.Humanoid.PlatformStand) then
				speaker.Character.Humanoid.PlatformStand = false
			end
		end)
	else
		AntiStunLoop:Disconnect()
	end
end})

local noFallConnection
local function setRagdollState(state)
    local humanoid = speaker.Character.Humanoid
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, state)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, state)
end

Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Ragdoll",CurrentValue=false,Callback=function(Value)
	if Value then
		setRagdollState(false)
		noFallConnection = speaker.CharacterAdded:Connect(function(char)
			task.wait()
			setRagdollState(false)
		end)
	else
		setRagdollState(true)
		if noFallConnection then
			noFallConnection:Disconnect()
			noFallConnection = nil
		end
	end
end})

Togglea = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Window Afk",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			if not getconnections then
				sfxSound("false")
				Notif("Incompatible Exploit!", "Missing Function('s) : getconnections!", 3, "x")
				return
			end
			for _, v in pairs(getconnections(UserInputService.WindowFocused)) do
				v:Disable()
			end
			for _, v in pairs(getconnections(UserInputService.WindowFocusReleased)) do
				v:Disable()
			end
		else
			if not getconnections then
				sfxSound("false")
				Notif("Incompatible Exploit!", "Missing Function('s) : getconnections!", 3, "x")
				return
			end
			for _, v in pairs(getconnections(UserInputService.WindowFocused)) do
				v:Enable()
			end
			for _, v in pairs(getconnections(UserInputService.WindowFocusReleased)) do
				v:Enable()
			end
		end
	end)
end})

Togglea = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Afk / Idle",CurrentValue=true,Callback=function(Value)
	pcall(function()
		if Value then
			disableidle = Players.LocalPlayer.Idled:Connect(function()
				VirtualUser:CaptureController()
				VirtualUser:ClickButton2(Vector2.new())
			end)
		else
			if disableidle then
				disableidle:Disconnect()
			end
		end
	end)
end})

Sectiontpscritps = Misc:CreateSection("FE LocalPlayer Related | Teleport", false, false, 6723742952)
Input = Misc:CreateInput({SectionParent=Sectiontpscritps,Name="Teleport To Game",PlaceholderText="ID",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		TeleportService:Teleport(Text, speaker)
	end)
end})

spacing = Misc:CreateSpacing(Sectiontpscritps,2)
local function clicktpFunc()
	pcall(function()
		if JMouse.Target then
			if (Humanoid and Humanoid.SeatPart) then
				Humanoid.Sit = false
				task.wait(0.1)
			end
			local hipHeight = Humanoid and (Humanoid.HipHeight > 0) and (Humanoid.HipHeight + 1)
			local rootPart = getRoot(Character)
			local rootPartPosition = rootPart.Position
			local hitPosition = JMouse.Hit.Position
			local newCFrame = CFrame.new(hitPosition, Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)) * CFrame.Angles(0, math.pi, 0)
			rootPart.CFrame = newCFrame + Vector3.new(0, hipHeight or 4, 0)
		end
	end)
end

Paragraph = Misc:CreateParagraph({Title="Press To TP Info",Content="Whenever You Press the Key It TP's To The Mouse Position."}, Sectiontpscritps)
PressToTpKeybind = Misc:CreateKeybind({Name="Press to TP Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectiontpscritps,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		clicktpFunc()
	end
end})

Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Reset Press to TP Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		PressToTpKeybind:Set("Set Keybind")
	end)
end})

local prstotptw = 0.5
local function TweenclicktpFunc()
	pcall(function()
		if JMouse.Target then
			if (Humanoid and Humanoid.SeatPart) then
				Humanoid.Sit = false
				task.wait(0.1)
			end

			local hipHeight = Humanoid and (Humanoid.HipHeight > 0) and (Humanoid.HipHeight + 1) or 4
			local rootPart = getRoot(Character)
			local rootPartPosition = rootPart.Position
			local hitPosition = JMouse.Hit.Position
			local newCFrame = CFrame.new(hitPosition, Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)) *
			CFrame.Angles(0, math.pi, 0)
			newCFrame = newCFrame + Vector3.new(0, hipHeight, 0)
			local tweenInfo = TweenInfo.new(prstotptw, Enum.EasingStyle.Linear)
			local goal = { CFrame = newCFrame }
			local tween = TweenService:Create(rootPart, tweenInfo, goal)
			tween:Play()
		end
	end)
end

TweenPressToTpKeybind = Misc:CreateKeybind({Name="Tween Press to TP Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectiontpscritps,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		TweenclicktpFunc()
	end
end})

Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Reset Tween Press to TP Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		TweenPressToTpKeybind:Set("Set Keybind")
	end)
end})

Slidertweenspeedtp = Misc:CreateSlider({SectionParent=Sectiontpscritps,Name="Tween Press To TP Speed",Range={0,10},Increment=0.1,Suffix="Speed",CurrentValue=prstotptw,Callback=function(Value)
	pcall(function()
		prstotptw = Value
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectiontpscritps,Name="Tween Press To TP Speed",OnEnter=true,PlaceholderText=prstotptw,NumbersOnly=false,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		prstotptw = Text
	end)
end})

local ApiListSrvr = "https://games.roblox.com/v1/games/"
local function ListServers(cursor, sortOrder)
    local url = string.format("%s%d/servers/Public?sortOrder=%s&limit=100", ApiListSrvr, PlaceId, sortOrder)
    if cursor then
        url = url .. "&cursor=" .. cursor
    end
    local response = HttpService:JSONDecode(game:HttpGet(url))
    return response.data, response.nextPageCursor
end

local function TeleportToServer(sortOrder)
    pcall(function()
        local Server, Next
        repeat
            local Servers
            Servers, Next = ListServers(Next, sortOrder)
            Server = Servers[1]
        until Server
        TeleportService:TeleportToPlaceInstance(PlaceId, Server.id, game.Players.LocalPlayer)
    end)
end

spacing = Misc:CreateSpacing(Sectiontpscritps,2)
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Teleport To Lowest Player's Server",Interact="Click",Callback=function()
	pcall(function()
		TeleportToServer("Asc")
	end)
end})

Paragraph = Misc:CreateParagraph({Title="TP To Highest.. Info",Content='Can Show Up a Prompt Saying \"Server Full\" Or Something, Basically Failing But Keep On Pressing To TP'}, Sectiontpscritps)
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Teleport To Highest Player's Server",Interact="Click",Callback=function()
	pcall(function()
		TeleportToServer("Dsc")
	end)
end})

Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Server Hop",Interact="Click",Callback=function()
	pcall(function()
		TeleportToServer("Asc")
	end)
end})

spacing = Misc:CreateSpacing(Sectiontpscritps,2)
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Rejoin This Game",Interact="Click",Callback=function()
	TeleportService:Teleport(PlaceId, speaker)
end})

Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Rejoin This Game W Hexen Uni",Interact="Click",Callback=function()
	tpcc = false
	hu = true
	speaker.OnTeleport:Connect(function(State)
		if (hu and not tpcc and queueteleport) then
			tpcc = true
			queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/Teremanphius/JMldw3D8dwztK3BgA-LU-FcupZGw2RdtR8MGPL7m34RMckx68MSZREHERPHwyqIC/main/FZZS8rthXWoUleMvmMmW8byDsOhakqKPAS52Che2nU33SQISUE3iZx67bA5LdzSf'))()")
		end
	end)
	TeleportService:Teleport(PlaceId, speaker)
end})

Sectionreset = Misc:CreateSection("FE LocalPlayer Related | Reset", false, true, 9134761478)

Button = Misc:CreateButton({SectionParent=Sectionreset,Name="Normal Character Reset",Interact="Click",Callback=function()
	speaker.Character.Humanoid.Health = 0
	sfxSound("true")
	Notif("Reseted Char!", "Reseted " .. speaker.DisplayName .. "!", 3, "check")
end})

Paragraph = Misc:CreateParagraph({Title="Character Reset Info",Content="This Character Reset Type, When You Reset It Teleport's You Back To Your Original Position."}, Sectionreset)
Button = Misc:CreateButton({SectionParent=Sectionreset,Name="Character Reset",Interact="Click",Callback=function()
	charresettopos()
	sfxSound("true")
	Notif("Reseted Char!", "Reseted " .. speaker.DisplayName .. "!", 3, "check")
end})

Sectionflights = Misc:CreateSection("FE LocalPlayer Related | Flight", false, false, 9134755504)
Buttonresetflysvalue = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset Fly Values",Interact="Click",Callback=function()
	pcall(function()
		Slidervehicleflyspeed:Set(3)
		Slidercfspeed:Set(50)
		Sliderflyspeed:Set(3)
	end)
end})

spacing = Misc:CreateSpacing(Sectionflights,2)
Paragraph = Misc:CreateParagraph({Title="Grapple Info",Content="Make's Your Character Move To The Mouse\nex. You Put Your Mouse Up, Your Character Goes Up"}, Sectionflights)
local moveToMouse = false
Togglegrappleasdasd = Misc:CreateToggle({SectionParent=Sectionflights,Name="Grapple",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			local grappleuserdied
			grappleuserdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				Togglegrappleasdasd:Set(false)
			end)
			moveToMouse = true
			local bpNew = Instance.new("BodyPosition", getRoot(speaker.Character))
			while moveToMouse do
				task.wait()
				local mousePosY = JMouse.Hit.Y
				local mousePosX = JMouse.Hit.X
				local mousePosZ = JMouse.Hit.Z
				bpNew.Position = Vector3.new(mousePosX, mousePosY, mousePosZ)
			end
		else
			moveToMouse = false
			getRoot(speaker.Character).BodyPosition:Destroy()
		end
	end)
end})

spacing = Misc:CreateSpacing(Sectionflights,2)
Paragraph = Misc:CreateParagraph({Title="CFrame Fly Info",Content="This Version Of Fly Bypasses Most Anti-Cheat's"}, Sectionflights)
Toggleflii = Misc:CreateToggle({SectionParent=Sectionflights,Name="CFrame Fly",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
			local Head = speaker.Character:WaitForChild("Head")
			Head.Anchored = true
			if CFloop then
				CFloop:Disconnect()
			end
			CFloop = RunService.Heartbeat:Connect(function(deltaTime)
				moveDirection = speaker.Character:FindFirstChildOfClass("Humanoid").MoveDirection * CFspeed * deltaTime
				headCFrame = Head.CFrame
				local cameraCFrame = workspace.CurrentCamera.CFrame
				cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
				cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
				local cameraPosition = cameraCFrame.Position
				local headPosition = headCFrame.Position
				objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
				Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
			end)
		else
			pcall(function()
				CFloop:Disconnect()
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
				Head = speaker.Character:WaitForChild("Head")
				Head.Anchored = false
			end)
		end
	end)
end})

CframeFlyKeybind = Misc:CreateKeybind({Name="CFrame Fly Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionflights,Callback=function(KeyBind)
	cffffly = KeyBind
	if cffffly and not isTyping then
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
		local Head = speaker.Character:WaitForChild("Head")
		Head.Anchored = true
		if CFloop then
			CFloop:Disconnect()
		end
		CFloop = RunService.Heartbeat:Connect(function(deltaTime)
			moveDirection = speaker.Character:FindFirstChildOfClass("Humanoid").MoveDirection * CFspeed * deltaTime
			headCFrame = Head.CFrame
			local cameraCFrame = workspace.CurrentCamera.CFrame
			cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
			cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
			local cameraPosition = cameraCFrame.Position
			local headPosition = headCFrame.Position
			objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
			Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
		end)
	elseif not cffffly and not isTyping then
		pcall(function()
			CFloop:Disconnect()
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
			Head = speaker.Character:WaitForChild("Head")
			Head.Anchored = false
		end)
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset CFrame Fly Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		CframeFlyKeybind:Set("Set Keybind")
	end)
end})

Slidercfspeed = Misc:CreateSlider({SectionParent=Sectionflights,Name="CFrame Fly Speed",Range={1,500},Increment=1,Suffix="CFrame Speed",CurrentValue=50,Callback=function(Value)
	pcall(function()
		CFspeed = Value
	end)
end})

Inputcfspeed = Misc:CreateInput({SectionParent=Sectionflights,Name="CFrame Fly Speed",PlaceholderText=50,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	CFspeed = Text
end})

spacing = Misc:CreateSpacing(Sectionflights,2)
Toggleflii = Misc:CreateToggle({SectionParent=Sectionflights,Name="Fly",CurrentValue=false,Callback=function(Value)
	pcall(function()
		flying = Value
		if flying then
			flying = true
			FlyingLoop = RunService.Stepped:Connect(function()
				pcall(function()
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
				end)
			end)
		else
			flying = false
			if FlyingLoop then
				FlyingLoop:Disconnect()
			end
			pcall(function()
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
			end)
		end
	end)
end})

fLYKeybind = Misc:CreateKeybind({Name="Fly Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,CanBeToggled=true,SectionParent=Sectionflights,Callback=function(KeyBind, chatting)
	normalfly = KeyBind
	if normalfly then
		flying = true
		FlyingLoop = RunService.Stepped:Connect(function()
			pcall(function()
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
			end)
		end)
	else
		flying = false
		if FlyingLoop then
			FlyingLoop:Disconnect()
		end
		pcall(function()
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
		end)
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset Fly Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		fLYKeybind:Set("Set Keybind")
	end)
end})

Sliderflyspeed = Misc:CreateSlider({SectionParent=Sectionflights,Name="Fly Speed",Range={1,25},Increment=1,Suffix="Fly Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		flyspeed = Value
	end)
end})

Inputflyspeed = Misc:CreateInput({SectionParent=Sectionflights,Name="Fly Speed",PlaceholderText=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	flyspeed = Text
end})

spacing = Misc:CreateSpacing(Sectionflights,2)
Toggleflii = Misc:CreateToggle({SectionParent=Sectionflights,Name="Vehicle Fly",CurrentValue=false,Callback=function(Value)
	pcall(function()
		flying = Value
		if flying then
			flying = true
		else
			flying = false
		end
	end)
end})

vehicleFLYKeybind = Misc:CreateKeybind({Name="Vehicle Fly Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionflights,Callback=function(KeyBind)
	normalvehiclefly = KeyBind
	if normalvehiclefly then
		flying = true
	else
		flying = false
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset Vehicle Fly Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		vehicleFLYKeybind:Set("Set Keybind")
	end)
end})

Slidervehicleflyspeed = Misc:CreateSlider({SectionParent=Sectionflights,Name="Vehicle Fly Speed",Range={1,15},Increment=1,Suffix="Vehicle Fly Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		flyspeed = Value
	end)
end})

Inputvehicleflyspeed = Misc:CreateInput({SectionParent=Sectionflights,Name="Vehicle Fly Speed",PlaceholderText=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	flyspeed = Text
end})

Sectionplayerealtefunc = Misc:CreateSection("FE LocalPlayer Related | Function's & Keybind's", false, false, 10686489468)
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Break Velocity",Interact="Click",Callback=function()
	breakvelocity()
	sfxSound("true")
	Notif("Broke Velocity!", "Broke Character's Velocity!", 3, "check")
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Delete Velocity",Interact="Click",Callback=function()
	for i, v in pairs(speaker.Character:GetDescendants()) do
		if (v:IsA("BodyVelocity") or v:IsA("BodyGyro") or v:IsA("RocketPropulsion") or v:IsA("BodyThrust") or v:IsA("BodyAngularVelocity") or v:IsA("AngularVelocity") or v:IsA("BodyForce") or v:IsA("VectorForce") or v:IsA("LineForce")) then
			v:Destroy()
		end
	end
	sfxSound("true")
	Notif("Deleted Velocity!", "Deleted Character's Velocity!", 3, "check")
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
function promptNewRig(speaker, rig)
	local humanoid = speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")
	if humanoid then
		local rigType = Enum.HumanoidRigType[rig]
		if rigType then
			local avatarEditorService = game:GetService("AvatarEditorService")
			local success, result = pcall(function()
				avatarEditorService:PromptSaveAvatar(humanoid.HumanoidDescription, rigType)
				return avatarEditorService.PromptSaveAvatarCompleted:Wait()
			end)
			
			local rigName = rig == "R6" and "R6" or "R15"
			if success then
				if result == Enum.AvatarPromptResult.Success then
					charresettopos()
					sfxSound("true")
					Notif("Changed Rig (" .. rigName .. ")!", "Changed Character's Rig Type To " .. rigName .. "!", 3, "check")
				else
					sfxSound("false")
					Notif("Change Failed!", "The rig change was unsuccessful.", 3, "x")
				end
			else
				sfxSound("false")
				Notif("Blocked Function!", "This Function Is Blocked By The Game!", 3, "x")
			end
		end
	end
end


Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Change Rig Type to R6",Interact="Click",Callback=function()
	promptNewRig(speaker, "R6")
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Change Rig Type to R15",Interact="Click",Callback=function()
	promptNewRig(speaker, "R15")
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
anchorKeybind = Misc:CreateKeybind({Name="Freeze / Anchor Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	freeyourselfs = KeyBind
	if freeyourselfs and not isTyping then
		for _, v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Anchored = true
			end
		end
	elseif not freeyourselfs and not isTyping then
		for _, v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Anchored = false
			end
		end
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Freeze /.. Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		anchorKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
sprintspeed = 32
SprintKeybind = Misc:CreateKeybind({Name="Sprint Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	sprints = KeyBind
	if sprints and not isTyping then
		TweenService:Create(speaker.Character:FindFirstChildOfClass("Humanoid"), TweenInfo.new(0.2), {WalkSpeed=sprintspeed}):Play()
		TweenService:Create(Camera, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {FieldOfView=95}):Play()
	elseif not sprints and not isTyping then
		TweenService:Create(speaker.Character:FindFirstChildOfClass("Humanoid"), TweenInfo.new(0.2), {WalkSpeed=16}):Play()
		TweenService:Create(Camera, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {FieldOfView=70}):Play()
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Sprint Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		SprintKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,1)
Buttonr = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Sprint Values",Interact="Click",Callback=function()
	Slidersprint:Set(32)
end})

Slidersprint = Misc:CreateSlider({SectionParent=Sectionplayerealtefunc,Name="Sprint Speed",Range={1,500},Increment=1,Suffix="Sprint Speed",CurrentValue=sprintspeed,Callback=function(Value)
	pcall(function()
		sprintspeed = Value
	end)
end})

Inputsprint = Misc:CreateInput({SectionParent=Sectionplayerealtefunc,Name="Sprint Speed",OnEnter=true,PlaceholderText=sprintspeed,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	sprintspeed = Text
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
tripKeybind = Misc:CreateKeybind({Name="Trip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		if (speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character)) then
			hum = speaker.Character:FindFirstChildOfClass("Humanoid")
			root = getRoot(speaker.Character)
			hum:ChangeState(0)
			root.Velocity = root.CFrame.LookVector * 30
		end
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Trip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		tripKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Sit",Interact="Click",Callback=function()
	speaker.Character:FindFirstChildOfClass("Humanoid").Sit = true
end})

sitKeybind = Misc:CreateKeybind({Name="Sit Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		speaker.Character:FindFirstChildOfClass("Humanoid").Sit = true
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Sit Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		sitKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
stunKeybind = Misc:CreateKeybind({Name="Stun Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	Stunff = KeyBind
	if Stunff and not isTyping then
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
	elseif not Stunff and not isTyping then
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Stun Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		stunKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="God Mode",Interact="Click",Callback=function()
	sfxSound("true")
	Notif("God Mode Exed!", "God Mode Is Now Working Until You Reset!", 3, "check")
	Cam = workspace.CurrentCamera
	Pos, Char = Cam.CFrame, speaker.Character
	Human = Char and Character.FindFirstChildWhichIsA(Char, "Humanoid")
	nHuman = Human.Clone(Human)
	nHuman.Parent, speaker.Character = Char, nil
	nHuman.SetStateEnabled(nHuman, 15, false)
	nHuman.SetStateEnabled(nHuman, 1, false)
	nHuman.SetStateEnabled(nHuman, 0, false)
	nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
	speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
	nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
	Script = Character.FindFirstChild(Char, "Animate")
	if Script then
		Script.Disabled = true
		task.wait()
		Script.Disabled = false
	end
	nHuman.Health = nHuman.MaxHealth
end})

godmodeKeybind = Misc:CreateKeybind({Name="God Mode Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		Cam = workspace.CurrentCamera
		Pos, Char = Cam.CFrame, speaker.Character
		Human = Char and Character.FindFirstChildWhichIsA(Char, "Humanoid")
		nHuman = Human.Clone(Human)
		nHuman.Parent, speaker.Character = Char, nil
		nHuman.SetStateEnabled(nHuman, 15, false)
		nHuman.SetStateEnabled(nHuman, 1, false)
		nHuman.SetStateEnabled(nHuman, 0, false)
		nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
		speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
		nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
		Script = Character.FindFirstChild(Char, "Animate")
		if Script then
			Script.Disabled = true
			task.wait()
			Script.Disabled = false
		end
		nHuman.Health = nHuman.MaxHealth
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset God Mode Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		godmodeKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayerealtefunc,2)
zerogravtripKeybind = Misc:CreateKeybind({Name="Zero Grav Trip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	zerogravsit = KeyBind
	if zerogravsit and not isTyping then
		if (speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character)) then
			hum = speaker.Character:FindFirstChildOfClass("Humanoid")
			root = getRoot(speaker.Character)
			game.Workspace.Gravity = 0
			root.Velocity = root.CFrame.LookVector * 17
			speaker.Character.Humanoid.Sit = true
		end
	elseif not zerogravsit and not isTyping then
		speaker.Character.Humanoid.Sit = false
		game.Workspace.Gravity = oldgrav
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Zero Grav Trip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		zerogravtripKeybind:Set("Set Keybind")
	end)
end})

carParts = {}
Sectionnoclip = Misc:CreateSection("FE LocalPlayer Related | NoClip", false, false, 14385986465)
Togglenoclip = Misc:CreateToggle({SectionParent=Sectionnoclip,Name="NoClip",CurrentValue=false,Callback=function(Value)
	nnoclipping = Value
	if nnoclipping then
		Noclipping = RunService.Stepped:Connect(function()
			if speaker.Character ~= nil then
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if (child:IsA("BasePart") and (child.CanCollide == true) and (child.Name ~= floatName)) then
						child.CanCollide = false
					end
				end
			end
		end)
	else
		if Noclipping then
			Noclipping:Disconnect()
		end
	end
end})

NoClipKeybind = Misc:CreateKeybind({Name="NoClip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionnoclip,Callback=function(KeyBind)
	noclipff = KeyBind
	if noclipff and not isTyping then
		pcall(function()
			Noclipping = RunService.Stepped:Connect(function()
				if speaker.Character ~= nil then
					for _, child in pairs(speaker.Character:GetDescendants()) do
						if (child:IsA("BasePart") and (child.CanCollide == true) and (child.Name ~= floatName)) then
							child.CanCollide = false
						end
					end
				end
			end)
		end)
	elseif not noclipff and not isTyping then
		pcall(function()
			if Noclipping then
				Noclipping:Disconnect()
			end
		end)
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionnoclip,Name="Reset NoClip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		NoClipKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionnoclip,2)
ToggleVehiclenoclip = Misc:CreateToggle({SectionParent=Sectionnoclip,Name="Vehicle NoClip",CurrentValue=false,Callback=function(Value)
	ToggleVehiclenoclipnnoclipping = Value
	pcall(function()
		if ToggleVehiclenoclipnnoclipping then
			local Car = speaker.Character.Humanoid.SeatPart
			for i, v in pairs(Car.Parent.Parent:GetDescendants()) do
				if v:IsA("BasePart") then
					if v.CanCollide then
						v.CanCollide = false
						table.insert(carParts, v)
					end
				end
			end
		else
			local Car = speaker.Character.Humanoid.SeatPart
			for i, v in pairs(carParts) do
				if v:IsA("BasePart") then
					v.CanCollide = true
				end
			end
		end
	end)
end})

vehNoClipKeybind = Misc:CreateKeybind({Name="Vehicle NoClip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionnoclip,Callback=function(KeyBind)
	vehnoclipff = KeyBind
	if vehnoclipff and not isTyping then
		local Car = speaker.Character.Humanoid.SeatPart
		for i, v in pairs(Car.Parent.Parent:GetDescendants()) do
			if v:IsA("BasePart") then
				if v.CanCollide then
					v.CanCollide = false
					table.insert(carParts, v)
				end
			end
		end
	elseif not vehnoclipff and not isTyping then
		local Car = speaker.Character.Humanoid.SeatPart
		for i, v in pairs(carParts) do
			if v:IsA("BasePart") then
				v.CanCollide = true
			end
		end
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionnoclip,Name="Reset Vehicle NoClip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		vehNoClipKeybind:Set("Set Keybind")
	end)
end})

Sectioninvisible = Misc:CreateSection("FE LocalPlayer Related | Invisible", false, false, 14386256326)
invisRunning = false
Toggleinvisibleeee = Misc:CreateToggle({SectionParent=Sectioninvisible,Name="Invisible",CurrentValue=false,Callback=function(Value)
	invisibleeee = Value
	pcall(function()
		if invisibleeee then
			if invisRunning then
				return
			end
			invisRunning = true
			local Player = speaker
			repeat
				task.wait(0.1)
			until Player.Character 
			local Character = Player.Character
			Character.Archivable = true
			local IsInvis = false
			local IsRunning = true
			local InvisibleCharacter = Character:Clone()
			InvisibleCharacter.Parent = Lighting
			local Void = workspace.FallenPartsDestroyHeight
			InvisibleCharacter.Name = ""
			local CF
			local invisFix = RunService.Stepped:Connect(function()
				pcall(function()
					local IsInteger
					if tostring(Void):find("-") then
						IsInteger = true
					else
						IsInteger = false
					end
					local Pos = Player.Character.HumanoidRootPart.Position
					local Pos_String = tostring(Pos)
					local Pos_Seperate = Pos_String:split(", ")
					local X = tonumber(Pos_Seperate[1])
					local Y = tonumber(Pos_Seperate[2])
					local Z = tonumber(Pos_Seperate[3])
					if (IsInteger == true) then
						if (Y <= Void) then
							Respawn()
						end
					elseif (IsInteger == false) then
						if (Y >= Void) then
							Respawn()
						end
					end
				end)
			end)
			for i, v in pairs(InvisibleCharacter:GetDescendants()) do
				if v:IsA("BasePart") then
					if (v.Name == "HumanoidRootPart") then
						v.Transparency = 1
					else
						v.Material = Enum.Material.ForceField
						v.Color = Color3.fromRGB(25, 25, 25)
					end
				end
			end
			function Respawn()
				IsRunning = false
				if (IsInvis == true) then
					pcall(function()
						Player.Character = Character
						task.wait()
						Character.Parent = workspace
						Character:FindFirstChildWhichIsA("Humanoid"):Destroy()
						IsInvis = false
						InvisibleCharacter.Parent = nil
						invisRunning = false
					end)
				elseif (IsInvis == false) then
					pcall(function()
						Player.Character = Character
						task.wait()
						Character.Parent = workspace
						Character:FindFirstChildWhichIsA("Humanoid"):Destroy()
						TurnVisible()
					end)
				end
			end
			local invisDied
			invisDied = InvisibleCharacter:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				Respawn()
				invisDied:Disconnect()
			end)
			if (IsInvis == true) then
				return
			end
			IsInvis = true
			CF = workspace.CurrentCamera.CFrame
			local CF_1 = Player.Character.HumanoidRootPart.CFrame
			Character:MoveTo(Vector3.new(0, math.pi * 1000000, 0))
			workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
			task.wait(0.2)
			workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
			InvisibleCharacter = InvisibleCharacter
			Character.Parent = Lighting
			InvisibleCharacter.Parent = workspace
			InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
			Player.Character = InvisibleCharacter
			workspace.CurrentCamera:remove()
			task.wait(0.1)
			repeat
				task.wait()
			until speaker.Character ~= nil 
			workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA("Humanoid")
			workspace.CurrentCamera.CameraType = "Custom"
			speaker.CameraMinZoomDistance = 0.5
			speaker.CameraMaxZoomDistance = 400
			speaker.CameraMode = "Classic"
			speaker.Character.Head.Anchored = false
			Player.Character.Animate.Disabled = true
			Player.Character.Animate.Disabled = false
			function TurnVisible()
				if (IsInvis == false) then
					return
				end
				invisFix:Disconnect()
				invisDied:Disconnect()
				CF = workspace.CurrentCamera.CFrame
				Character = Character
				local CF_1 = Player.Character.HumanoidRootPart.CFrame
				Character.HumanoidRootPart.CFrame = CF_1
				InvisibleCharacter:Destroy()
				Player.Character = Character
				Character.Parent = workspace
				IsInvis = false
				Player.Character.Animate.Disabled = true
				Player.Character.Animate.Disabled = false
				invisDied = Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
					Respawn()
					invisDied:Disconnect()
				end)
				invisRunning = false
			end
		else
			TurnVisible()
		end
	end)
end})

InvisKeybind = Misc:CreateKeybind({Name="Invisible Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectioninvisible,Callback=function(KeyBind)
	invisff = KeyBind
	if invisff and not isTyping then
		if invisRunning then
			return
		end
		invisRunning = true
		local Player = speaker
		repeat
			task.wait(0.1)
		until Player.Character 
		local Character = Player.Character
		Character.Archivable = true
		local IsInvis = false
		local IsRunning = true
		local InvisibleCharacter = Character:Clone()
		InvisibleCharacter.Parent = Lighting
		local Void = workspace.FallenPartsDestroyHeight
		InvisibleCharacter.Name = ""
		local CF
		local invisFix = RunService.Stepped:Connect(function()
			pcall(function()
				local IsInteger
				if tostring(Void):find("-") then
					IsInteger = true
				else
					IsInteger = false
				end
				local Pos = Player.Character.HumanoidRootPart.Position
				local Pos_String = tostring(Pos)
				local Pos_Seperate = Pos_String:split(", ")
				local X = tonumber(Pos_Seperate[1])
				local Y = tonumber(Pos_Seperate[2])
				local Z = tonumber(Pos_Seperate[3])
				if (IsInteger == true) then
					if (Y <= Void) then
						Respawn()
					end
				elseif (IsInteger == false) then
					if (Y >= Void) then
						Respawn()
					end
				end
			end)
		end)
		for i, v in pairs(InvisibleCharacter:GetDescendants()) do
			if v:IsA("BasePart") then
				if (v.Name == "HumanoidRootPart") then
					v.Transparency = 1
				else
					v.Material = Enum.Material.ForceField
					v.Color = Color3.fromRGB(25, 25, 25)
				end
			end
		end
		function Respawn()
			IsRunning = false
			if (IsInvis == true) then
				pcall(function()
					Player.Character = Character
					task.wait()
					Character.Parent = workspace
					Character:FindFirstChildWhichIsA("Humanoid"):Destroy()
					IsInvis = false
					InvisibleCharacter.Parent = nil
					invisRunning = false
				end)
			elseif (IsInvis == false) then
				pcall(function()
					Player.Character = Character
					task.wait()
					Character.Parent = workspace
					Character:FindFirstChildWhichIsA("Humanoid"):Destroy()
					TurnVisible()
				end)
			end
		end
		local invisDied
		invisDied = InvisibleCharacter:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			Respawn()
			invisDied:Disconnect()
		end)
		if (IsInvis == true) then
			return
		end
		IsInvis = true
		CF = workspace.CurrentCamera.CFrame
		local CF_1 = Player.Character.HumanoidRootPart.CFrame
		Character:MoveTo(Vector3.new(0, math.pi * 1000000, 0))
		workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
		task.wait(0.2)
		workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
		InvisibleCharacter = InvisibleCharacter
		Character.Parent = Lighting
		InvisibleCharacter.Parent = workspace
		InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
		Player.Character = InvisibleCharacter
		workspace.CurrentCamera:remove()
		task.wait(0.1)
		repeat
			task.wait()
		until speaker.Character ~= nil 
		workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA("Humanoid")
		workspace.CurrentCamera.CameraType = "Custom"
		speaker.CameraMinZoomDistance = 0.5
		speaker.CameraMaxZoomDistance = 400
		speaker.CameraMode = "Classic"
		speaker.Character.Head.Anchored = false
		Player.Character.Animate.Disabled = true
		Player.Character.Animate.Disabled = false
		function TurnVisible()
			if (IsInvis == false) then
				return
			end
			invisFix:Disconnect()
			invisDied:Disconnect()
			CF = workspace.CurrentCamera.CFrame
			Character = Character
			local CF_1 = Player.Character.HumanoidRootPart.CFrame
			Character.HumanoidRootPart.CFrame = CF_1
			InvisibleCharacter:Destroy()
			Player.Character = Character
			Character.Parent = workspace
			IsInvis = false
			Player.Character.Animate.Disabled = true
			Player.Character.Animate.Disabled = false
			invisDied = Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				Respawn()
				invisDied:Disconnect()
			end)
			invisRunning = false
		end
	elseif not invisff and not isTyping then
		TurnVisible()
	end
end})

Button = Misc:CreateButton({SectionParent=Sectioninvisible,Name="Reset Invisible Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		InvisKeybind:Set("Set Keybind")
	end)
end})

Button = Misc:CreateButton({SectionParent=Sectioninvisible,Name="Invisible (Tool)",Interact="Click",Callback=function()
	offset = 1100
	LocalPlayer = game.Players.LocalPlayer
	Backpack = speaker.Backpack
	Character = speaker.Character
	invisible = false
	grips = {}
	local heldTool
	local gripChanged
	local handle
	local weld
	function setDisplayDistance(distance)
		for _, player in pairs(game.Players:GetPlayers()) do
			if (player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")) then
				player.Character:FindFirstChildWhichIsA("Humanoid").NameDisplayDistance = distance
				player.Character:FindFirstChildWhichIsA("Humanoid").HealthDisplayDistance = distance
			end
		end
	end
	tool = Instance.new("Tool", Backpack)
	tool.Name = "Ghostify [Disabled]"
	tool.RequiresHandle = false
	tool.CanBeDropped = false
	tool.Equipped:Connect(function()
		task.wait()
		if not invisible then
			invisible = true
			tool.Name = "Ghostify [Enabled]"
			if handle then
				handle:Destroy()
			end
			if weld then
				weld:Destroy()
			end
			handle = Instance.new("Part", workspace)
			handle.Name = "Handle"
			handle.Transparency = 1
			handle.CanCollide = false
			handle.Size = Vector3.new(2, 1, 1)
			weld = Instance.new("Weld", handle)
			weld.Part0 = handle
			weld.Part1 = Character.HumanoidRootPart
			weld.C0 = CFrame.new(0, offset - 1.5, 0)
			setDisplayDistance(offset + 100)
			workspace.CurrentCamera.CameraSubject = handle
			Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, offset, 0)
			Character.Humanoid.HipHeight = offset
			Character.Humanoid:ChangeState(11)
			for _, child in pairs(Backpack:GetChildren()) do
				if (child:IsA("Tool") and (child ~= tool)) then
					grips[child] = child.Grip
				end
			end
		elseif invisible then
			invisible = false
			tool.Name = "Ghostify [Disabled]"
			if handle then
				handle:Destroy()
			end
			if weld then
				weld:Destroy()
			end
			for _, child in pairs(Character:GetChildren()) do
				if child:IsA("Tool") then
					child.Parent = Backpack
				end
			end
			for tool, grip in pairs(grips) do
				if tool then
					tool.Grip = grip
				end
			end
			heldTool = nil
			setDisplayDistance(100)
			workspace.CurrentCamera.CameraSubject = Character.Humanoid
			Character.Animate.Disabled = false
			Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -offset, 0)
			Character.Humanoid.HipHeight = 0
			Character.Humanoid:ChangeState(11)
		end
		tool.Parent = Backpack
	end)
	Character.ChildAdded:Connect(function(child)
		task.wait()
		if (invisible and child:IsA("Tool") and (child ~= heldTool) and (child ~= tool)) then
			heldTool = child
			lastGrip = heldTool.Grip
			if not grips[heldTool] then
				grips[heldTool] = lastGrip
			end
			for _, track in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do
				track:Stop()
			end
			Character.Animate.Disabled = true
			heldTool.Grip = heldTool.Grip * CFrame.new(0, offset - 1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0)
			heldTool.Parent = Backpack
			heldTool.Parent = Character
			if gripChanged then
				gripChanged:Disconnect()
			end
			gripChanged = heldTool:GetPropertyChangedSignal("Grip"):Connect(function()
				task.wait()
				if not invisible then
					gripChanged:Disconnect()
				end
				if (heldTool.Grip ~= lastGrip) then
					lastGrip = heldTool.Grip * CFrame.new(0, offset - 1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0)
					heldTool.Grip = lastGrip
					heldTool.Parent = Backpack
					heldTool.Parent = Character
				end
			end)
		end
	end)
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

Sectionlprtog = Misc:CreateSection("FE LocalPlayer Related | Toggle's", false, false, 10686489468)
Paragraph = Misc:CreateParagraph({Title="Upside Down Character & Crawl Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionlprtog)
Toggleupsidedown = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Upside Down Character",CurrentValue=false,Callback=function(Value)
	upsidedown = Value
	if upsidedown then
		if not r15(speaker) then
			ifuserdiedar = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					Toggleupsidedown:Set(false)
					ifuserdiedar:Disconnect()
				end)
			end)
			sfxSound("true")
			Notif("You're Now Upside Down!", "You're Upside Down Until You Reset!\nAnd When You Sit In A Chair!", 3, "check")
			c = Character
			hrp0 = c:FindFirstChild("HumanoidRootPart")
			hrp1 = hrp0:Clone()
			c.Parent = nil
			hrp0.Parent = hrp1
			hrp0.RootJoint.Part0 = nil
			hrp1.Parent = c
			c.Parent = workspace
			c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.pi, 0, math.pi)
			hrp0.Transparency = 0.85
			hrp0.Material = Enum.Material.ForceField
			hrp0.Color = Color3.fromRGB(25, 25, 25)
			R6Upsideg = RunService.Heartbeat:Connect(function()
				if (c and c.Parent) then
					hrp0.CFrame = hrp1.CFrame
					hrp0.Orientation += Vector3.new(0, 0, 180)
					hrp0.Position -= Vector3.new(0, 0, 0)
					hrp0.Velocity = hrp1.Velocity
				end
			end)
		elseif r15(speaker) then
			ifuserdiedar = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					Toggleupsidedown:Set(false)
					ifuserdiedar:Disconnect()
				end)
			end)
			sfxSound("true")
			Notif("You're Now Upside Down!", "You're Upside Down Until You Reset!\nAnd When You Sit In A Chair!", 3, "check")
			local LocalPlayer = Players.LocalPlayer
			local Character = LocalPlayer.Character
			local c = Character
			local function setupCharacter()
				local hrp0 = c:FindFirstChild("HumanoidRootPart")
				if hrp0 then
					local hrp1 = hrp0:Clone()
					c.Parent = nil
					hrp0.Parent = hrp1
					hrp1.Parent = c
					c.Parent = workspace
					c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(0, 0, math.pi) * CFrame.new(0, -1, 0)
					hrp0.Transparency = 0.85
					hrp0.Material = Enum.Material.ForceField
					hrp0.Color = Color3.fromRGB(25, 25, 25)
					R15Upsidegg = RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame
							hrp0.Orientation += Vector3.new(0, 0, 180)
							hrp0.Position -= Vector3.new(0, 1, 0)
							hrp0.Velocity = hrp1.Velocity
						end
					end)
				end
			end
			setupCharacter()
			Players.LocalPlayer.CharacterAdded:Connect(function(char)
				c = char
				setupCharacter()
			end)
		end
	else
		if r15(speaker) then 
			R15Upsidegg:Disconnect()
		else
			R6Upsideg:Disconnect()
		end
		charresettopos()
		task.wait(1)
		ifuserdiedar:Disconnect()
	end
end})

Toggle = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Freeze / Anchor Yourself",CurrentValue=false,Callback=function(Value)
	for i, v in pairs(speaker.Character:GetChildren()) do
		if v:IsA("BasePart") then
			v.Anchored = Value
		end
	end
end})

Toggle = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Zero Grav Trip W/ Sit",CurrentValue=false,Callback=function(Value)
	zerograv = Value
	if zerograv then
		if (speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character)) then
			hum = speaker.Character:FindFirstChildOfClass("Humanoid")
			root = getRoot(speaker.Character)
			game.Workspace.Gravity = 0
			root.Velocity = root.CFrame.LookVector * 17
			speaker.Character.Humanoid.Sit = true
		end
	else
		speaker.Character.Humanoid.Sit = false
		game.Workspace.Gravity = oldgrav
	end
end})

Toggleinfjump2 = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Infinite Jump",CurrentValue=false,Callback=function(Value)
	pcall(function()
		infjumpp2 = Value
		if infjumpp2 then
			if infJump then
				infJump:Disconnect()
			end
			infJumpDebounce = false
			infJump = UserInputService.JumpRequest:Connect(function()
				if not infJumpDebounce then
					infJumpDebounce = true
					speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
					task.wait()
					infJumpDebounce = false
				end
			end)
		else
			infJump:Disconnect()
		end
		infJumpDebounce = false
	end)
end})

fakelagging = false
Togglefakelag = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Fake Lag",CurrentValue=false,Callback=function(Value)
	pcall(function()
		Fakelag = Value
		if Fakelag then
			fakelagging = true
			while fakelagging do
				for i, v in pairs(speaker.Character:GetChildren()) do
					if v:IsA("BasePart") then
						v.Anchored = true
					end
				end
				task.wait(0.1)
				for i, v in pairs(speaker.Character:GetChildren()) do
					if v:IsA("BasePart") then
						v.Anchored = false
					end
				end
				task.wait(0.1)
			end
		else
			fakelagging = false
			for i, v in pairs(speaker.Character:GetChildren()) do
				if v:IsA("BasePart") then
					v.Anchored = false
				end
			end
		end
	end)
end})

ToggleCrawl = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Crawl",CurrentValue=false,Callback=function(Value)
	Crawlingornot = Value
	if Crawlingornot then
		if not r15(speaker) then
			ifuserdiedar2 = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleCrawl:Set(false)
					ifuserdiedar2:Disconnect()
				end)
			end)
			local climbAnim = Instance.new("Animation")
			climbAnim.AnimationId = "rbxassetid://180436334"
			local climbTrack = speaker.Character.Humanoid:LoadAnimation(climbAnim)
			local function playIdleClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 0)
				else
					climbTrack:AdjustSpeed(0)
				end
			end
			local function playWalkingClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 1)
				else
					climbTrack:AdjustSpeed(1)
				end
			end
			local humrunr6
			humrunr6 = speaker.Character.Humanoid.Running:Connect(function(speed)
				if (speed == 0) then
					playIdleClimbingAnimation()
				else
					playWalkingClimbingAnimation()
				end
			end)
			local c = speaker.Character
			local hrp0 = c:FindFirstChild("HumanoidRootPart")
			if hrp0 then
				local hrp1 = hrp0:Clone()
				c.Parent = nil
				hrp0.Parent = hrp1
				hrp0.RootJoint.Part0 = nil
				hrp1.Parent = c
				c.Parent = workspace
				c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.rad(90), 0, 0)
				c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.new(0, -2, 0)
				hrp0.Transparency = 0.85
				hrp0.Material = Enum.Material.ForceField
				hrp0.Color = Color3.fromRGB(25, 25, 25)
			Crawlr6 = RunService.Heartbeat:Connect(function()
				if (c and c.Parent) then
					hrp0.CFrame = hrp1.CFrame
					hrp0.Orientation += Vector3.new(-90, 0, 0)
					hrp0.Position -= Vector3.new(0, 1.6, 0)
					hrp0.Velocity = hrp1.Velocity
				end
			end)
			end
		elseif r15(speaker) then
			ifuserdiedar2 = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleCrawl:Set(false)
					ifuserdiedar2:Disconnect()
				end)
			end)
			local player = speaker
			local character = player.Character or player.CharacterAdded:Wait()
			local humanoid = character:WaitForChild("Humanoid")
			local climbAnim = Instance.new("Animation")
			climbAnim.AnimationId = "rbxassetid://507765644"
			local climbTrack = humanoid:LoadAnimation(climbAnim)
			local function playIdleClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 0)
				else
					climbTrack:AdjustSpeed(0)
				end
			end
			local function playWalkingClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 1)
				else
					climbTrack:AdjustSpeed(1)
				end
			end
			local humrunr15
			humrunr15 = humanoid.Running:Connect(function(speed)
				if (speed == 0) then
					playIdleClimbingAnimation()
				else
					playWalkingClimbingAnimation()
				end
			end)
			local LocalPlayer = Players.LocalPlayer
			local Character = LocalPlayer.Character
			local c = Character
			local function setupCharacter()
				local hrp0 = c:FindFirstChild("HumanoidRootPart")
				if hrp0 then
					local hrp1 = hrp0:Clone()
					c.Parent = nil
					hrp0.Parent = hrp1
					hrp1.Parent = c
					c.Parent = workspace
					c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(math.rad(-90), 0, 0) * CFrame.new(0, -1, -1.2)
					hrp0.Transparency = 0.85
					hrp0.Material = Enum.Material.ForceField
					hrp0.Color = Color3.fromRGB(25, 25, 25)
					R15crawlg = RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame
							hrp0.Orientation += Vector3.new(-90, 0, 0)
							hrp0.Position -= Vector3.new(0, 1.6, 0)
							hrp0.Velocity = hrp1.Velocity
						end
					end)
				end
			end
			setupCharacter()
			r15charaddedcrawl = Players.LocalPlayer.CharacterAdded:Connect(function(char)
				c = char
				setupCharacter()
			end)
		end
	else
		pcall(function()
			if r15(speaker) then
				R15crawlg:Disconnect()
			else
				Crawlr6:Disconnect()
			end
			ifuserdiedar2:Disconnect()
			charresettopos()
			if climbTrack then
				climbTrack:Stop()
			end
			if climbAnim then
				climbAnim:Destroy()
			end
			if r15(speaker) then
				humrunr6:Disconnect()
			else
				humrunr15:Disconnect()
			end
		end)
	end
end})

Floating = false
Togglestunned = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Stun",CurrentValue=false,Callback=function(Value)
	pcall(function()
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = Value
	end)
end})

Paragraph = Misc:CreateParagraph({Title="Sit Walk Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionlprtog)
Togglestiwalk = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Sit Walk",CurrentValue=false,Callback=function(Value)
	pcall(function()
		sitwalkerr = Value
		if sitwalkerr then
			anims = speaker.Character.Animate
			local sit = anims.sit:FindFirstChildOfClass("Animation").AnimationId
			anims.idle:FindFirstChildOfClass("Animation").AnimationId = sit
			anims.walk:FindFirstChildOfClass("Animation").AnimationId = sit
			anims.run:FindFirstChildOfClass("Animation").AnimationId = sit
			anims.jump:FindFirstChildOfClass("Animation").AnimationId = sit
			ifuserdiedaq = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				pcall(function()
					Togglestiwalk:Set(false)
				end)
			end)
		else
			ifuserdiedaq:Disconnect()
			charresettopos()
		end
	end)
end})

Toggleslider = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Slide",CurrentValue=false,Callback=function(Value)
	icewalker = Value
	if icewalker then
		slipperwalk(true)
	else
		slipperwalk(false)
	end
	speaker.CharacterAdded:Connect(function(char)
		Character = char
		if icewalker then
			slipperwalk(true)
		else
			slipperwalk(false)
		end
	end)
end})

Toggleedgerjumper = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Edge Jump",CurrentValue=false,Callback=function(Value)
	pcall(function()
		edgerjumper = Value
		if edgerjumper then
			local Char = speaker.Character
			local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
			local state
			local laststate
			local lastcf
			local function edgejump()
				if (Char and Human) then
					laststate = state
					state = Human:GetState()
					if ((laststate ~= state) and (state == Enum.HumanoidStateType.Freefall) and (laststate ~= Enum.HumanoidStateType.Jumping)) then
						Character.HumanoidRootPart.CFrame = lastcf
						Character.HumanoidRootPart.Velocity = Vector3.new(Character.HumanoidRootPart.Velocity.X, Human.JumpPower or Human.JumpHeight, Character.HumanoidRootPart.Velocity.Z)
					end
					lastcf = Character.HumanoidRootPart.CFrame
				end
			end
			edgejump()
			HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
			HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
				Char, Human = nChar, nChar:WaitForChild("Humanoid")
				edgejump()
				HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
			end)
		else
			HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or nil
			HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or nil
		end
	end)
end})

Paragraph = Misc:CreateParagraph({Title="Float Info",Content="Control's :\nQ - Down\nE - Up"}, Sectionlprtog)
Toggle = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Float",CurrentValue=false,Callback=function(Value)
	pcall(function()
		floattt = Value
		if floattt then
			Floating = true
			pchar = speaker.Character
			if (pchar and not pchar:FindFirstChild(floatName)) then
				task.spawn(function()
					Float = Instance.new("Part")
					Float.Name = floatName
					Float.Parent = pchar
					Float.Transparency = 1
					Float.Size = Vector3.new(2, 0.2, 1.5)
					Float.Anchored = true
					FloatValue = -3.1
					Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0, FloatValue, 0)
					Notif("Float Has Been Enabled!", "Now You Are Floating, Just Jump!", 2, "check")
					qUp = JMouse.KeyUp:Connect(function(KEY)
						if (KEY == "q") then
							FloatValue = FloatValue + 0.5
						end
					end)
					eUp = JMouse.KeyUp:Connect(function(KEY)
						if (KEY == "e") then
							FloatValue = FloatValue - 0.5
						end
					end)
					qDown = JMouse.KeyDown:Connect(function(KEY)
						if (KEY == "q") then
							FloatValue = FloatValue - 0.5
						end
					end)
					eDown = JMouse.KeyDown:Connect(function(KEY)
						if (KEY == "e") then
							FloatValue = FloatValue + 0.5
						end
					end)
					floatDied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
						FloatingFunc:Disconnect()
						Float:Destroy()
						qUp:Disconnect()
						eUp:Disconnect()
						qDown:Disconnect()
						eDown:Disconnect()
						floatDied:Disconnect()
					end)
					function FloatPadLoop()
						if (pchar:FindFirstChild(floatName) and getRoot(pchar)) then
							Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0, FloatValue, 0)
						else
							FloatingFunc:Disconnect()
							Float:Destroy()
							qUp:Disconnect()
							eUp:Disconnect()
							qDown:Disconnect()
							eDown:Disconnect()
							floatDied:Disconnect()
						end
					end
					FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop)
				end)
			end
		else
			Floating = false
			pchar = speaker.Character
			Notif("Float Has Been Disabled!", "You Have Disabled Float!", 2, "x")
			if pchar:FindFirstChild(floatName) then
				pchar:FindFirstChild(floatName):Destroy()
			end
			if floatDied then
				FloatingFunc:Disconnect()
				qUp:Disconnect()
				eUp:Disconnect()
				qDown:Disconnect()
				eDown:Disconnect()
				floatDied:Disconnect()
			end
		end
	end)
end})

spacing = Misc:CreateSpacing(Sectionlprtog,2)
Togglestrengthen = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Strengthen Character",CurrentValue=false,Callback=function(Value)
	pcall(function()
		strengchar = Value
		if strengchar then
			for i, player in pairs(speaker.Character:GetChildren()) do
				if (player.ClassName == "Part") then
					player.CustomPhysicalProperties = PhysicalProperties.new(999999, 0.3, 0.5)
				end
			end
		else
			for i, player in pairs(speaker.Character:GetChildren()) do
				if (player.ClassName == "Part") then
					player.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
				end
			end
		end
	end)
end})

Toggleweaken = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Weaken Character",CurrentValue=false,Callback=function(Value)
	pcall(function()
		weakenchar = Value
		if weakenchar then
			for i, player in pairs(speaker.Character:GetChildren()) do
				if (player.ClassName == "Part") then
					player.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5)
				end
			end
		else
			for i, player in pairs(speaker.Character:GetChildren()) do
				if (player.ClassName == "Part") then
					player.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
				end
			end
		end
	end)
end})

local swimbeat = nil
spacing = Misc:CreateSpacing(Sectionlprtog,2)
Toggleswimmer = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Swim",CurrentValue=false,Callback=function(Value)
	pcall(function()
		swimmer = Value
		if swimmer then
			if (not swimming and speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")) then
				oldgrav = workspace.Gravity
				workspace.Gravity = 0
				local swimDied = function()
					workspace.Gravity = oldgrav
					swimming = false
				end
				Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
				gravReset = Humanoid.Died:Connect(swimDied)
				enums = Enum.HumanoidStateType:GetEnumItems()
				table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
				for i, v in pairs(enums) do
					Humanoid:SetStateEnabled(v, false)
				end
				Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
			end
		else
			if (speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")) then
				workspace.Gravity = oldgrav
				swimming = false
				if gravReset then
					gravReset:Disconnect()
				end
				if (swimbeat ~= nil) then
					swimbeat:Disconnect()
					swimbeat = nil
				end
				Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
				enums = Enum.HumanoidStateType:GetEnumItems()
				table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
				for i, v in pairs(enums) do
					Humanoid:SetStateEnabled(v, true)
				end
			end
		end
	end)
end})

Sectionflipsnthings = Misc:CreateSection("FE LocalPlayer Related | Flip's & Roll's", false, false, 9134761478)
Paragraph = Misc:CreateParagraph({Title="Beyblade Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionflipsnthings)

beybaldespeedr = 20
ToggleBeyBlade = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Beyblade",CurrentValue=false,Callback=function(Value)
	beyblader = Value
	if beyblader then
		local ifuserdied2
		if not r15(speaker) then
			ifuserdied2 = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleBeyBlade:Set(false)
					ifuserdied2:Disconnect()
				end)
			end)
			local Character = game.Players.LocalPlayer.Character
			local c = Character
			local hrp0 = c:FindFirstChild("HumanoidRootPart")
			local hrp1 = hrp0:Clone()
			c.Parent = nil
			hrp0.Parent = hrp1
			hrp0.RootJoint.Part0 = nil
			hrp1.Parent = c
			c.Parent = workspace
			c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.rad(90), 0, 0)
			hrp0.Transparency = 0.85
			hrp0.Material = Enum.Material.ForceField
			hrp0.Color = Color3.fromRGB(25, 25, 25)
			R6Bladebey = RunService.Heartbeat:Connect(function()
				if (c and c.Parent) then
					hrp0.CFrame = hrp1.CFrame
					hrp0.Orientation += Vector3.new(-90, 0, 0)
					hrp0.Position -= Vector3.new(0, 0, 0)
					hrp0.Velocity = hrp1.Velocity
				end
			end)
		elseif r15(speaker) then
			ifuserdied2 = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleBeyBlade:Set(false)
					ifuserdied2:Disconnect()
				end)
			end)
			local LocalPlayer = Players.LocalPlayer
			local Character = LocalPlayer.Character
			local c = Character
			local function setupCharacter()
				local hrp0 = c:FindFirstChild("HumanoidRootPart")
				if hrp0 then
					local hrp1 = hrp0:Clone()
					c.Parent = nil
					hrp0.Parent = hrp1
					hrp1.Parent = c
					c.Parent = workspace
					c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(math.rad(-90), 0, 0) * CFrame.new(0, 0, 1.2)
					hrp0.Transparency = 0.85
					hrp0.Material = Enum.Material.ForceField
					hrp0.Color = Color3.fromRGB(25, 25, 25)
					R15Bladebey = RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame
							hrp0.Orientation += Vector3.new(-90, 0, 0)
							hrp0.Position -= Vector3.new(0, 0, 0)
							hrp0.Velocity = hrp1.Velocity
						end
					end)
				end
			end
			setupCharacter()
			Players.LocalPlayer.CharacterAdded:Connect(function(char)
				c = char
				setupCharacter()
			end)
		end
		local BeyBladee = Instance.new("BodyAngularVelocity")
		BeyBladee.Name = "BeyBlading"
		BeyBladee.Parent = getRoot(speaker.Character)
		BeyBladee.MaxTorque = Vector3.new(0, math.huge, 0)
		task.spawn(function()
			while task.wait() do
				BeyBladee.AngularVelocity = Vector3.new(0, beybaldespeedr, 0)
			end
		end)
	else
		pcall(function()
			charresettopos()
			if r15(speaker) then
				R15Bladebey:Disconnect()
			else
				R6Bladebey:Disconnect()
			end
			ifuserdied2:Disconnect()
			for _, v in pairs(getRoot(speaker.Character):GetChildren()) do
				if (v.Name == "BeyBlading") then
					v:Destroy()
				end
			end
		end)
	end
end})

Sliderbeyblade = Misc:CreateSlider({SectionParent=Sectionflipsnthings,Name="Beyblade Speed",Range={0,780},Increment=1,Suffix="Spin Speed",CurrentValue=20,Callback=function(Value)
	pcall(function()
		beybaldespeedr = Value
	end)
end})

Inputbeyblade = Misc:CreateInput({SectionParent=Sectionflipsnthings,Name="Beyblade Speed",PlaceholderText=20,RemoveTextAfterFocusLost=false,Callback=function(Text)
	beybaldespeedr = Text
end})

spacing = Misc:CreateSpacing(Sectionflipsnthings,2)
Flipping = false
Toggleflipppping = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Flip",CurrentValue=false,Callback=function(Value)
	flippa = Value
	if flippa then
		if not r15(speaker) then
			Flipping = true
			pl = speaker
			me = pl.Character
			xl = me.Torso["Right Shoulder"]
			local debounce = false
			function _restoreproperties()
				Holder = speaker.Character
				Torso = Holder:FindFirstChild("Torso")
				RightS = Torso:FindFirstChild("Right Shoulder")
				LeftS = Torso:FindFirstChild("Left Shoulder")
				RightH = Torso:FindFirstChild("Right Hip")
				LeftH = Torso:FindFirstChild("Left Hip")
				RightS.MaxVelocity = 0.15
				LeftS.MaxVelocity = 0.15
				RightH.MaxVelocity = 0.1
				LeftH.MaxVelocity = 0.1
				RightS.DesiredAngle = 0
				LeftS.DesiredAngle = 0
				LeftH.DesiredAngle = 0
				RightH.DesiredAngle = 0
			end
			function ManageAnimation(value)
				Holder = speaker.Character
				Player = speaker
				if (value == "no anim") then
					Anim = Holder:FindFirstChild("Animate")
					if (Anim ~= nil) then
						Anim.Disabled = true
						Anim.Parent = Player
					end
				elseif (value == "re-anim") then
					Anim = Player:FindFirstChild("Animate")
					if (Anim ~= nil) then
						Anim.Disabled = false
						Anim.Parent = Holder
					end
				end
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
					wait()
				end
				ml:Remove()
			end
			function Flip2()
				if (debounce == true) then
					return
				end
				debounce = true
				Char = speaker.Character
				Human = Character.Humanoid
				Torso = Character.Torso
				CF = Torso.CFrame
				Human.PlatformStand = true
				VelUp = Instance.new("BodyVelocity")
				VelUp.velocity = Vector3.new(0, 60, 0) + (Torso.CFrame.lookVector * 26)
				VelUp.P = VelUp.P * 2
				VelUp.maxForce = Vector3.new(10000, 10000, 10000) * 999
				VelUp.Parent = Torso
				coroutine.resume(coroutine.create(Down), VelUp)
				Gyro = Instance.new("BodyGyro")
				Gyro.P = Gyro.P * 10
				Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
				Gyro.cframe = CF
				Gyro.Parent = Torso
				for i = 2, 28 do
					Gyro.cframe = Gyro.cframe * CFrame.fromEulerAnglesXYZ(math.pi / -16, 0, 0)
					wait()
				end
				Gyro.cframe = CF
				wait()
				Gyro:Remove()
				Human.PlatformStand = false
				_restoreproperties()
				debounce = false
			end
			while Flipping do
				wait()
				Flip2()
			end
		else
			Flipping = true
			local speaker = game.Players.LocalPlayer
			local pl = speaker
			local me = pl.Character
			local xl = me:WaitForChild("RightUpperArm")
			local debounce = false
			function _restoreproperties()
				local Holder = speaker.Character
				local Torso = Holder:FindFirstChild("UpperTorso")
				local RightS = Torso:FindFirstChild("Right Shoulder") or Holder:FindFirstChild("RightShoulder")
				local LeftS = Torso:FindFirstChild("Left Shoulder") or Holder:FindFirstChild("LeftShoulder")
				local RightH = Torso:FindFirstChild("Right Hip") or Holder:FindFirstChild("RightHip")
				local LeftH = Torso:FindFirstChild("Left Hip") or Holder:FindFirstChild("LeftHip")
				if (Torso and RightS and LeftS and RightH and LeftH) then
					RightS.MaxVelocity = 0.15
					LeftS.MaxVelocity = 0.15
					RightH.MaxVelocity = 0.1
					LeftH.MaxVelocity = 0.1
					RightS.DesiredAngle = 0
					LeftS.DesiredAngle = 0
					LeftH.DesiredAngle = 0
					RightH.DesiredAngle = 0
				end
			end
			function ManageAnimation(value)
				local Holder = speaker.Character
				local Player = speaker
				if (value == "no anim") then
					local Anim = Holder:FindFirstChild("Animate")
					if (Anim ~= nil) then
						Anim.Disabled = true
						Anim.Parent = Player
					end
				elseif (value == "re-anim") then
					local Anim = Player:FindFirstChild("Animate")
					if (Anim ~= nil) then
						Anim.Disabled = false
						Anim.Parent = Holder
					end
				end
			end
			function Down(ml)
				for i = 1, ml.Velocity.y / 3 do
					ml.Velocity = ml.Velocity + Vector3.new(0, -4.25, 0)
					wait()
				end
				ml:Destroy()
			end
			function Flip2()
				if (debounce == true) then
					return
				end
				debounce = true
				local Char = speaker.Character
				local Human = Character.Humanoid
				local Torso = Char:FindFirstChild("UpperTorso")
				if Torso then
					local CF = Torso.CFrame
					Human.PlatformStand = true
					local VelUp = Instance.new("BodyVelocity")
					VelUp.Velocity = Vector3.new(0, 60, 0) + (Torso.CFrame.LookVector * 26)
					VelUp.P = VelUp.P * 2
					VelUp.MaxForce = Vector3.new(10000, 10000, 10000) * 999
					VelUp.Parent = Torso
					coroutine.resume(coroutine.create(Down), VelUp)
					local Gyro = Instance.new("BodyGyro")
					Gyro.P = Gyro.P * 10
					Gyro.MaxTorque = Vector3.new(100000, 100000, 100000) * 999
					Gyro.CFrame = CF
					Gyro.Parent = Torso
					for i = 2, 28 do
						Gyro.CFrame = Gyro.CFrame * CFrame.Angles(math.rad(-16), 0, 0)
						wait()
					end
					Gyro.CFrame = CF
					wait()
					Gyro:Destroy()
					Human.PlatformStand = false
					_restoreproperties()
					debounce = false
				end
			end
			while Flipping do
				wait()
				Flip2()
			end
		end
	else
		Flipping = false
	end
end})

doubleFlipping = false
Toggledoubleflipppping = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Double Flip",CurrentValue=false,Callback=function(Value)
	pcall(function()
		doubleflippa = Value
		if doubleflippa then
			if not r15(speaker) then
				doubleFlipping = true
				pl = speaker
				me = pl.Character
				xl = me.Torso["Right Shoulder"]
				local debounce = false
				function _restoreproperties()
					Holder = speaker.Character
					Torso = Holder:FindFirstChild("Torso")
					RightS = Torso:FindFirstChild("Right Shoulder")
					LeftS = Torso:FindFirstChild("Left Shoulder")
					RightH = Torso:FindFirstChild("Right Hip")
					LeftH = Torso:FindFirstChild("Left Hip")
					RightS.MaxVelocity = 0.15
					LeftS.MaxVelocity = 0.15
					RightH.MaxVelocity = 0.1
					LeftH.MaxVelocity = 0.1
					RightS.DesiredAngle = 0
					LeftS.DesiredAngle = 0
					LeftH.DesiredAngle = 0
					RightH.DesiredAngle = 0
				end
				function ManageAnimation(value)
					Holder = speaker.Character
					Player = speaker
					if (value == "no anim") then
						Anim = Holder:FindFirstChild("Animate")
						if (Anim ~= nil) then
							Anim.Disabled = true
							Anim.Parent = Player
						end
					elseif (value == "re-anim") then
						Anim = Player:FindFirstChild("Animate")
						if (Anim ~= nil) then
							Anim.Disabled = false
							Anim.Parent = Holder
						end
					end
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
						wait()
					end
					ml:Remove()
				end
				function Flip3()
					if (debounce == true) then
						return
					end
					debounce = true
					Char = speaker.Character
					Human = Character.Humanoid
					Torso = Character.Torso
					CF = Torso.CFrame
					Human.PlatformStand = true
					VelUp = Instance.new("BodyVelocity")
					VelUp.velocity = Vector3.new(0, 60, 0) + (Torso.CFrame.lookVector * 26)
					VelUp.P = VelUp.P * 2
					VelUp.maxForce = Vector3.new(10000, 10000, 10000) * 999
					VelUp.Parent = Torso
					coroutine.resume(coroutine.create(Down), VelUp)
					Gyro = Instance.new("BodyGyro")
					Gyro.P = Gyro.P * 10
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
					Gyro.cframe = CF
					Gyro.Parent = Torso
					for i = 2, 28 do
						Gyro.cframe = Gyro.cframe * CFrame.fromEulerAnglesXYZ(math.pi / -8, 0, 0)
						wait()
					end
					Gyro.cframe = CF
					wait()
					Gyro:Remove()
					Human.PlatformStand = false
					_restoreproperties()
					debounce = false
				end
				while doubleFlipping do
					wait()
					Flip3()
				end
			else
				doubleFlipping = true
				local speaker = game.Players.LocalPlayer
				local debounce = false
				function _restoreproperties()
					local Holder = speaker.Character
					local UpperTorso = Holder:FindFirstChild("UpperTorso")
					local RightShoulder = Holder:FindFirstChild("RightShoulder")
					local LeftShoulder = Holder:FindFirstChild("LeftShoulder")
					local RightHip = Holder:FindFirstChild("RightHip")
					local LeftHip = Holder:FindFirstChild("LeftHip")
					if (UpperTorso and RightShoulder and LeftShoulder and RightHip and LeftHip) then
						RightShoulder.MaxVelocity = 0.15
						LeftShoulder.MaxVelocity = 0.15
						RightHip.MaxVelocity = 0.1
						LeftHip.MaxVelocity = 0.1
						RightShoulder.DesiredAngle = 0
						LeftShoulder.DesiredAngle = 0
						LeftHip.DesiredAngle = 0
						RightHip.DesiredAngle = 0
					end
				end
				function ManageAnimation(value)
					local Holder = speaker.Character
					local Player = speaker
					if (value == "no anim") then
						local Anim = Holder:FindFirstChild("Animate")
						if (Anim ~= nil) then
							Anim.Disabled = true
							Anim.Parent = Player
						end
					elseif (value == "re-anim") then
						local Anim = Player:FindFirstChild("Animate")
						if (Anim ~= nil) then
							Anim.Disabled = false
							Anim.Parent = Holder
						end
					end
				end
				function Down(ml)
					for i = 1, ml.Velocity.Y / 3 do
						ml.Velocity = ml.Velocity + Vector3.new(0, -4.25, 0)
						wait()
					end
					ml:Destroy()
				end
				function Flip3()
					if (debounce == true) then
						return
					end
					debounce = true
					local Char = speaker.Character
					local Human = Character.Humanoid
					local Torso = Char:FindFirstChild("UpperTorso")
					if Torso then
						local CF = Torso.CFrame
						Human.PlatformStand = true
						local VelUp = Instance.new("BodyVelocity")
						VelUp.Velocity = Vector3.new(0, 80, 0) + (Torso.CFrame.LookVector * 35)
						VelUp.P = VelUp.P * 2
						VelUp.MaxForce = Vector3.new(10000, 10000, 10000) * 999
						VelUp.Parent = Torso
						coroutine.resume(coroutine.create(Down), VelUp)
						local Gyro = Instance.new("BodyGyro")
						Gyro.P = Gyro.P * 10
						Gyro.MaxTorque = Vector3.new(100000, 100000, 100000) * 999
						Gyro.CFrame = CF
						Gyro.Parent = Torso
						for i = 2, 20 do
							Gyro.CFrame = Gyro.CFrame * CFrame.Angles(math.rad(-18), 0, 0)
							wait()
						end
						Gyro.CFrame = CF
						wait()
						Gyro:Destroy()
						Human.PlatformStand = false
						_restoreproperties()
						debounce = false
					end
				end
				while doubleFlipping do
					wait()
					Flip3()
				end
			end
		else
			doubleFlipping = false
		end
	end)
end})

cwFlipping = false
Togglecartwheel = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Cart Wheel",CurrentValue=false,Callback=function(Value)
	pcall(function()
		cartwheeling = Value
		if cartwheeling then
			if not r15(speaker) then
				cwFlipping = true
				function _restoreproperties()
					Torso = speaker.Character:FindFirstChild("Torso")
					RightS = Torso:FindFirstChild("Right Shoulder")
					LeftS = Torso:FindFirstChild("Left Shoulder")
					RightH = Torso:FindFirstChild("Right Hip")
					LeftH = Torso:FindFirstChild("Left Hip")
					RightS.MaxVelocity = 0.15
					LeftS.MaxVelocity = 0.15
					RightH.MaxVelocity = 0.1
					LeftH.MaxVelocity = 0.1
					RightS.DesiredAngle = 0
					LeftS.DesiredAngle = 0
					LeftH.DesiredAngle = 0
					RightH.DesiredAngle = 0
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
						wait()
					end
					ml:Remove()
				end
				function Flip()
					if (debounce == true) then
						return
					end
					debounce = true
					local Gyro = Instance.new("BodyGyro")
					Gyro.P = Gyro.P * 10
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
					Gyro.CFrame = speaker.Character.Torso.CFrame
					Gyro.Parent = speaker.Character.Torso
					for i = 0, 50 do
						Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(math.pi / -29, 0, 0)
						wait()
					end
					Gyro.CFrame = speaker.Character.Torso.CFrame
					wait()
					Gyro:Remove()
					speaker.Character.Humanoid.PlatformStand = false
					_restoreproperties()
					debounce = false
				end
				while cwFlipping do
					wait()
					Flip()
				end
			else
				cwFlipping = true
				function _restoreproperties()
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso")
					local RightS = Torso:FindFirstChild("Right Shoulder")
					local LeftS = Torso:FindFirstChild("Left Shoulder")
					local RightH = Torso:FindFirstChild("Right Hip")
					local LeftH = Torso:FindFirstChild("Left Hip")
					if (Torso and RightS and LeftS and RightH and LeftH) then
						RightS.MaxVelocity = 0.15
						LeftS.MaxVelocity = 0.15
						RightH.MaxVelocity = 0.1
						LeftH.MaxVelocity = 0.1
						RightS.DesiredAngle = 0
						LeftS.DesiredAngle = 0
						LeftH.DesiredAngle = 0
						RightH.DesiredAngle = 0
					end
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
						task.wait()
					end
					ml:Remove()
				end
				function Flip()
					if (debounce == true) then
						return
					end
					debounce = true
					local Gyro = Instance.new("BodyGyro")
					Gyro.P = Gyro.P * 10
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso")
					if Torso then
						Gyro.CFrame = Torso.CFrame
						Gyro.Parent = Torso
						for i = 0, 50 do
							Gyro.CFrame = Gyro.CFrame * CFrame.Angles(math.rad(-7), 0, 0)
							wait()
						end
						Gyro.CFrame = Torso.CFrame
						wait()
						Gyro:Remove()
						speaker.Character.Humanoid.PlatformStand = false
						_restoreproperties()
						debounce = false
					end
				end
				while cwFlipping do
					wait()
					Flip()
				end
			end
		else
			cwFlipping = false
		end
	end)
end})

StarRoll = false
Togglecartwheel = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Star Roll",CurrentValue=false,Callback=function(Value)
	pcall(function()
		starrolling = Value
		if starrolling then
			if not r15(speaker) then
				StarRoll = true
				function _restoreproperties()
					Torso = speaker.Character:FindFirstChild("Torso")
					RightS = Torso:FindFirstChild("Right Shoulder")
					LeftS = Torso:FindFirstChild("Left Shoulder")
					RightH = Torso:FindFirstChild("Right Hip")
					LeftH = Torso:FindFirstChild("Left Hip")
					RightS.MaxVelocity = 0.15
					LeftS.MaxVelocity = 0.15
					RightH.MaxVelocity = 0.1
					LeftH.MaxVelocity = 0.1
					RightS.DesiredAngle = 0
					LeftS.DesiredAngle = 0
					LeftH.DesiredAngle = 0
					RightH.DesiredAngle = 0
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
						wait()
					end
					ml:Remove()
				end
				function Flip()
					if (debounce == true) then
						return
					end
					debounce = true
					local Gyro = Instance.new("BodyGyro")
					Gyro.P = Gyro.P * 10
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
					Gyro.CFrame = speaker.Character.Torso.CFrame
					Gyro.Parent = speaker.Character.Torso
					for i = 0, 50 do
						Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(0, 0, math.pi / -29)
						wait()
					end
					Gyro.CFrame = speaker.Character.Torso.CFrame
					wait()
					Gyro:Remove()
					speaker.Character.Humanoid.PlatformStand = false
					_restoreproperties()
					debounce = false
				end
				while StarRoll do
					wait()
					Flip()
				end
			else
				StarRoll = true
				function _restoreproperties()
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso")
					local RightS = Torso:FindFirstChild("Right Shoulder")
					local LeftS = Torso:FindFirstChild("Left Shoulder")
					local RightH = Torso:FindFirstChild("Right Hip")
					local LeftH = Torso:FindFirstChild("Left Hip")
					if (Torso and RightS and LeftS and RightH and LeftH) then
						RightS.MaxVelocity = 0.15
						LeftS.MaxVelocity = 0.15
						RightH.MaxVelocity = 0.1
						LeftH.MaxVelocity = 0.1
						RightS.DesiredAngle = 0
						LeftS.DesiredAngle = 0
						LeftH.DesiredAngle = 0
						RightH.DesiredAngle = 0
					end
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
						wait()
					end
					ml:Remove()
				end
				function Flip()
					if (debounce == true) then
						return
					end
					debounce = true
					local Gyro = Instance.new("BodyGyro")
					Gyro.P = Gyro.P * 10
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso")
					if Torso then
						Gyro.CFrame = Torso.CFrame
						Gyro.Parent = Torso
						for i = 0, 50 do
							Gyro.CFrame = Gyro.CFrame * CFrame.Angles(0, 0, math.rad(-7))
							wait()
						end
						Gyro.CFrame = Torso.CFrame
						task.wait()
						Gyro:Remove()
						speaker.Character.Humanoid.PlatformStand = false
						_restoreproperties()
						debounce = false
					end
				end
				while StarRoll do
					wait()
					Flip()
				end
			end
		else
			StarRoll = false
		end
	end)
end})

local seizureFlipping = false
Toggleseizuree = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Seizure",CurrentValue=false,Callback=function(Value)
	seizure = Value
	if seizure then
		if not r15(speaker) then
			seizureFlipping = true
			function _restoreproperties()
				Torso = Character:FindFirstChild("Torso")
				RightS = Torso:FindFirstChild("Right Shoulder")
				LeftS = Torso:FindFirstChild("Left Shoulder")
				RightH = Torso:FindFirstChild("Right Hip")
				LeftH = Torso:FindFirstChild("Left Hip")
				RightS.MaxVelocity = 0.15
				LeftS.MaxVelocity = 0.15
				RightH.MaxVelocity = 0.1
				LeftH.MaxVelocity = 0.1
				RightS.DesiredAngle = 0
				LeftS.DesiredAngle = 0
				LeftH.DesiredAngle = 0
				RightH.DesiredAngle = 0
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
					wait()
				end
				ml:Remove()
			end
			function Flip5()
				if (debounce == true) then
					return
				end
				debounce = true
				Character.Humanoid.PlatformStand = true
				local VelUp = Instance.new("BodyVelocity")
				VelUp.maxForce = Vector3.new(10000, 10000, 10000) * 999
				VelUp.Parent = Character.Torso
				coroutine.resume(coroutine.create(Down), VelUp)
				local Gyro = Instance.new("BodyGyro")
				Gyro.P = Gyro.P * 10
				Gyro.CFrame = Character.Torso.CFrame
				Gyro.Parent = Character.Torso
				for i = 1, 16 do
					Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(math.pi / 9, math.pi / -18, 0)
					wait()
				end
				Gyro.CFrame = Character.Torso.CFrame
				wait()
				Gyro:Remove()
				Character.Humanoid.PlatformStand = false
				_restoreproperties()
				debounce = false
			end
			while seizureFlipping do
				task.wait()
				Flip5()
			end
		else
			seizureFlipping = true
			debounce = false
			local function _restoreproperties()
				local UpperTorso = Character:FindFirstChild("UpperTorso")
				if not UpperTorso then
					return
				end
				local RightShoulder = UpperTorso:FindFirstChild("Right Shoulder")
				local LeftShoulder = UpperTorso:FindFirstChild("Left Shoulder")
				local RightHip = Character:FindFirstChild("RightUpperLeg"):FindFirstChild("Right Hip")
				local LeftHip = Character:FindFirstChild("LeftUpperLeg"):FindFirstChild("Left Hip")
				if (RightShoulder and LeftShoulder and RightHip and LeftHip) then
					RightShoulder.MaxVelocity = 0.15
					LeftShoulder.MaxVelocity = 0.15
					RightHip.MaxVelocity = 0.1
					LeftHip.MaxVelocity = 0.1
					RightShoulder.DesiredAngle = 0
					LeftShoulder.DesiredAngle = 0
					LeftHip.DesiredAngle = 0
					RightHip.DesiredAngle = 0
				end
			end
			local function Down(ml)
				for i = 1, ml.Velocity.Y / 3 do
					ml.Velocity = ml.Velocity + Vector3.new(0, -0.25, 0)
					wait()
				end
				ml:Destroy()
			end
			local function Flip5()
				if debounce then
					return
				end
				debounce = true
				Character.Humanoid.PlatformStand = true
				local VelUp = Instance.new("BodyVelocity")
				VelUp.Velocity = Vector3.new(0, 10, 0)
				VelUp.MaxForce = Vector3.new(10000, 10000, 10000) * 999
				VelUp.Parent = Character.HumanoidRootPart
				coroutine.resume(coroutine.create(Down), VelUp)
				local Gyro = Instance.new("BodyGyro")
				Gyro.P = Gyro.P * 10
				Gyro.CFrame = Character.HumanoidRootPart.CFrame
				Gyro.MaxTorque = Vector3.new(100000, 100000, 100000) * 999
				Gyro.Parent = Character.HumanoidRootPart
				for i = 1, 16 do
					local randomRotationX = math.random(-math.pi, math.pi) / 9
					local randomRotationY = math.random(-math.pi, math.pi) / 9
					local randomRotationZ = math.random(-math.pi, math.pi) / 9
					Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(randomRotationX, randomRotationY, randomRotationZ)
					wait()
				end
				Gyro.CFrame = Character.HumanoidRootPart.CFrame
				wait()
				Gyro:Destroy()
				Character.Humanoid.PlatformStand = false
				_restoreproperties()
				debounce = false
			end
			while seizureFlipping do
				wait()
				Flip5()
			end
		end
	else
		seizureFlipping = false
	end
end})

BarrelRoll = false
Looproll = false
Togglecartwheel = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Barrel Roll",CurrentValue=false,Callback=function(Value)
	barrelrolling = Value
	if barrelrolling then
		if not r15(speaker) then
			BarrelRoll = true
			function _restoreproperties()
				Torso = speaker.Character:FindFirstChild("Torso")
				RightS = Torso:FindFirstChild("Right Shoulder")
				LeftS = Torso:FindFirstChild("Left Shoulder")
				RightH = Torso:FindFirstChild("Right Hip")
				LeftH = Torso:FindFirstChild("Left Hip")
				RightS.MaxVelocity = 0.15
				LeftS.MaxVelocity = 0.15
				RightH.MaxVelocity = 0.1
				LeftH.MaxVelocity = 0.1
				RightS.DesiredAngle = 0
				LeftS.DesiredAngle = 0
				LeftH.DesiredAngle = 0
				RightH.DesiredAngle = 0
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
					wait()
				end
				ml:Remove()
			end
			Looproll = true
			function Flip()
				if (debounce == true) then
					return
				end
				debounce = true
				local Gyro = Instance.new("BodyGyro")
				Gyro.P = Gyro.P * 10
				Gyro.maxTorque = Vector3.new(99999997952, 99999997952, 99999997952) * 8999999488
				Gyro.CFrame = speaker.Character.Torso.CFrame
				Gyro.Parent = speaker.Character.Torso
				local initialPosition = speaker.Character.Torso.Position
				local initialOrientation = speaker.Character.Torso.CFrame - speaker.Character.Torso.Position
				Gyro.CFrame = (initialOrientation * CFrame.fromEulerAnglesXYZ(0, 0, math.pi / 2)) + initialPosition
				while Looproll do
					Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(0, math.pi / -34, 0)
					wait()
				end
				speaker.Character.Torso.CFrame = initialOrientation + initialPosition
				wait()
				Gyro:Remove()
				speaker.Character.Humanoid.PlatformStand = false
				_restoreproperties()
				debounce = false
			end
			while BarrelRoll do
				wait()
				Flip()
			end
		else
			BarrelRoll = true
			function _restoreproperties()
				local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso")
				local RightS = Torso:FindFirstChild("Right Shoulder")
				local LeftS = Torso:FindFirstChild("Left Shoulder")
				local RightH = Torso:FindFirstChild("Right Hip")
				local LeftH = Torso:FindFirstChild("Left Hip")
				if (Torso and RightS and LeftS and RightH and LeftH) then
					RightS.MaxVelocity = 0.15
					LeftS.MaxVelocity = 0.15
					RightH.MaxVelocity = 0.1
					LeftH.MaxVelocity = 0.1
					RightS.DesiredAngle = 0
					LeftS.DesiredAngle = 0
					LeftH.DesiredAngle = 0
					RightH.DesiredAngle = 0
				end
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0)
					task.wait()
				end
				ml:Remove()
			end
			Looproll = true
			function Flip()
				if (debounce == true) then
					return
				end
				debounce = true
				local Gyro = Instance.new("BodyGyro")
				Gyro.P = Gyro.P * 10
				Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999
				local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso")
				if Torso then
					Gyro.CFrame = Torso.CFrame
					Gyro.Parent = Torso
					local initialCFrame = Torso.CFrame
					Gyro.CFrame = initialCFrame * CFrame.fromEulerAnglesXYZ(0, 0, math.pi / 2)
					while Looproll do
						Gyro.CFrame = Gyro.CFrame * CFrame.Angles(0, math.rad(-9), 0)
						task.wait()
					end
					Gyro.CFrame = Torso.CFrame
					task.wait()
					Gyro:Remove()
					speaker.Character.Humanoid.PlatformStand = false
					_restoreproperties()
					debounce = false
				end
			end
			while BarrelRoll do
				task.wait()
				Flip()
			end
		end
	else
		BarrelRoll = false
		Looproll = false
	end
end})

spacing = Misc:CreateSpacing(Sectionflipsnthings,2)
speakerFlipNumb = 0.0174533
function speakerFlip(Setting)
	local humanoid = speaker.Character:WaitForChild("Humanoid")
	local root = speaker.Character:WaitForChild("HumanoidRootPart")
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	task.wait()
	humanoid.Sit = true
	local rotation
	if Setting == "BackFlip" then
	rotation = CFrame.Angles(speakerFlipNumb, 0, 0)
	elseif Setting == "SideFlip" then
	rotation = CFrame.Angles(0, 0, -speakerFlipNumb)
	elseif Setting == "FrontFlip" then
	rotation = CFrame.Angles(-speakerFlipNumb, 0, 0)
	else
		return
	end
	for i = 1, 360 do
		task.delay(i / 720, function()
			if humanoid.Sit then
				root.CFrame *= rotation
			end
		end)
	end
	task.wait(0.55)
	humanoid.Sit = false
end
BackflipKeybind = Misc:CreateKeybind({Name="BackFlip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectionflipsnthings,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		speakerFlip("BackFlip")
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionflipsnthings,Name="Reset BackFlip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		BackflipKeybind:Set("Set Keybind")
	end)
end})

SideflipKeybind = Misc:CreateKeybind({Name="SideFlip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectionflipsnthings,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		speakerFlip("SideFlip")
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionflipsnthings,Name="Reset SideFlip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		SideflipKeybind:Set("Set Keybind")
	end)
end})

FrontflipKeybind = Misc:CreateKeybind({Name="FrontFlip Keybind",CurrentKeybind="Set Keybind",CanBeToggled=false,HoldToInteract=false,SectionParent=Sectionflipsnthings,Callback=function(KeyBind)
	if KeyBind and not isTyping then
		speakerFlip("FrontFlip")
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionflipsnthings,Name="Reset FrontFlip Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		FrontflipKeybind:Set("Set Keybind")
	end)
end})

Sectionhamsterball = Misc:CreateSection("FE LocalPlayer Related | Hamster Ball", false, false, 9134761478)
Paragraph = Misc:CreateParagraph({Title="Hamster Ball Info",Content="People See You Rolling Like a Hamster Ball, But They Don't See The Ball"}, Sectionhamsterball)
SPEED_MULTIPLIER = 30
JUMP_POWER = 60
JUMP_GAP = 0.3
Togglehamsterball = Misc:CreateToggle({SectionParent=Sectionhamsterball,Name="Hamster Ball",CurrentValue=false,Callback=function(Value)
	hamsterballs = Value
	if hamsterballs then
		character = speaker.Character
		for i, v in ipairs(character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end
		ball = character.HumanoidRootPart
		ball.Shape = Enum.PartType.Ball
		ballColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
		ball.Color = ballColor
		ball.Size = Vector3.new(7, 7, 7)
		ball.Transparency = 0.5
		humanoid = character:WaitForChild("Humanoid")
		params = RaycastParams.new()
		params.FilterType = Enum.RaycastFilterType.Blacklist
		params.FilterDescendantsInstances = {character}
		tc = RunService.RenderStepped:Connect(function(delta)
			ball.CanCollide = true
			humanoid.PlatformStand = true
			if IsTyping then return end
			if UserInputService:IsKeyDown("W") then
				ball.RotVelocity -= (Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER)
			elseif UserInputService:IsKeyDown("A") then
				ball.RotVelocity -= (Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER)
			elseif UserInputService:IsKeyDown("S") then
				ball.RotVelocity += (Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER)
			elseif UserInputService:IsKeyDown("D") then
				ball.RotVelocity += (Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER)
			end
		end)
		UserInputService.JumpRequest:Connect(function()
			local result = workspace:Raycast(ball.Position, Vector3.new(0, -((ball.Size.Y / 2) + JUMP_GAP), 0), params)
			if result then
				ball.Velocity = ball.Velocity + Vector3.new(0, JUMP_POWER, 0)
			end
		end)
		Camera.CameraSubject = ball
		local hamDied
		hamDied = humanoid.Died:Connect(function()
			tc:Disconnect()
			hamDied:Disconnect()
		end)
	else
		pcall(function()
			charresettopos()
			tc:Disconnect()
			hamDied:Disconnect()
		end)
	end
end})

Buttonresethamval = Misc:CreateButton({SectionParent=Sectionhamsterball,Name="Reset Hamster Ball Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderspeedmultiham:Set(30)
		Sliderhamjp:Set(60)
		Sliderjgham:Set(0.3)
		SPEED_MULTIPLIER = 30
		JUMP_POWER = 60
		JUMP_GAP = 0.3
	end)
end})

Sliderspeedmultiham = Misc:CreateSlider({SectionParent=Sectionhamsterball,Name="Hamster Ball Speed",Range={0,250},Increment=1,Suffix="Speed",CurrentValue=30,Callback=function(Value)
	pcall(function()
		SPEED_MULTIPLIER = Value
	end)
end})

Inputpeedmultiham = Misc:CreateInput({SectionParent=Sectionhamsterball,Name="Hamster Ball Speed",PlaceholderText=30,RemoveTextAfterFocusLost=false,Callback=function(Text)
	SPEED_MULTIPLIER = Text
end})

Sliderhamjp = Misc:CreateSlider({SectionParent=Sectionhamsterball,Name="Hamster Ball Jump Power",Range={0,250},Increment=1,Suffix="Jump Power",CurrentValue=60,Callback=function(Value)
	pcall(function()
		JUMP_POWER = Value
	end)
end})

Inputspinspeed = Misc:CreateInput({SectionParent=Sectionhamsterball,Name="Hamster Ball Jump Power",PlaceholderText=60,RemoveTextAfterFocusLost=false,Callback=function(Text)
	JUMP_POWER = Text
end})

Sliderjgham = Misc:CreateSlider({SectionParent=Sectionhamsterball,Name="Hamster Ball Jump Gap",Range={0,15},Increment=0.1,Suffix="Jump Gap",CurrentValue=0.3,Callback=function(Value)
	pcall(function()
		JUMP_GAP = Value
	end)
end})

Inputspinspeed = Misc:CreateInput({SectionParent=Sectionhamsterball,Name="Hamster Ball Speed",PlaceholderText=0.3,RemoveTextAfterFocusLost=false,Callback=function(Text)
	JUMP_GAP = Text
end})

Sectionspin = Misc:CreateSection("FE LocalPlayer Related | Spin", false, false, 9134761478)
spinSpeed = 20
Togglespinner = Misc:CreateToggle({SectionParent=Sectionspin,Name="Spin",CurrentValue=false,Callback=function(Value)
	pcall(function()
		spinner = Value
		if spinner then
			Spin = Instance.new("BodyAngularVelocity")
			Spin.Name = "Spinning"
			Spin.Parent = getRoot(speaker.Character)
			Spin.MaxTorque = Vector3.new(0, math.huge, 0)
			task.spawn(function()
				while task.wait() do
					Spin.AngularVelocity = Vector3.new(0, spinSpeed, 0)
				end
			end)
		else
			for i, v in pairs(getRoot(speaker.Character):GetChildren()) do
				if (v.Name == "Spinning") then
					v:Destroy()
				end
			end
		end
	end)
end})

Sliderspinspeed = Misc:CreateSlider({SectionParent=Sectionspin,Name="Spin Speed",Range={0,780},Increment=1,Suffix="Spin Speed",CurrentValue=20,Callback=function(Value)
	pcall(function()
		spinSpeed = Value
	end)
end})

Inputspinspeed = Misc:CreateInput({SectionParent=Sectionspin,Name="Spin Speed",PlaceholderText=20,RemoveTextAfterFocusLost=false,Callback=function(Text)
	spinSpeed = Text
end})

Sectioncarp = Misc:CreateSection("FE LocalPlayer Related | Car", false, false, 10709789810)
Paragraphtotal = Misc:CreateParagraph({Title="Important Info",Content="Car Script But Remade & Better"}, Sectioncarp)

Buttonr = Misc:CreateButton({SectionParent=Sectioncarp,Name="Reset Char Values",Interact="Click",Callback=function()
	SliderCarspeed:Set(16)
end})

local ifCarEnabled = false
ToggleCar = Misc:CreateToggle({SectionParent=Sectioncarp,Name="Car",CurrentValue=false,Callback=function(Value)
	carTog = Value
	if carTog then
		ifCarEnabled = true
		slipperwalk(true)
		Caranim = Instance.new("Animation")
		Caranim.AnimationId = "rbxassetid://129342287"
		Carpl = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Caranim)
		Carpl:Play()
		Carpl:AdjustSpeed(0)
	else
		slipperwalk(false)
		Carpl:Stop()
		Caranim:Destroy()
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
	end
	speaker.CharacterAdded:Connect(function(char)
		Character = char
		if carTog then
			ifCarEnabled = true
			slipperwalk(true)
			Caranim = Instance.new("Animation")
			Caranim.AnimationId = "rbxassetid://129342287"
			Carpl = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Caranim)
			Carpl:Play()
			Carpl:AdjustSpeed(0)
		else
			slipperwalk(false)
			Carpl:Stop()
			Caranim:Destroy()
			speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
		end
	end)
end})

CarKeybind = Misc:CreateKeybind({Name="Car Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectioncarp,Callback=function(KeyBind)
	carkb = KeyBind
	if carkb and not isTyping then
		ifCarEnabled = true
		slipperwalk(true)
		Caranim = Instance.new("Animation")
		Caranim.AnimationId = "rbxassetid://129342287"
		Carpl = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Caranim)
		Carpl:Play()
		Carpl:AdjustSpeed(0)
	elseif not carkb and not isTyping then
		slipperwalk(false)
		Carpl:Stop()
		Caranim:Destroy()
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
	end
	speaker.CharacterAdded:Connect(function(char)
		Character = char
		if carTog then
			ifCarEnabled = true
			slipperwalk(true)
			Caranim = Instance.new("Animation")
			Caranim.AnimationId = "rbxassetid://129342287"
			Carpl = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Caranim)
			Carpl:Play()
			Carpl:AdjustSpeed(0)
		elseif not carkb and not isTyping then
			slipperwalk(false)
			Carpl:Stop()
			Caranim:Destroy()
			speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
		end
	end)
end})

Button = Misc:CreateButton({SectionParent=Sectioncarp,Name="Reset Car Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		CarKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectioncarp,2)

SliderCarspeed = Misc:CreateSlider({SectionParent=Sectioncarp,Name="Car Speed",Range={0,100},Increment=1,Suffix="Car Speed",CurrentValue=16,Callback=function(Value)
	pcall(function()
		if ifCarEnabled then
			speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value		
		else
			return
		end
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectioncarp,Name="Car Speed",OnEnter=true,PlaceholderText=16,RemoveTextAfterFocusLost=false,Callback=function(Text)
	if ifCarEnabled then
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Text
	else
		return
	end
end})

Sectionwalkspeeder = Misc:CreateSection("FE LocalPlayer Related | CFrame Walk Speed", false, false, 1114393432)
Paragraphtotal = Misc:CreateParagraph({Title="Important Info",Content="This Function Should Be Able To Bypass Anti-Cheat's And Such\nBasically Walk Fast While Bypassing the Anti-Cheat"}, Sectionwalkspeeder)
Buttonr = Misc:CreateButton({SectionParent=Sectionwalkspeeder,Name="Reset Char Values",Interact="Click",Callback=function()
	Sliderwalkspeeder:Set(0.1)
end})
CFramevaluespeed = 0.1
spacing = Misc:CreateSpacing(Sectionwalkspeeder,2)
local CFramewalkloop
Togglewalkspeeder = Misc:CreateToggle({SectionParent=Sectionwalkspeeder,Name="CFrame Walkspeed",CurrentValue=false,Callback=function(Value)
		cframewalk = Value
		if cframewalk then
			CFramewalkloop = RunService.RenderStepped:Connect(function()
				getRoot(speaker.Character).CFrame = getRoot(speaker.Character).CFrame + (Humanoid.MoveDirection * CFramevaluespeed)
			end)
		else
			CFramewalkloop:Disconnect()
		end
end})

CframeWalkKeybind = Misc:CreateKeybind({Name="CFrame Walk Keybind",CurrentKeybind="Set Keybind",CanBeToggled=true,HoldToInteract=false,SectionParent=Sectionwalkspeeder,Callback=function(KeyBind)
	cfwalk = KeyBind
	if cfwalk and not isTyping then
		CFramewalkloopKey = RunService.RenderStepped:Connect(function()
			getRoot(speaker.Character).CFrame = getRoot(speaker.Character).CFrame + (Humanoid.MoveDirection * CFramevaluespeed)
		end)
	elseif not cfwalk and not isTyping then
		CFramewalkloopKey:Disconnect()
	end
end})

Button = Misc:CreateButton({SectionParent=Sectionwalkspeeder,Name="Reset CFrame Walk Keybind",Callback=function()
	sfxSound("true")
	Notif("Reseted Keybind!", "Reseted The Keybind!\nYou Can Set A New One Now!", 2, "check")
	pcall(function()
		CframeWalkKeybind:Set("Set Keybind")
	end)
end})

spacing = Misc:CreateSpacing(Sectionwalkspeeder,2)
Sliderwalkspeeder = Misc:CreateSlider({SectionParent=Sectionwalkspeeder,Name="CFrame Speed",Range={0.1,15},Increment=0.1,Suffix="CFrame Speed",CurrentValue=CFramevaluespeed,Callback=function(Value)
	pcall(function()
		CFramevaluespeed = Value
	end)
end})

Inputwalkspeeder = Misc:CreateInput({SectionParent=Sectionwalkspeeder,Name="CFrame Speed",OnEnter=true,PlaceholderText=CFramevaluespeed,RemoveTextAfterFocusLost=false,Callback=function(Text)
	CFramevaluespeed = Text
end})

Sectionlpsliderinputloops = Misc:CreateSection("FE LocalPlayer Related | Slider's & Input Loop's", false, true, 10686489468)

function getJumpValue()
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	if humanoid.UseJumpPower then
		return math.floor(humanoid.JumpPower)
	else
		return math.floor(humanoid.JumpHeight)
	end
end

function getJumpValue2()
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	if humanoid.UseJumpPower then
		return "Jump Power"
	else
		return "Jump Height"
	end
end

function getJumpValue3()
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	if humanoid.UseJumpPower then
		return 600
	else
		return 400
	end
end

Buttonresetflysvalue = Misc:CreateButton({SectionParent=Sectionlpsliderinputloops,Name="Reset Character Loop Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderwalkloop:Set(16)
		local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
		if humanoid.UseJumpPower then
			Sliderjumploop:Set(50)
		else
			Sliderjumploop:Set(7)
		end
	end)
end})

walkspeedsped = 16
jpower = getJumpValue()

Label = Misc:CreateLabel("Set A Value First Then Enable", Sectionlpsliderinputloops)
Toggle = Misc:CreateToggle({SectionParent=Sectionlpsliderinputloops,Name="Loop Walk Speed",CurrentValue=false,Callback=function(Value)
	pcall(function()
        if Value then
            walkspeedloop = RunService.Heartbeat:Connect(function()
                local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
                local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
                local function WalkSpeedChange()
                    if Char and Human and isNumber(walkspeedsped) then
                        Human.WalkSpeed = walkspeedsped
                    end
                end
                WalkSpeedChange()
                HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
                HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
                    Char, Human = nChar, nChar:WaitForChild("Humanoid")
                    WalkSpeedChange()
                    HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
                 end)
            end)
        else
            walkspeedloop:Disconnect()
            HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
            HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
        end
    end)
end})

Sliderwalkloop = Misc:CreateSlider({SectionParent=Sectionlpsliderinputloops,Name="Loop Walk Speed",Range={1,300},Increment=1,Suffix="Speed",CurrentValue=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),Callback=function(Value)
	pcall(function()
		walkspeedsped = Value
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectionlpsliderinputloops,Name="Loop Walk Speed",OnEnter=true,PlaceholderText=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	walkspeedsped = tonumber(Text)
end})

Toggle = Misc:CreateToggle({SectionParent=Sectionlpsliderinputloops,Name="Loop Jump Power / Height",CurrentValue=false,Callback=function(Value)
	 pcall(function()
        if Value then
            jumppowerloop = RunService.Heartbeat:Connect(function()
                local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
                local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
                local function JumpPowerChange()
                    if Char and Human and isNumber(jpower) then
                        if Human.UseJumpPower then
                            Human.JumpPower = jpower
                        else
                            Human.JumpHeight = jpower
                        end
                    end
                end
                JumpPowerChange()
                HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
                HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
                    Char, Human = nChar, nChar:WaitForChild("Humanoid")
                    JumpPowerChange()
                    HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
                end)
            end)
        else
            jumppowerloop:Disconnect()
            local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
            local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
            HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or nil
            HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or nil
            if Char and Human then
                if Human.UseJumpPower then
                    Human.JumpPower = 50
                else
                    Human.JumpHeight = 7
                end
            end
        end
    end)
end})

Sliderjumploop = Misc:CreateSlider({SectionParent=Sectionlpsliderinputloops,Name="Loop Jump Power / Height",Range={1,getJumpValue3()},Increment=1,Suffix=getJumpValue2(),CurrentValue=getJumpValue(),Callback=function(Value)
	pcall(function()
		jpower = Value
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectionlpsliderinputloops,Name="Loop Jump Power / Height",OnEnter=true,PlaceholderText=getJumpValue(),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	jpower = tonumber(Text)
end})

if r15(speaker) then
	keephipheightval = {higfd=speaker.Character.Humanoid.HipHeight}
end
Sectionlpsliderinput = Misc:CreateSection("FE LocalPlayer Related | Slider's & Input's", false, false, 10686489468)
Buttonresetcharactervalue = Misc:CreateButton({SectionParent=Sectionlpsliderinput,Name="Reset Char Values",Interact="Click",Callback=function()
	Sliderwalk:Set(16)
	if not r15(speaker) then
		Sliderhip:Set(0)
		speaker.Character.Humanoid.HipHeight = 0
	else
		Sliderhip:Set(keephipheightval.higfd)
		speaker.Character.Humanoid.HipHeight = keephipheightval.higfd
	end
	if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
		Sliderjpower:Set(50)
	else
		Sliderjpower:Set(7)
	end
	Slidergrav:Set(196)
end})

Sliderwalk = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Walk Speed",Range={1,300},Increment=1,Suffix="Speed",CurrentValue=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),Callback=function(Value)
	pcall(function()
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Walk Speed",NumbersOnly=true,OnEnter=true,PlaceholderText=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Text
	end)
end})

Sliderhip = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Hip Height",Range={-2,100},Increment=1,Suffix="Hip Height",CurrentValue=math.floor(speaker.Character.Humanoid.HipHeight),Callback=function(Value)
	pcall(function()
		speaker.Character.Humanoid.HipHeight = Value
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Hip Height",NumbersOnly=true,OnEnter=true,PlaceholderText=math.floor(speaker.Character.Humanoid.HipHeight),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		speaker.Character.Humanoid.HipHeight = Text
	end)
end})

Sliderjpower = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Jump Power / Height",Range={1,getJumpValue3()},Increment=1,Suffix=getJumpValue2(),CurrentValue=getJumpValue(),Callback=function(Value)
	pcall(function()
		if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower = Value
		else
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpHeight = Value
		end
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Jump Power / Height",NumbersOnly=true,OnEnter=true,PlaceholderText=getJumpValue(),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower = Text
		else
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpHeight = Text
		end
	end)
end})

Slidergrav = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Gravity",Range={0,700},Increment=1,Suffix="Gravity",CurrentValue=math.floor(game.Workspace.Gravity),Callback=function(Value)
	pcall(function()
		game.Workspace.Gravity = Value
	end)
end})

Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Gravity",NumbersOnly=true,OnEnter=true,PlaceholderText=math.floor(game.Workspace.Gravity),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		game.Workspace.Gravity = Text
	end)
end})

MiscPlayer = Window:CreateTab("Players", 10747373426)
Sectiontotalscrismisc = MiscPlayer:CreateSection("Total Universal Script's: " .. Scriptcount, false, false, 7743869612)
Paragraphtotal = MiscPlayer:CreateParagraph({Title="Drop Down's Note",Content="When You Open Them The Button's Are Like A Toggle.\nYou Press One, You Do The Function, And Then You Press Again On Whatever Button To Stop."}, Sectiontotalscrismisc)
Sectiontpscritpss = MiscPlayer:CreateSection("FE Player Related | Teleport", false, false, 6723742952)
AlldropdownRefresh = {}
gotoplayersList = {}
AlldropdownRefresh.gotodropdown = MiscPlayer:CreateDropdown({SectionParent=Sectiontpscritpss,Name="Teleport to / Goto",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		Character:PivotTo(foundPlr.Character:GetPivot())
		sfxSound("true")
		Notif("Teleported!", "Teleported To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
	end)
end})

local function initialUpdatePlayerList()
    gotoplayersList = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= speaker then
            local playerOption
            if player.Name == player.DisplayName then
                playerOption = player.Name
            else
                playerOption = player.Name .. " (" .. player.DisplayName .. ")"
            end
            table.insert(gotoplayersList, playerOption)
        end
    end
    for _, dropdown in pairs(AlldropdownRefresh) do
        dropdown:Refresh(gotoplayersList, "Select an option")
    end
end

local function addPlayerToDropdowns(player)
    local playerOption
    if player.Name == player.DisplayName then
        playerOption = player.Name
    else
        playerOption = player.Name .. " (" .. player.DisplayName .. ")"
    end
    table.insert(gotoplayersList, playerOption)
    local delayCounter = 0
    for _, dropdown in pairs(AlldropdownRefresh) do
        task.delay(delayCounter, function()
            dropdown:Add(playerOption)
        end)
        delayCounter = delayCounter + 0.1
    end
end

local function removePlayerFromDropdowns(player)
    local playerOption
    if player.Name == player.DisplayName then
        playerOption = player.Name
    else
        playerOption = player.Name .. " (" .. player.DisplayName .. ")"
    end
    for i = #gotoplayersList, 1, -1 do
        if gotoplayersList[i] == playerOption then
            table.remove(gotoplayersList, i)
            break
        end
    end
    local delayCounter = 0
    for _, dropdown in pairs(AlldropdownRefresh) do
        task.delay(delayCounter, function()
            dropdown:Remove(playerOption)
        end)
        delayCounter = delayCounter + 0.1
    end
end

local playerAddedConnection
local playerRemovingConnection
local function connectEvents()
    if playerAddedConnection then
        playerAddedConnection:Disconnect()
        playerAddedConnection = nil
    end
    if playerRemovingConnection then
        playerRemovingConnection:Disconnect()
        playerRemovingConnection = nil
    end
    playerAddedConnection = game.Players.PlayerAdded:Connect(addPlayerToDropdowns)
    playerRemovingConnection = game.Players.PlayerRemoving:Connect(removePlayerFromDropdowns)
end
connectEvents()
initialUpdatePlayerList()

tweenSpeedtp = 1
spacing = Misc:CreateSpacing(Sectiontpscritpss,2)
Paragraph = MiscPlayer:CreateParagraph({Title="Tween Info",Content="This Type Teleport Bypasses Most Anti-Cheat's.\nThe Lower The Speed The Faster It Is."}, Sectiontpscritpss)
AlldropdownRefresh.tweegotodropdown = MiscPlayer:CreateDropdown({SectionParent=Sectiontpscritpss,Name="Tween Teleport to / Goto",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if (foundPlr.Character ~= nil) then
			if (Humanoid and Humanoid.SeatPart) then
				Humanoid.Sit = false
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeedtp, Enum.EasingStyle.Linear), {CFrame=(getRoot(foundPlr.Character).CFrame + Vector3.new(3, 1, 0))}):Play()
				sfxSound("true")
				Notif("Teleported!", "Teleported To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
			else
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeedtp, Enum.EasingStyle.Linear), {CFrame=(getRoot(foundPlr.Character).CFrame + Vector3.new(3, 1, 0))}):Play()
				sfxSound("true")
				Notif("Teleported!", "Teleported To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
			end
		end
		breakvelocity()
	end)
end})

Slidertweenspeedtp = MiscPlayer:CreateSlider({SectionParent=Sectiontpscritpss,Name="Tween Teleport To /.. Speed",Range={0,10},Increment=0.1,Suffix="Speed",CurrentValue=tweenSpeedtp,Callback=function(Value)
	pcall(function()
		tweenSpeedtp = Value
	end)
end})

Input = MiscPlayer:CreateInput({SectionParent=Sectiontpscritpss,Name="Tween Teleport To /.. Speed",OnEnter=true,PlaceholderText=tweenSpeedtp,NumbersOnly=false,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		tweenSpeedtp = Text
	end)
end})

spacing = Misc:CreateSpacing(Sectiontpscritpss,2)
local spectateing = false
AlldropdownRefresh.spectatedropdown = Misc:CreateDropdown({SectionParent=Sectiontpscritpss,Name="Spectate",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (spectateing == true) then
				spectateing = false
				SpectateLoop:Disconnect()
				sfxSound("false")
				game.Workspace.Camera.CameraSubject = speaker.Character
				Notif("No Longer Spectating The Player ", "Not Spectating " .. foundPlr.Name .. " Anymore", 2, "x")
				return
			else
				spectateing = true
				sfxSound("true")
				Notif("Now Spectating", "Spectating " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				SpectateLoop = RunService.RenderStepped:Connect(function()
					game.Workspace.Camera.CameraSubject = foundPlr.Character
				end)
			end
		end
	end)
end})

Sectionplayrerelatedtp = MiscPlayer:CreateSection("FE Player Related | Silly & Misc & Other", false, false, 10686489468)
local Annoy = false
AlldropdownRefresh.Annoydropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Annoy",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Annoy == true) then
					Annoy = false
					AnnoyLoop:Disconnect()
					sfxSound("false")
					Notif("No Longer Annoying The Player ", "Not Annoying " .. foundPlr.Name .. " Anymore", 2, "x")
					return
				else
					Annoy = true
					sfxSound("true")
					Notif("Now Annoying", "Annoying " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					AnnoyLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							Character:PivotTo(foundPlr.Character:GetPivot())
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

local glued = false
AlldropdownRefresh.GluetoPLRdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Glue",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (glued == true) then
					glued = false
					sfxSound("false")
					GlueLoop:Disconnect()
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
					Notif("No Longer Glued To Player", "Not Glued To " .. foundPlr.Name .. " Anymore", 2, "x")
					return
				else
					glued = true
					sfxSound("true")
					Notif("Now Glued", "Glued To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					GlueLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.new(getRoot(speaker.Character).CFrame.lookVector.X, getRoot(foundPlr.Character).Size.Y, getRoot(speaker.Character).CFrame.lookVector.Z)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
							speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
						end)
					end)
				end
			end
		end
	end)
end})

local walkto = false
AlldropdownRefresh.WalkTodropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Walk To",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (walkto == true) then
					walkto = false
					WalktoLoop:Disconnect()
					sfxSound("false")
					Notif("No Longer Walking To Player", "Not Walking To " .. foundPlr.Name .. " Anymore", 2, "x")
					return
				else
					walkto = true
					sfxSound("true")
					Notif("Now Walking", "Walking To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					WalktoLoop = RunService.RenderStepped:Connect(function()
						speaker.Character.Humanoid:MoveTo(getRoot(foundPlr.Character).Position)
					end)
				end
			end
		end
	end)
end})

local StandOnHead = false
AlldropdownRefresh.StandOndropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Stand On",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (StandOnHead == true) then
					StandOnHead = false
					sfxSound("false")
					StandOnHeadLoop:Disconnect()
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
					Notif("No Longer Standing On The Player ", "Not Standing On " .. foundPlr.Name .. " Anymore", 2, "x")
					return
				else
					StandOnHead = true
					sfxSound("true")
					Notif("Now Standing", "Standing On " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					StandOnHeadLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 5.34, 0)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
							speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
						end)
					end)
				end
			end
		end
	end)
end})

local Becarried = false
AlldropdownRefresh.becarrieddropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Be Carried",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Becarried == true) then
					Becarried = false
					becarriedLoop:Disconnect()
					speaker.Character.Humanoid.Sit = false
					sfxSound("false")
					Notif("No Longer Carried By The Player ", "Not Being Carried By " .. foundPlr.Name .. " Anymore", 2, "x")
					return
				else
					Becarried = true
					sfxSound("true")
					Notif("Now Being Carried", "Carried By " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					becarriedLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							speaker.Character.Humanoid.Sit = true
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(math.rad(-90), 0, 0) * CFrame.new(1.5, -0.2, 1.5)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

Paragraph = MiscPlayer:CreateParagraph({Title="Spook Info",Content="Teleport's You To The Player For A Few Seconds To Spook Them"}, Sectionplayrerelatedtp)
AlldropdownRefresh.Spookdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Spook",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		prev = speaker.Character:WaitForChild("HumanoidRootPart").CFrame
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0, 3.2)
			task.wait(0.78)
			speaker.Character:WaitForChild("HumanoidRootPart").CFrame = prev
		elseif (foundPlr == speaker) then
			return nil
		end
	end)
end})

local Follow = false
AlldropdownRefresh.followdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Stalk",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			flwnum = -5
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Follow == true) then
					Follow = false
					FollowLoop:Disconnect()
					Notif("No Longer Stalking The Player", "Not Stalking " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					return
				else
					Follow = true
					Notif("Now Stalking", "Stalking " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					FollowLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame + (getRoot(foundPlr.Character).CFrame.lookVector * flwnum)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

local LoopHello = false
local trueforanim = false
AlldropdownRefresh.loopwavedropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Loop Wave / Greeting",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if ((LoopHello == true) and (trueforanim == true)) then
					LoopHello = false
					trueforanim = false
					WaverDied:Disconnect()
					Waver:Stop()
					WaveasLoop:Disconnect()
					WaveAnim:Destroy()
					Notif("No Longer Greeting The Player", "Not Greeting " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					return
				else
					LoopHello = true
					trueforanim = true
					Notif("Now Greeting", "Greeting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					WaveAnim = Instance.new("Animation")
					if not r15(speaker) then
						WaveAnim.AnimationId = "rbxassetid://128777973"
					else
						WaveAnim.AnimationId = "rbxassetid://507770239"
					end
					Waver = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(WaveAnim)
					WaverDied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
						WaverDied:Disconnect()
						Waver:Stop()
						WaveAnim:Destroy()
					end)
					WaveasLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							if (speaker.Character and foundPlr.Character) then
								getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0, 3.2)
								getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
							end
							if trueforanim then
								Waver:Play(0.1, 10, 1)
								task.wait(1.8)
							end
						end)
					end)
				end
			end
		end
	end)
end})

local Carpettion = false
AlldropdownRefresh.Carpetdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Carpet",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if not r15(speaker) then
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					if (Carpettion == true) then
						Carpettion = false
						CarpetsLoop:Disconnect()
						sfxSound("false")
						Notif("No Longer Carpeting The Player", "Not Carpeting " .. foundPlr.Name .. " Anymore", 2, "x")
						carpete:Stop()
						carpetAnim:Destroy()
						return
					else
						Carpettion = true
						carpetAnim = Instance.new("Animation")
						carpetAnim.AnimationId = "rbxassetid://282574440"
						carpete = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(carpetAnim)
						carpete:Play(0.1, 1, 1)
						sfxSound("true")
						Notif("Now Carpeting", "Carpeting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
						CarpetsLoop = RunService.RenderStepped:Connect(function()
							pcall(function()
								getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 0, 0)
								getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
							end)
						end)
					end
				end
			else
				Notif("Invalid Rig (R15)!", "R6 Rig Type Is Needed To Use This Function!", 3, "x")
				sfxSound("false")
			end
		end
	end)
end})

local ffhugger = false
AlldropdownRefresh.Hugdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Hug",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if not r15(speaker) then
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					if (ffhugger == true) then
						ffhugger = false
						HuggingLoop:Disconnect()
						Notif("No Longer Hugging The Player", "Not Hugging " .. foundPlr.Name .. " Anymore", 2, "x")
						sfxSound("false")
						zomearm:Stop()
						zombiearmsAnim:Destroy()
						return
					else
						ffhugger = true
						zombiearmsAnim = Instance.new("Animation")
						zombiearmsAnim.AnimationId = "rbxassetid://183294396"
						zomearm = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(zombiearmsAnim)
						zomearm:Play()
						zomearm:AdjustSpeed(0)
						Notif("Now Hugging", "Hugging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
						sfxSound("true")
						HuggingLoop = RunService.RenderStepped:Connect(function()
							pcall(function()
								getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0.6, 0, 1)
								getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
							end)
						end)
					end
				end
			elseif (ffhugger == true) then
				ffhugger = false
				HuggingLoop:Disconnect()
				Notif("No Longer Hugging The Player", "Not Hugging " .. foundPlr.Name .. " Anymore", 2, "x")
				sfxSound("false")
				zomearm:Stop()
				zombiearmsAnim:Destroy()
				speaker.Character.Animate.Disabled = false
				return
			else
				ffhugger = true
				zombiearmsAnim = Instance.new("Animation")
				zombiearmsAnim.AnimationId = "rbxassetid://708553116"
				zomearm = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(zombiearmsAnim)
				zomearm:Play()
				zomearm:AdjustSpeed(0)
				speaker.Character.Animate.Disabled = true
				Notif("Now Hugging", "Hugging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				sfxSound("true")
				HuggingLoop = RunService.RenderStepped:Connect(function()
					pcall(function()
						getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0.6, 0, 1)
						getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
					end)
				end)
			end
		end
	end)
end})

local actualpb = false
AlldropdownRefresh.Piggybackdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="PiggyBack",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (actualpb == true) then
					actualpb = false
					PBLoop:Disconnect()
					Notif("No Longer PiggyBacking The Player", "Not PiggyBacking " .. foundPlr.Name .. "", 2, "x")
					speaker.Character.Humanoid.Sit = false
					sfxSound("false")
					return
				else
					actualpb = true
					Notif("Now PiggyBacking", "PiggyBacking " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					PBLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							speaker.Character.Humanoid.Sit = true
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 0.4, 1.2)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

local besomebackpack = false
AlldropdownRefresh.backpackdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Backpack",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (besomebackpack == true) then
					besomebackpack = false
					BackPackLoop:Disconnect()
					Notif("No Longer Backpacking The Player", "Not Backpacking " .. foundPlr.Name .. "", 2, "x")
					speaker.Character.Humanoid.Sit = false
					sfxSound("false")
					return
				else
					besomebackpack = true
					Notif("Now Backpacking", "Being " .. foundPlr.Name .. " Backpack", 2, "check")
					sfxSound("true")
					BackPackLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							speaker.Character.Humanoid.Sit = true
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, -0.21, -1)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

local headsits = false
AlldropdownRefresh.Headsitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Headsit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (headsits == true) then
					headsits = false
					HeadSitLoop:Disconnect()
					Notif("No Longer HeadSitting The Player", "Not HeadSitting " .. foundPlr.Name .. " Anymore", 2, "x")
					speaker.Character.Humanoid.Sit = false
					sfxSound("false")
					return
				else
					headsits = true
					Notif("Now HeadSitting", "HeadSitting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					HeadSitLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							speaker.Character.Humanoid.Sit = true
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 1.6, 0.4)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

local baskets = false
AlldropdownRefresh.Basketdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Basket",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	plrName = Option:match("^(.-) %(")
	foundPlr = getPlr(plrName)
	if foundPlr then
		if not r15(speaker) then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (baskets == true) then
					baskets = false
					BasketLoop:Disconnect()
					Notif("No Longer Basketting The Player", "Not Being " .. foundPlr.Name .. " Basket Anymore", 2, "x")
					speaker.Character.Humanoid.Sit = false
					sfxSound("false")
					return
				else
					baskets = true
					Notif("Now Basketting", "Being " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ") Basket", 4, "check")
					sfxSound("true")
					BasketLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							speaker.Character.Humanoid.Sit = true
							local targetArm = foundPlr.Character:FindFirstChild("RightHand") or foundPlr.Character:FindFirstChild("Right Arm")
							if targetArm then
								getRoot(speaker.Character).CFrame = targetArm.CFrame * CFrame.Angles(math.rad(90), math.rad(0), 0) * CFrame.new(0, 0, 1.6)
								getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
							end
						end)
					end)
				end
			end
		elseif (baskets == true) then
			baskets = false
			Notif("No Longer Basketting The Player", "Not Being " .. foundPlr.Name .. " Basket Anymore", 2, "x")
			zomearm:Stop()
			BasketLoop:Disconnect()
			zombiearmsAnim:Destroy()
			speaker.Character.Animate.Disabled = false
			sfxSound("false")
			return
		else
			baskets = true
			Notif("Now Basketting", "Being " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ") Basket", 4, "check")
			sfxSound("true")
			zombiearmsAnim = Instance.new("Animation")
			zombiearmsAnim.AnimationId = "rbxassetid://10714360343"
			zomearm = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(zombiearmsAnim)
			zomearm:Play(0, 10, 0)
			speaker.Character.Animate.Disabled = true
			BasketLoop = RunService.RenderStepped:Connect(function()
				pcall(function()
					speaker.Character.Humanoid.Sit = true
					local targetArm = foundPlr.Character:FindFirstChild("RightHand") or foundPlr.Character:FindFirstChild("Right Arm")
					if targetArm then
						getRoot(speaker.Character).CFrame = targetArm.CFrame * CFrame.Angles(math.rad(145), math.rad(0), 0) * CFrame.new(0, 1.6, 1.6)
					end
				end)
			end)
		end
	end
end})

local ActualHeadsit = false
AlldropdownRefresh.ActualHeadsitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Actual Headsit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ActualHeadsit == true) then
					ActualHeadsit = false
					ActualHeadSitLoop:Disconnect()
					Notif("No Longer HeadSitting The Player", "Not HeadSitting " .. foundPlr.Name .. " Anymore", 2, "x")
					speaker.Character.Humanoid.Sit = false
					sfxSound("false")
					return
				else
					ActualHeadsit = true
					Notif("Now HeadSitting", "HeadSitting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					ActualHeadSitLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							speaker.Character.Humanoid.Sit = true
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 3.6, 0.4)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

local animsync
spacing = Misc:CreateSpacing(Sectionplayrerelatedtp,2)
issyncinganim = false
Paragraph = MiscPlayer:CreateParagraph({Title="Anim Sync Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionplayrerelatedtp)
AlldropdownRefresh.animsyncdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Anim Sync",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (issyncinganim == true) then
					charresettopos()
					issyncinganim = false
					Notif("Stopped Syncing", "Stopped Syncing With " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					animsync:Disconnect()
					return
				else
					issyncinganim = true
					sfxSound("true")
					Notif("Now Syncing", "Syncing With " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					animsync = foundPlr.Character.Humanoid.AnimationPlayed:Connect(function(track)
						local animID = track.Animation.AnimationId
						for _, animationTrack in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do
							animationTrack:Stop()
						end
						Character.Animate.Disabled = true
						local Anim = Instance.new("Animation")
						Anim.AnimationId = animID
						local syncinganim = Character.Humanoid:LoadAnimation(Anim)
						syncinganim:Play()
						syncinganim:AdjustWeight(10)
						syncinganim.Stopped:Connect(function()
							Character.Animate.Disabled = false
						end)
					end)
				end
			end
		end
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayrerelatedtp,2)
local orbitingfuck = false
AlldropdownRefresh.orbitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Orbit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (orbitingfuck == true) then
				sfxSound("false")
				OrbititngLoop:Disconnect()
				orbitingfuck = false
				Notif("No Longer Orbiting The Player", "Not Orbiting " .. foundPlr.Name .. " Anymore", 2, "x")
				for i, v in pairs(speaker.Character:GetDescendants()) do
					if ((v.Name == "OrbitalDestructionPart") or (v.Name == "OrbitalDestruction")) then
						v:Destroy()
					end
				end
				speaker.Character.Humanoid.PlatformStand = false
				speaker.Character.Humanoid.Sit = false
				return
			else
				orbitingfuck = true
				sfxSound("true")
				Notif("Now Orbiting", "Orbiting Around " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				local P = Instance.new("Part", foundPlr.Character)
				P.Transparency = 1
				P.Name = "ThePart"
				P.Size = Vector3.new(1.7, 1.7, 1.7)
				P.Massless = true
				P.CanCollide = false
				local W = Instance.new("Weld", P)
				W.Part1 = foundPlr.Character.HumanoidRootPart
				W.Part0 = P
				local sine = 0
				local change = 1
				local spin = 0
				local spin2 = 0
				local rp = Instance.new("RocketPropulsion")
				rp.Parent = getRoot(speaker.Character)
				rp.CartoonFactor = 1
				rp.MaxThrust = 5000
				rp.MaxSpeed = 100
				rp.ThrustP = 5000
				rp.Name = "OrbitalDestructionPart"
				rp.Target = foundPlr.Character.ThePart
				rp:Fire()
				speaker.Character.Humanoid.PlatformStand = true
				OrbititngLoop = RunService.RenderStepped:Connect(function()
					pcall(function()
						sine = sine + change
						spin2 = spin2 + 0.6
						spin = spin + 1
						W.C0 = CFrame.new(7 * math.cos(20), -2 - (2 * math.sin(sine / 10)), 7 * math.sin(20)) * CFrame.Angles(math.rad(0), math.rad(spin), math.rad(0))
					end)
				end)
			end
		end
	end)
end})

local closeorbitingfuck = false
AlldropdownRefresh.closeorbitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Close Orbit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (closeorbitingfuck == true) then
				sfxSound("false")
				CloseOrbititngLoop:Disconnect()
				closeorbitingfuck = false
				Notif("No Longer Orbiting The Player", "Not Orbiting " .. foundPlr.Name .. " Anymore", 2, "x")
				for i, v in pairs(speaker.Character:GetDescendants()) do
					if ((v.Name == "OrbitalDestructionPart") or (v.Name == "OrbitalDestruction")) then
						v:Destroy()
					end
				end
				speaker.Character.Humanoid.Sit = false
				return
			else
				closeorbitingfuck = true
				sfxSound("true")
				Notif("Now Orbiting", "Orbiting Around " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				local rp = Instance.new("RocketPropulsion")
				rp.Parent = getRoot(speaker.Character)
				rp.CartoonFactor = 1
				rp.MaxThrust = 5000
				rp.MaxSpeed = 100
				rp.ThrustP = 5000
				rp.Name = "OrbitalDestruction"
				rp.Target = foundPlr.Character.HumanoidRootPart
				rp:Fire()
				speaker.Character.Humanoid.Sit = true
				CloseOrbititngLoop = RunService.RenderStepped:Connect(function()
					pcall(function()
						sine = sine + change
						spin2 = spin2 + 0.6
						spin = spin + 1
						W.C0 = CFrame.new(7 * math.cos(20), -2 - (2 * math.sin(sine / 10)), 7 * math.sin(20)) * CFrame.Angles(math.rad(0), math.rad(spin), math.rad(0))
					end)
				end)
			end
		end
	end)
end})

spacing = Misc:CreateSpacing(Sectionplayrerelatedtp,2)
Paragraph = MiscPlayer:CreateParagraph({Title="Look At Info",Content="Make's Your Character Look At The Target. \nBest Used With Anti Ragdoll Which Is In the Anti Section"}, Sectionplayrerelatedtp)
local lookingAt = false
AlldropdownRefresh.lookatdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Look At",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (lookingAt == true) then
				lookingAt = false
				LookingAtLoop:Disconnect()
				sfxSound("false")
				Notif("No Longer Looking At The Player", "Not Looking At " .. foundPlr.Name .. "Anymore", 2, "x")
				return
			else
				lookingAt = true
				sfxSound("true")
				Notif("Now Looking At", "Looking At " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				LookingAtLoop = RunService.RenderStepped:Connect(function()
					pcall(function()
						getRoot(speaker.Character).CFrame = CFrame.new(getRoot(speaker.Character).Position, getRoot(foundPlr.Character).Position)
					end)
				end)
			end
		end
	end)
end})

local spinaround = false
local spinaroundrotation = 0
local spinaroundspeed = 0.2
local spinarounddistance = 6
spacing = Misc:CreateSpacing(Sectionplayrerelatedtp,2)
AlldropdownRefresh.spinarounddropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Spin Around",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
		local root = getRoot(speaker.Character)
		local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if (foundPlr and foundPlr.Character and getRoot(foundPlr.Character) and root and humanoid) then
			if (spinaround == true) then
				SpinAroundLoop:Disconnect()
				sfxSound("false")
				Notif("No Longer Spinning Around The Player", "Not Spinning Around " .. foundPlr.Name .. " Anymore", 2, "x")
				spinaround = false
				return
			else
				spinaround = true
				sfxSound("true")
				Notif("Now Spinning Around", "Spinning Around " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				SpinAroundLoop = RunService.RenderStepped:Connect(function()
					spinaroundrotation = spinaroundrotation + spinaroundspeed
						root.CFrame = CFrame.new(getRoot(foundPlr.Character).Position) * CFrame.Angles(0, math.rad(spinaroundrotation), 0) * CFrame.new(spinarounddistance, 0, 0)
						root.CFrame = CFrame.new(root.Position, getRoot(foundPlr.Character).Position)
				end)
			end
		end
end})

SpinaroundSliderSpeed = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Speed",Range={1,99},Increment=1,Suffix="Speed",CurrentValue=spinaroundspeed,Callback=function(Value)
	pcall(function()
		spinaroundspeed = Value
	end)
end})

SpinaroundInputSpeed = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Speed",OnEnter=true,PlaceholderText=spinaroundspeed,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		spinaroundspeed = Text
	end)
end})

SpinaroundSliderRadius = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Radius / Distance",Range={1,350},Increment=1,Suffix="Radius / Distance",CurrentValue=spinarounddistance,Callback=function(Value)
	pcall(function()
		spinarounddistance = Value
	end)
end})

SpinaroundInputRadius = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Radius / Distance",OnEnter=true,PlaceholderText=spinarounddistance,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		spinarounddistance = Text
	end)
end})

Sectionplayrerelatedtp69 = MiscPlayer:CreateSection("FE Player Related | 69", false, false, 10686489468)
Paragraph = MiscPlayer:CreateParagraph({Title="Important Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionplayrerelatedtp69)
local Bang69 = false
AlldropdownRefresh.a69dropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp69,Name="69",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if not r15(speaker) then
				if (Bang69 == true) then
					Bang69 = false
					R6Upsideloop:Disconnect()
					Bang69Looped:Disconnect()
					Notif("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					bang69:Stop()
					bangAnim:Destroy()
					Bang69 = false
					charresettopos()
					return
				else
					Bang69 = true
					Notif("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					c = Character
					hrp0 = c:FindFirstChild("HumanoidRootPart")
					hrp1 = hrp0:Clone()
					c.Parent = nil
					hrp0.Parent = hrp1
					hrp0.RootJoint.Part0 = nil
					hrp1.Parent = c
					c.Parent = workspace
					c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.pi, 0, math.pi)
					hrp0.Transparency = 0.85
					hrp0.Material = Enum.Material.ForceField
					hrp0.Color = Color3.fromRGB(25, 25, 25)
					R6Upsideloop = RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame
							hrp0.Orientation += Vector3.new(0, 0, 180)
							hrp0.Position -= Vector3.new(0, 0, 0)
							hrp0.Velocity = hrp1.Velocity
						end
					end)
					f69lwnum = 1
					bangAnim = Instance.new("Animation")
					bangAnim.AnimationId = "rbxassetid://148840371"
					bang69 = speaker.Character.Humanoid:LoadAnimation(bangAnim)
					bang69:Play(0.1, 1, 1)
					if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
						Bang69 = true
						Bang69Looped = RunService.RenderStepped:Connect(function()
							getRoot(speaker.Character).CFrame = (getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0)) + (getRoot(foundPlr.Character).CFrame.lookVector * f69lwnum)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end
				end
			elseif (Bang69 == true) then
				Bang69 = false
				Notif("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, "x")
				sfxSound("false")
				bang69:Stop()
				a69upsideown:Disconnect()
				R15Bang69Looped:Disconnect()
				R15Upside:Disconnect()
				bangAnim:Destroy()
				Bang69 = false
				charresettopos()
				return
			else
				Bang69 = true
				Notif("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				sfxSound("true")
				local LocalPlayer = Players.LocalPlayer
				local Character = LocalPlayer.Character
				local c = Character
				local function setupCharacter()
					local hrp0 = c:FindFirstChild("HumanoidRootPart")
					if hrp0 then
						local hrp1 = hrp0:Clone()
						c.Parent = nil
						hrp0.Parent = hrp1
						hrp1.Parent = c
						c.Parent = workspace
						c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(0, 0, math.pi) * CFrame.new(0, -2.5, 0)
						hrp0.Transparency = 0.85
						hrp0.Material = Enum.Material.ForceField
						hrp0.Color = Color3.fromRGB(25, 25, 25)
						R15Upside = RunService.Heartbeat:Connect(function()
							if (c and c.Parent) then
								hrp0.CFrame = hrp1.CFrame
								hrp0.Orientation += Vector3.new(0, 0, 180)
								hrp0.Position -= Vector3.new(0, -0.5, 0)
								hrp0.Velocity = hrp1.Velocity
							end
						end)
					end
				end
				setupCharacter()
				if r15(speaker) then
					local a69upsideown
					a69upsideown = Players.LocalPlayer.CharacterAdded:Connect(function(char)
						c = char
						setupCharacter()
					end)
				end
				f69lwnum = 1
				bangAnim = Instance.new("Animation")
				bangAnim.AnimationId = "rbxassetid://5918726674"
				bang69 = speaker.Character.Humanoid:LoadAnimation(bangAnim)
				bang69:Play(0.1, 1, 1)
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					Bang69 = true
					R15Bang69Looped = RunService.RenderStepped:Connect(function()
						getRoot(speaker.Character).CFrame = (getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0)) + (getRoot(foundPlr.Character).CFrame.lookVector * f69lwnum)
						getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
					end)
				end
			end
		end
		ifuserdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			bang69:Stop()
			bangAnim:Destroy()
			a69upsideown:Disconnect()
			Bang69 = false
		end)
	end)
end})

bangSlider69 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp69,Name="69 Speed",Range={0,100},Increment=3,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		bang69:AdjustSpeed(Value)
	end)
end})

Inputbangerionspeed69 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp69,Name="69 Speed",PlaceholderText="1",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		bang69:AdjustSpeed(Text)
	end)
end})

local ffc1hump = false
elapsedTimehump = 0
hump69distance = 5
hump69speed = 1
humpnordistance = 5
humpnorspeed = 1
humpfacedistance = 5
humpfacespeed = 1
spacing = Misc:CreateSpacing(Sectionplayrerelatedtp69,2)
local HumpBang69Looped
AlldropdownRefresh.a69humpdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if not r15(speaker) then
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					if (ffc1hump == true) then
						ffc1hump = false
						Hump69R6Upsideloop:Disconnect()
						if HumpBang69Looped then
							HumpBang69Looped:Disconnect()
							HumpBang69Looped = nil
							speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
						end
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
						Notif("No Longer 69 Humping The Player", "Not 69 Humping " .. foundPlr.Name .. " Anymore", 2, "x")
						sfxSound("false")
						charresettopos()
						return
					else
						ffc1hump = true
						Notif("Now 69 Humping", "69 Humping " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
						sfxSound("true")
						c = Character
						hrp0 = c:FindFirstChild("HumanoidRootPart")
						hrp1 = hrp0:Clone()
						c.Parent = nil
						hrp0.Parent = hrp1
						hrp0.RootJoint.Part0 = nil
						hrp1.Parent = c
						c.Parent = workspace
						c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.pi, 0, math.pi)
						hrp0.Transparency = 0.85
						hrp0.Material = Enum.Material.ForceField
						hrp0.Color = Color3.fromRGB(25, 25, 25)
						Hump69R6Upsideloop = RunService.Heartbeat:Connect(function()
							if (c and c.Parent) then
								hrp0.CFrame = hrp1.CFrame
								hrp0.Orientation += Vector3.new(0, 0, 180)
								hrp0.Position -= Vector3.new(0, 0, 0)
								hrp0.Velocity = hrp1.Velocity
							end
						end)
						HumpBang69Looped = RunService.Stepped:Connect(function(_, deltaTime)
							pcall(function()
								speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
								local speakerRoot = getRoot(speaker.Character)
								local targetRoot = getRoot(foundPlr.Character)
								if (speakerRoot and targetRoot) then
									elapsedTimehump = elapsedTimehump + (deltaTime * hump69speed)
									local cycle = elapsedTimehump % 1
									local alpha = (math.sin(cycle * math.pi * 2) * 0.5) + 0.5
									local xOffset = hump69distance * alpha			
									local targetCFrame = targetRoot.CFrame
									local targetPosition = targetCFrame.Position
									speakerRoot.CFrame = targetRoot.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0, xOffset) + targetCFrame.LookVector
									speakerRoot.AssemblyLinearVelocity = Vector3.new()
								elseif HumpBang69Looped then
									HumpBang69Looped:Disconnect()
									HumpBang69Looped = nil
									speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
								end
							end)
						end)
					end
				end
			elseif (ffc1hump == true) then
				ffc1hump = false
				if R15HumpBang69Looped then
					R15HumpBang69Looped:Disconnect()
					R15HumpBang69Looped = nil
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
				end
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
				Notif("No Longer 69 Humping ", "Not 69 Humping " .. foundPlr.Name .. " Anymore", 2, "x")
				sfxSound("false")
				Hump69R15Upsideloop:Disconnect()
				a69humper:Disconnect()
				charresettopos()
				return
			else
				ffc1hump = true
				Notif("Now 69 Humping", "69 Humping " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				sfxSound("true")
				local LocalPlayer = Players.LocalPlayer
				local Character = LocalPlayer.Character
				local c = Character
				local function setupCharacter()
					local hrp0 = c:FindFirstChild("HumanoidRootPart")
					if hrp0 then
						local hrp1 = hrp0:Clone()
						c.Parent = nil
						hrp0.Parent = hrp1
						hrp1.Parent = c
						c.Parent = workspace
						c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(0, 0, math.pi) * CFrame.new(0, -2, 0)
						hrp0.Transparency = 0.85
						hrp0.Material = Enum.Material.ForceField
						hrp0.Color = Color3.fromRGB(25, 25, 25)
						Hump69R15Upsideloop = RunService.Heartbeat:Connect(function()
							if (c and c.Parent) then
								hrp0.CFrame = hrp1.CFrame
								hrp0.Orientation += Vector3.new(0, 0, 180)
								hrp0.Position -= Vector3.new(0, 0, 0)
								hrp0.Velocity = hrp1.Velocity
							end
						end)
					end
				end
				setupCharacter()
				if r15(speaker) then
					local a69humper
					a69humper = Players.LocalPlayer.CharacterAdded:Connect(function(char)
						c = char
						setupCharacter()
					end)
				end
				R15HumpBang69Looped = RunService.Stepped:Connect(function(_, deltaTime)
					pcall(function()
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
						local speakerRoot = getRoot(speaker.Character)
						local targetRoot = getRoot(foundPlr.Character)
						if (speakerRoot and targetRoot) then
							elapsedTimehump = elapsedTimehump + (deltaTime * hump69speed)
							local cycle = elapsedTimehump % 1
							local alpha = (math.sin(cycle * math.pi * 2) * 0.5) + 0.5
							local xOffset = hump69distance * alpha			
							local targetCFrame = targetRoot.CFrame
							local targetPosition = targetCFrame.Position
							speakerRoot.CFrame = targetRoot.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0, xOffset) + targetCFrame.LookVector
							speakerRoot.AssemblyLinearVelocity = Vector3.new()
						elseif R15HumpBang69Looped then
							R15HumpBang69Looped:Disconnect()
							R15HumpBang69Looped = nil
							speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
						end
					end)
				end)
			end
		end
end})

s69humpSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump Distance",Range={1,25},Increment=1,Suffix="Distance",CurrentValue=5,Callback=function(Value)
	pcall(function()
		hump69distance = Value
	end)
end})

s69humpInput = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump Distance",OnEnter=true,PlaceholderText="5",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		hump69distance = Text
	end)
end})

s69humpSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump Speed",Range={1,20},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		hump69speed = Value
	end)
end})

s69humpInput = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump Speed",OnEnter=true,PlaceholderText="1",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		hump69speed = Text
	end)
end})

Sectionplayrerelatedtpbang = MiscPlayer:CreateSection("FE Player Related | Bang", false, false, 10686489468)
local Bang = false
AlldropdownRefresh.bangdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Bang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			flwnum = -1
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Bang == true) then
					BangerLoop:Disconnect()
					v2banger:Stop()
					v2bangerAnim:Destroy()
					Bang = false
					Notif("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					return
				else
					Bang = true
					v2bangerAnim = Instance.new("Animation")
					if not r15(speaker) then
						v2bangerAnim.AnimationId = "rbxassetid://148840371"
					else
						v2bangerAnim.AnimationId = "rbxassetid://5918726674"
					end
					v2banger = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(v2bangerAnim)
					v2banger:Play(0.1, 1, 3)
					Notif("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					BangerLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame + (getRoot(foundPlr.Character).CFrame.lookVector * flwnum)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

bangSlider = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Bang Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		v2banger:AdjustSpeed(Value)
	end)
end})

Inputbangerionspeed = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Bang Speed",PlaceholderText="3",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		v2banger:AdjustSpeed(Text)
	end)
end})

local ff2 = false
spacing = Misc:CreateSpacing(Sectionplayrerelatedtpbang,2)
AlldropdownRefresh.facebangdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Facebang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ff2 == true) then
					ff2 = false
					FaceBangerLoop:Disconnect()
					facebanger:Stop()
					facebangerAnim:Destroy()
					Notif("No Longer Facebanging The Player", "Not Facebanging " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					return
				else
					ff2 = true
					facebangerAnim = Instance.new("Animation")
					if not r15(speaker) then
						facebangerAnim.AnimationId = "rbxassetid://148840371"
					else
						facebangerAnim.AnimationId = "rbxassetid://5918726674"
					end
					facebanger = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(facebangerAnim)
					facebanger:Play(0.1, 1, 3)
					Notif("Now Facebanging", "Facebanging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					FaceBangerLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 2, 0.5)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

facebangSlider = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Facebang Speed",Range={0,100},Increment=3,Suffix="Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		facebanger:AdjustSpeed(Value)
	end)
end})

Inputbangerions = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Facebang Speed",PlaceholderText="3",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		facebanger:AdjustSpeed(Text)
	end)
end})

local ff = false
spacing = Misc:CreateSpacing(Sectionplayrerelatedtpbang,2)
AlldropdownRefresh.sitfacebangdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtpbang,Name="Sit Facebang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ff == true) then
					ff = false
					SitFaceBangerLoop:Disconnect()
					Character.Humanoid.Sit = false
					Notif("No Longer Facebanging ", "Not Facebanging " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					return
				else
					ff = true
					Notif("Now Facebanging", "Facebanging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					SitFaceBangerLoop = RunService.RenderStepped:Connect(function()
						pcall(function()
							Character.Humanoid.Sit = true
							getRoot(speaker.Character).CFrame = getRoot(foundPlr.Character).CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 1.6, 0.4)
							getRoot(speaker.Character).AssemblyLinearVelocity = Vector3.new()
						end)
					end)
				end
			end
		end
	end)
end})

Sectionplayrerelatedtphump = MiscPlayer:CreateSection("FE Player Related | Hump", false, false, 10686489468)
local Humping = false
local HumpLoop
AlldropdownRefresh.humpdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtphump,Name="Hump",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	plrName = Option:match("^(.-) %(")
	foundPlr = getPlr(plrName)
	if foundPlr then
		if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
			if (Humping == true) then
				Humping = false
				if HumpLoop then
					HumpLoop:Disconnect()
					HumpLoop = nil
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
				end
				sfxSound("false")
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
				Notif("No Longer Humping The Player", "Not Humping " .. foundPlr.Name .. " Anymore", 2, "x")
				return
			else
				Humping = true
				Notif("Now Humping", "Humping " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
				sfxSound("true")
				HumpLoop = RunService.Stepped:Connect(function(_, deltaTime)
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
						local speakerRoot = getRoot(speaker.Character)
						local targetRoot = getRoot(foundPlr.Character)
						if (speakerRoot and targetRoot) then
							elapsedTimehump = elapsedTimehump + (deltaTime * humpnorspeed)
							local cycle = elapsedTimehump % 1
							local alpha = (math.sin(cycle * math.pi * 2) * 0.5) + 0.5
							local targetPosition = targetRoot.CFrame
							local backPosition = targetRoot.CFrame * CFrame.new(0, 0, humpnordistance)
							local newPosition = targetPosition.Position:Lerp(backPosition.Position, alpha)
							local targetOrientation = targetRoot.CFrame - targetRoot.CFrame.Position
							speakerRoot.CFrame = CFrame.new(newPosition) * targetOrientation.Rotation
							speakerRoot.AssemblyLinearVelocity = Vector3.new()
						elseif HumpLoop then
							HumpLoop:Disconnect()
							HumpLoop = nil
							speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
						end
				end)
			end
		end
	end
end})

facebangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtphump,Name="Hump Distance",Range={1,25},Increment=1,Suffix="Distance",CurrentValue=5,Callback=function(Value)
	pcall(function()
		humpnordistance = Value
	end)
end})

faceInputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtphump,Name="Hump Distance",OnEnter=true,PlaceholderText="5",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		humpnordistance = Text
	end)
end})

facebangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtphump,Name="Hump Speed",Range={1,20},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		humpnorspeed = Value
	end)
end})

faceInputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtphump,Name="Hump Speed",OnEnter=true,PlaceholderText="1",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		humpnorspeed = Text
	end)
end})

local FaceHumpLoop
local ffc1 = false
spacing = Misc:CreateSpacing(Sectionplayrerelatedtphump,2)
AlldropdownRefresh.hump2dropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtphump,Name="Face Hump",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ffc1 == true) then
					ffc1 = false
					if FaceHumpLoop then
						FaceHumpLoop:Disconnect()
						FaceHumpLoop = nil
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
					end
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
					Notif("No Longer Face Humping The Player", "Not Face Humping " .. foundPlr.Name .. " Anymore", 2, "x")
					sfxSound("false")
					return
				else
					ffc1 = true
					Notif("Now Face Humping", "Face Humping " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, "check")
					sfxSound("true")
					FaceHumpLoop = RunService.Stepped:Connect(function(_, deltaTime)
						pcall(function()
							speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
							local speakerRoot = getRoot(speaker.Character)
							local targetRoot = getRoot(foundPlr.Character)
							if (speakerRoot and targetRoot) then
								elapsedTimehump = elapsedTimehump + (deltaTime * humpfacespeed)
								local cycle = elapsedTimehump % 1
								local alpha = (math.sin(cycle * math.pi * 2) * 0.5) + 0.5
								local xOffset = humpfacedistance * alpha			
								local targetCFrame = targetRoot.CFrame
								local targetPosition = targetCFrame.Position
								speakerRoot.CFrame = targetRoot.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 2, xOffset) + targetCFrame.LookVector
								speakerRoot.AssemblyLinearVelocity = Vector3.new()
							elseif FaceHumpLoop then
								FaceHumpLoop:Disconnect()
								FaceHumpLoop = nil
								speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
							end
						end)
					end)
				end
			end
		end
	end)
end})

facebangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtphump,Name="Face Hump Distance",Range={1,25},Increment=1,Suffix="Distance",CurrentValue=5,Callback=function(Value)
	pcall(function()
		humpfacedistance = Value
	end)
end})

faceInputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtphump,Name="Face Hump Distance",OnEnter=true,PlaceholderText="5",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		humpfacedistance = Text
	end)
end})

facebangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtphump,Name="Face Hump Speed",Range={1,20},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		humpfacespeed = Value
	end)
end})

faceInputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtphump,Name="Face Hump Speed",OnEnter=true,PlaceholderText="1",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		humpfacespeed = Text
	end)
end})

Miscclient = Window:CreateTab("Client", 122260852237334)
SectiontotalscrisMiscclient = Miscclient:CreateSection("Total Universal Script's: " .. Scriptcount, false, false, 7743869612)
Paragraph = Miscclient:CreateParagraph({Title="General Note",Content="Script's Here Are Only Client Sided In Which Means Only You Can See It"}, SectiontotalscrisMiscclient)
Sectionmiscscripts = Miscclient:CreateSection("Miscellaneous (Client)", false, false, 10709759610)
PJLNF = 1.3
function NotifyPlayerEvent(player, event)
    local DT = DateTime.fromUnixTimestamp(86400 * player.AccountAge)
    local Days = tonumber(DT:FormatUniversalTime("DD", "en-us"))
    local Months = tonumber(DT:FormatUniversalTime("MM", "en-us"))
    local Years = tonumber(DT:FormatUniversalTime("YYYY", "en-us")) - 1970

    local content = ("Account Age: %d Day %d Month %d Year\nAccountId: %d"):format(Days, Months, Years, player.UserId)
    
    local title
    if player.Name == player.DisplayName then
        title = ("%s"):format(player.Name)
    else
        title = ("%s (%s)"):format(player.Name, player.DisplayName)
    end

    Notif(title, ("%s the server\n%s"):format(event, content), PJLNF, "HeadShot", player)
end

function Notifies()
    pjadded = game.Players.ChildAdded:Connect(function(player)
        NotifyPlayerEvent(player, "Has joined")
    end)

    pjremoved = game.Players.ChildRemoved:Connect(function(player)
        NotifyPlayerEvent(player, "Has left")
    end)
end

Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="Player Join/Leave Notifications",CurrentValue=false,Flag="playerjoinsleave",Callback=function(Value)
	shared.Notify = Value
	if shared.Notify then
		Notifies()
	elseif not shared.Notify then
		pjadded:Disconnect()
		pjremoved:Disconnect()
		return
	end
end})

Sliderpj = Miscclient:CreateSlider({SectionParent=Sectionmiscscripts,Name="Player Join/.. Notify Duration",Range={0,10},Increment=0.5,Suffix="Duration",CurrentValue=PJLNF,Callback=function(Value)
	pcall(function()
		PJLNF = Value
	end)
end})

Inputpj = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Player Join/.. Notify Duration",OnEnter=true,PlaceholderText=PJLNF,CharacterLimit=3,NumbersOnly=false,RemoveTextAfterFocusLost=false,Callback=function(Text)
	PJLNF = Text
end})

spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)
Slider = Miscclient:CreateSlider({SectionParent=Sectionmiscscripts,Name="Set FPS Cap",Range={1,GameSettings.FramerateCap},Increment=1,Suffix="FPS",CurrentValue=GameSettings.FramerateCap,Callback=function(Value)
	pcall(function()
		setfpscap(Value)
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Set FPS Cap",OnEnter=true,PlaceholderText=GameSettings.FramerateCap,CharacterLimit=3,NumbersOnly=false,RemoveTextAfterFocusLost=false,Callback=function(Text)
	setfpscap(Text)
end})

xNamingTbl = {}
spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="Show Usernames Not Display",CurrentValue=false,Callback=function(Value)
	showrealnamesstog = Value
	if showrealnamesstog then
		function clean(cplr)
			if (cplr.DisplayName ~= cplr.Name) then
				if cplr.Character then
					cplr.Character:WaitForChild("Humanoid").DisplayName = cplr.Name
				end
				cplr.CharacterAdded:Connect(function(char)
					char:WaitForChild("Humanoid").DisplayName = "(NICKNAMED)\n" .. cplr.Name
				end)
			end
		end
		xNaming = Players.PlayerAdded:Connect(clean)
		for _, p in pairs(Players:GetPlayers()) do
			clean(p)
		end
	else
		xNaming:Disconnect()
	end
end})

spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="No Network Claim",CurrentValue=false,Callback=function(Value)
	nonetworkclaimer = Value
	if nonetworkclaimer then
		DHSaved = workspace.FallenPartsDestroyHeight
		workspace.FallenPartsDestroyHeight = math.huge - math.huge
	else
		workspace.FallenPartsDestroyHeight = DHSaved
	end
end})

Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="No Hurt Overlay",CurrentValue=false,Callback=function(Value)
	nohurtov = Value
	if nohurtov then
		hurtOverlay = true
		CoreGui.TopBar.FullScreenFrame.HurtOverlay:GetPropertyChangedSignal("Visible"):Connect(function()
			if (hurtOverlay == true) then
				CoreGui.TopBar.FullScreenFrame.HurtOverlay.Visible = false
			end
		end)
	else
		hurtOverlay = false
	end
end})

spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)
Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Change Player ID",OnEnter=true,PlaceholderText="ID",RemoveTextAfterFocusLost=false,Callback=function(Text)
	speaker.UserId = Text
end})

spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)
Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="UNC Enviroment Test",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/external-naming-convention/RobloxNamingStandard/main/RENCCheckEnv.lua"))()
	sfxSound("true")
	Notif("Check Console!", "Press F9 To Open Up The Developer Console And See Your UNC Level!", 3, "check")
end})

Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Check If Fake UNC",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/HummingBird8/HummingRn/main/sUNCTestGET"))()
	sfxSound("true")
	Notif("Check Console!", "Press F9 To Open Up The Developer Console And See Your UNC Level!", 3, "check")
end})


Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Add More UNC",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-MoreUNC-13110"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)
Paragraph = Miscclient:CreateParagraph({Title="Remove Kick GUI Info",Content="When You're Kicked From A Game It Will Remove The Prompt Saying You're Kicked."}, Sectionmiscscripts)
Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Remove Kick GUI",Interact="Click",Callback=function()
	GuiService:ClearError()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

Paragraph = Miscclient:CreateParagraph({Title="Kick Yourself Info",Content="Useful When Roblox UI Disappear's."}, Sectionmiscscripts)
Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Kick Yourself",Interact="Click",Callback=function()
	speaker:Kick("You've Kicked Yourself!")
end})

Paragraph = Miscclient:CreateParagraph({Title="Kick Yourself W/ A MSG Info",Content="In The Box First Type In The Message You Want To Be Kicked With And Press Enter."}, Sectionmiscscripts)
Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Kick Yourself W/ A Custom MSG",OnEnter=true,PlaceholderText="Enter Message",RemoveTextAfterFocusLost=false,Callback=function(Text)
	speaker:Kick(Text)
end})

Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Kick Yourself W/ A Custom Ban MSG",OnEnter=true,PlaceholderText="Enter Reason",RemoveTextAfterFocusLost=false,Callback=function(Text)
	speaker:Kick("You have been banned for: " .. Text)
end})

spacing = Miscclient:CreateSpacing(Sectionmiscscripts,2)

Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Enable Reset Button",Interact="Click",Callback=function()
	StarterGui:SetCore("ResetButtonCallback", true)
	sfxSound("true")
	Notif("Reset Button Enabled!", "Reset Button Is Now Available In The Esc Menu!", 3, "check")
end})

Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Enable Shift Lock",Interact="Click",Callback=function()
	speaker.DevEnableMouseLock = true
	sfxSound("true")
	Notif("Reset ShiftLock Enabled!", "ShiftLock Is Now Available In The Esc Menu!", 3, "check")
end})

Sectiontchat = Miscclient:CreateSection("LocalPlayer / Player Related | Chat", false, false, 10734888228)
Paragraph = Miscclient:CreateParagraph({Title="Chat Script's Info",Content="Script's Here Are Only For Legacy Chat (The Chat You Can't Type Out Emoji's)\nType in \"/spy\" To Disable The Chat Spy."}, Sectiontchat)
Togglea = Miscclient:CreateToggle({SectionParent=Sectiontchat,Name="Dark Chat Bubbles",CurrentValue=false,Callback=function(Value)
	darkchatbubble = Value
	if darkchatbubble then
		if speaker.PlayerGui:FindFirstChild("BubbleChat") then
			_G.connections['darkbubbles'] = speaker.PlayerGui.BubbleChat.DescendantAdded:connect(function(msg)
				if ((msg:IsA("ImageLabel") and (msg.Name == "ChatBubble")) or (msg:IsA("ImageLabel") and (msg.Name == "ChatBubbleTail")) or (msg:IsA("ImageLabel") and (msg.Name == "SmallTalkBubble"))) then
					msg.ImageColor3 = Color3.fromRGB(0, 0, 0)
				end
				if (msg:IsA("TextLabel") and (msg.Name == "BubbleText")) then
					msg.TextColor3 = Color3.fromRGB(255, 255, 255)
					msg.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				end
			end)
		else
			_G.connections['darkbubbles']:Disconnect()
			_G.connections['darkbubbles'] = nil
		end
	end
end})

Button = Miscclient:CreateButton({SectionParent=Sectiontchat,Name="Chat Spy",Interact="Click",Callback=function()
	Config = {
		enabled = true,
		spyOnMyself = false,
		public = false,
		publicItalics = true
	}
	PrivateProperties = {
		Color = Color3.fromRGB(0,255,255) ,
		Font = Enum.Font.SourceSansBold,
		TextSize = 18
	}
		local saymsg = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
		local getmsg = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
		local instance = (_G.chatSpyInstance or 0) + 1
		_G.chatSpyInstance = instance
	
		local function onChatted(p,msg)
			if _G.chatSpyInstance == instance then
				if p==speaker and msg:lower():sub(1,4)=="/spy" then
					Config.enabled = not Config.enabled
					wait(0.3)
					PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
					StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
				elseif Config.enabled and (Config.spyOnMyself==true or p~=speaker) then
					msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
					local hidden = true
					local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
						if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and Config.public==false and Players[packet.FromSpeaker].Team==player.Team)) then
							hidden = false
						end
					end)
					wait(1)
					conn:Disconnect()
					if hidden and Config.enabled then
						if Config.public then
							saymsg:FireServer((Config.publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
						else
							PrivateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
							StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
						end
					end
				end
			end
		end
		
		for _,p in ipairs(Players:GetPlayers()) do
			p.Chatted:Connect(function(msg) onChatted(p,msg) end)
		end
	
		Players.PlayerAdded:Connect(function(p)
			p.Chatted:Connect(function(msg) onChatted(p,msg) end)
		end)
	
		PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
		StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
		local chatFrame = player.PlayerGui.Chat.Frame
		chatFrame.ChatChannelParentFrame.Visible = true
		chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

Sectionmisctimescripts = Miscclient:CreateSection("LocalPlayer Related | Time (Client)", false, false, 10709805144)
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmisctimescripts,Name="Night And Day",CurrentValue=false,Callback=function(Value)
	pcall(function()
		daytonight = Value
		if daytonight then
			TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=0}):Play()
		else
			TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=12}):Play()
		end
	end)
end})

SliderTOD = Miscclient:CreateSlider({SectionParent=Sectionmisctimescripts,Name="Time Of Day",Range={0,24},Increment=1,Suffix="Time",CurrentValue=math.floor(game.Lighting.ClockTime),Callback=function(Value)
	pcall(function()
		TweenService:Create(game.Lighting, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0), {ClockTime=Value}):Play()
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectionmisctimescripts,Name="Time Of Day",OnEnter=true,PlaceholderText=math.floor(game.Lighting.ClockTime),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		TweenService:Create(game.Lighting, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0), {ClockTime=Text}):Play()
	end)
end})

Sectiontodloop = Miscclient:CreateSection("LocalPlayer Related | World | Time Loop (Client)", false, true, 10709805144)
todvalue = 12
Label = Misc:CreateLabel("Set A Value First Then Enable", Sectiontodloop)
Toggle = Misc:CreateToggle({SectionParent=Sectiontodloop,Name="Time Of Day Loop",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			todlooper = RunService.Heartbeat:Connect(function()
				game.Lighting.ClockTime = todvalue
			end)
		else
			todlooper:Disconnect()
		end
	end)
end})

Sliderf = Miscclient:CreateSlider({SectionParent=Sectiontodloop,Name="Time Of Day Loop",Range={0,24},Increment=1,Suffix="Time",CurrentValue=math.floor(game.Lighting.ClockTime),Callback=function(Value)
	pcall(function()
		todvalue = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectiontodloop,Name="Time Of Day Loop",OnEnter=true,PlaceholderText=math.floor(game.Lighting.ClockTime),NumbersOnly=true,CharacterLimit=2,RemoveTextAfterFocusLost=false,Callback=function(Text)
	todvalue = Text
end})

Sectionmiscworldscripts = Miscclient:CreateSection("LocalPlayer Related | World (Client)", false, false, 10709806631)
origsettingsbrightness = {sliderbright=game.Lighting.Brightness}
Buttonresetworld = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Reset World Values",Interact="Click",Callback=function()
	pcall(function()
		Colorpickerskybox:Set(Color3.fromRGB(0, 0, 0))
		Colorpickerskyboxoutdfor:Set(Color3.fromRGB(0, 0, 0))
		Sliderbright:Set(5)
		Sliderranggerrr:Set(30)
	end)
end})

Button = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Full Bright",Interact="Click",Callback=function()
	Lighting.Brightness = 2
	Lighting.ClockTime = 14
	Lighting.FogEnd = 100000
	Lighting.GlobalShadows = false
	Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

origsettings = {abt=Lighting.Ambient,oabt=Lighting.OutdoorAmbient,brt=Lighting.Brightness,time=Lighting.ClockTime,fe=Lighting.FogEnd,fs=Lighting.FogStart,gs=Lighting.GlobalShadows}
Button = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Restore Lighting",Interact="Click",Callback=function()
	Lighting.Ambient = origsettings.abt
	Lighting.OutdoorAmbient = origsettings.oabt
	Lighting.Brightness = origsettings.brt
	Lighting.ClockTime = origsettings.time
	Lighting.FogEnd = origsettings.fe
	Lighting.FogStart = origsettings.fs
	Lighting.GlobalShadows = origsettings.gs
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Toggleshowhitboxes = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Show Hitboxes",CurrentValue=false,Callback=function(Value)
	pcall(function()
		settings():GetService("RenderSettings").ShowBoundingBoxes = Value
	end)
end})

Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Show Animation Data",CurrentValue=false,Callback=function(Value)
	pcall(function()
		settings():GetService("NetworkSettings").ShowActiveAnimationAsset = Value
	end)
end})

spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Sliderbright = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Brightness",Range={0,15},Increment=1,Suffix="Brightness",CurrentValue=math.floor(game.Lighting.Brightness),Callback=function(Value)
	pcall(function()
		game.Lighting.Brightness = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Brightness",OnEnter=true,PlaceholderText=math.floor(game.Lighting.Brightness),RemoveTextAfterFocusLost=false,Callback=function(Text)
	game.Lighting.Brightness = Text
end})

spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Colorpickerskybox = Miscclient:CreateColorPicker({SectionParent=Sectionmiscworldscripts,Name="Ambient Color Picker",Color=Color3.fromRGB(0, 0, 0),Callback=function(Value)
	TweenService:Create(game.Lighting, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {Ambient=Value}):Play()
end})

Colorpickerskyboxoutdfor = Miscclient:CreateColorPicker({SectionParent=Sectionmiscworldscripts,Name="Outdoor Ambient Color Picker",Color=Color3.fromRGB(0, 0, 0),Callback=function(Value)
	TweenService:Create(game.Lighting, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {OutdoorAmbient=Value}):Play()
end})

spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Button = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Very Low GFX",Interact="Click",Callback=function()
	decalsyeeted = true
	g = game
	w = g.Workspace
	l = g.Lighting
	t = w.Terrain
	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 0
	l.GlobalShadows = false
	l.FogEnd = 8999999488
	l.Brightness = 0
	settings().Rendering.QualityLevel = "Level01"
	for i, v in pairs(g:GetDescendants()) do
		if (v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart")) then
			v.Material = "Plastic"
			v.Reflectance = 0
		elseif (v:IsA("Decal") or (v:IsA("Texture") and decalsyeeted)) then
			v.Transparency = 1
		elseif (v:IsA("ParticleEmitter") or v:IsA("Trail")) then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		elseif (v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke")) then
			v.Enabled = false
		elseif v:IsA("MeshPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
			v.TextureID = 10385902758728956
		end
	end
	for i, e in pairs(l:GetChildren()) do
		if (e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect")) then
			e.Enabled = false
		end
	end
	task.wait(1)
	function WindowFocusReleasedFunction()
		RunService:Set3dRenderingEnabled(false)
		setfpscap(10)
		return
	end
	function WindowFocusedFunction()
		RunService:Set3dRenderingEnabled(true)
		setfpscap(360)
		return
	end
	function Initialize()
		UserInputService.WindowFocusReleased:Connect(WindowFocusReleasedFunction)
		UserInputService.WindowFocused:Connect(WindowFocusedFunction)
		return
	end
	Initialize()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

lightrangee = 30
lightbrightness = 5
lightinger = false
lightColorr = Color3.fromRGB(255, 255, 255)
spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Togglelightclient = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Light",CurrentValue=false,Callback=function(Value)
	pcall(function()
		lightroot = Value
		if Value then
			lightinger = true
			local light = Instance.new("PointLight")
			light.Parent = getRoot(speaker.Character)
			task.spawn(function()
				while task.wait() do
					light.Range = lightrangee
					light.Brightness = lightbrightness
					light.Color = lightColorr
				end
			end)
		else
			lightinger = false
			for i, v in pairs(speaker.Character:GetDescendants()) do
				if (v.ClassName == "PointLight") then
					v:Destroy()
				end
			end
		end
	end)
end})

Colorpicker = Miscclient:CreateColorPicker({SectionParent=Sectionmiscworldscripts,Name="Light Color Picker",Color=Color3.fromRGB(255, 255, 255),Callback=function(Value)
	lightColorr = Value
	if lightroot then
		for i, v in pairs(speaker.Character:GetDescendants()) do
			if (v.ClassName == "PointLight") then
				v.Color = lightColor
			end
		end
	end
end})

Sliderbright = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Change Light Brightness",Range={0,20},Increment=1,Suffix="Brightness",CurrentValue=5,Callback=function(Value)
	lightbrightness = Value
end})

Inputbrgiht = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Change Light Brightness",OnEnter=true,PlaceholderText=lightbrightness,RemoveTextAfterFocusLost=false,Callback=function(Text)
	lightbrightness = Text
end})

Sliderranggerrr = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Change Light Range",Range={0,60},Increment=1,Suffix="Range",CurrentValue=30,Callback=function(Value)
	lightrangee = Value
end})

Inputrangerrr = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Change Light Range",OnEnter=true,PlaceholderText=lightrangee,RemoveTextAfterFocusLost=false,Callback=function(Text)
	lightrangee = Text
end})

spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Toggleremovefogga = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Remove Fog",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			removefogg = RunService.RenderStepped:Connect(function()
				Lighting.FogStart = 0
				Lighting.FogEnd = 99999999999
				task.wait()
			end)
		else
			removefogg:Disconnect()
			Lighting.FogEnd = origsettings.fe
		end
	end)
end})

transparent = false
transprencypartxray = 0.5
spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
function x(v)
	if v then
		for _, i in pairs(workspace:GetDescendants()) do
			if (i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass("Humanoid") and not i.Parent.Parent:FindFirstChildOfClass("Humanoid")) then
				i.LocalTransparencyModifier = transprencypartxray
			end
		end
	else
		for _, i in pairs(workspace:GetDescendants()) do
			if (i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass("Humanoid") and not i.Parent.Parent:FindFirstChildOfClass("Humanoid")) then
				i.LocalTransparencyModifier = 0
			end
		end
	end
end
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="X-Ray",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			xraylooper = RunService.RenderStepped:Connect(function()
				transparent = true
				x(transparent)
			end)
		else
			xraylooper:Disconnect()
			transparent = false
			x(transparent)
		end
	end)
end})

Sliderxrayvalue = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="X-Ray Part Transparency",Range={0,1},Increment=0.1,Suffix="Transparency",CurrentValue=transprencypartxray,Callback=function(Value)
	pcall(function()
		transprencypartxray = Value
	end)
end})

Inputxrayvalue = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="X-Ray Part Transparency",OnEnter=true,PlaceholderText=transprencypartxray,NumbersOnly=false,CharacterLimit=2,RemoveTextAfterFocusLost=false,Callback=function(Text)
	transprencypartxray = Text
end})

Pxrts = {}
spacing = Miscclient:CreateSpacing(Sectionmiscworldscripts,2)
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Show Invisible Wall's",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			for i, v in pairs(workspace:GetDescendants()) do
				if (v:IsA("BasePart") and (v.Transparency == 1)) then
					v.Transparency = 0
					Pxrts[#Pxrts + 1] = v
				end
			end
		else
			for i, v in pairs(Pxrts) do
				v.Transparency = 1
			end
		end
	end)
end})

Sectioncamera = Miscclient:CreateSection("LocalPlayer Related | Camera (Client)", false, false, 10709789686)
camzoomdistanceholder = {speaker.CameraMaxZoomDistance,speaker.CameraMinZoomDistance}
Buttonresetflysvalue = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="Reset Camera Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderfov:Set(70)
		Sliderminimalzoomnoloop:Set(camzoomdistanceholder[2])
		Slidermaxzoomnoloop:Set(camzoomdistanceholder[1])
	end)
end})

spacing = Miscclient:CreateSpacing(Sectioncamera,2)
Button = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="Fix Camera",Interact="Click",Callback=function()
	workspace.CurrentCamera:remove()
	task.wait(0.1)
	repeat
		task.wait()
	until speaker.Character ~= nil 
	workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA("Humanoid")
	workspace.CurrentCamera.CameraType = "Custom"
	speaker.CameraMinZoomDistance = 0.5
	speaker.CameraMaxZoomDistance = 400
	speaker.CameraMode = "Classic"
	speaker.Character.Head.Anchored = false
end})

spacing = Miscclient:CreateSpacing(Sectioncamera,2)
Toggle = Miscclient:CreateToggle({SectionParent=Sectioncamera,Name="Simple NoClip Camera",CurrentValue=false,Callback=function(Value)
	pcall(function()
		function test(st)
			if Value == true then return 1 else return 0 end
		end
		game:GetService("Players").LocalPlayer.DevCameraOcclusionMode = test(Value)
	end)
end})

spacing = Miscclient:CreateSpacing(Sectioncamera,2)
Sliderfov = Miscclient:CreateSlider({SectionParent=Sectioncamera,Name="Field Of View",Range={45,120},Increment=1,Suffix="FOV",CurrentValue=math.floor(game:GetService("Workspace").Camera.FieldOfView),Callback=function(Value)
	pcall(function()
		TweenService:Create(game:GetService("Workspace").Camera, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {FieldOfView=Value}):Play()
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectioncamera,Name="Field Of View",OnEnter=true,PlaceholderText=math.floor(game:GetService("Workspace").Camera.FieldOfView),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	game:GetService("Workspace").Camera.FieldOfView = Text
end})

spacing = Miscclient:CreateSpacing(Sectioncamera,2)
Buttonfreeca = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="Freecam",Interact="Click",Callback=function()
	pcall(function()
		sfxSound("true")
		Buttonfreeca:Set("Freecam (SHIFT+P)")
		speaker.DevEnableMouseLock = false
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
		function sandbox(var, func)
			env = getfenv(func)
			newenv = setmetatable({}, {__index=function(self, k)
				if (k == "script") then
					return var
				else
					return env[k]
				end
			end})

			setfenv(func, newenv)
			return func
		end
		cors = {}
		mas = Instance.new("Model", game:GetService("Lighting"))
		LocalScript0 = Instance.new("LocalScript")
		LocalScript0.Name = "FreeCamera"
		LocalScript0.Parent = mas
		table.insert(cors, sandbox(LocalScript0, function()
			pi = math.pi
			abs = math.abs
			clamp = math.clamp
			exp = math.exp
			rad = math.rad
			sign = math.sign
			sqrt = math.sqrt
			tan = math.tan
			ContextActionService = game:GetService("ContextActionService")
			Players = game:GetService("Players")
			RunService = game:GetService("RunService")
			StarterGui = game:GetService("StarterGui")
			UserInputService = game:GetService("UserInputService")
			LocalPlayer = speaker
			if not LocalPlayer then
				LocalPlayer = speaker
			end
			Camera = workspace.CurrentCamera
			workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
				newCamera = workspace.CurrentCamera
				if newCamera then
					Camera = newCamera
				end
			end)
			TOGGLE_INPUT_PRIORITY = Enum.ContextActionPriority.Low.Value
			INPUT_PRIORITY = Enum.ContextActionPriority.High.Value
			FREECAM_MACRO_KB = {Enum.KeyCode.LeftShift,Enum.KeyCode.P}
			NAV_GAIN = Vector3.new(1, 1, 1) * 64
			PAN_GAIN = Vector2.new(0.75, 1) * 8
			FOV_GAIN = 300
			PITCH_LIMIT = rad(90)
			VEL_STIFFNESS = 1.5
			PAN_STIFFNESS = 1
			FOV_STIFFNESS = 4
			Spring = {}
			do
				Spring.__index = Spring
				Spring.new = function(freq, pos)
					self = setmetatable({}, Spring)
					self.f = freq
					self.p = pos
					self.v = pos * 0
					return self
				end
				Spring.Update = function(self, dt, goal)
					f = self.f * 2 * pi
					p0 = self.p
					v0 = self.v
					offset = goal - p0
					decay = exp(-f * dt)
					p1 = goal + (((v0 * dt) - (offset * ((f * dt) + 1))) * decay)
					v1 = ((f * dt * ((offset * f) - v0)) + v0) * decay
					self.p = p1
					self.v = v1
					return p1
				end
				Spring.Reset = function(self, pos)
					self.p = pos
					self.v = pos * 0
				end
			end
			cameraPos = Vector3.new()
			cameraRot = Vector2.new()
			cameraFov = 0
			velSpring = Spring.new(VEL_STIFFNESS, Vector3.new())
			panSpring = Spring.new(PAN_STIFFNESS, Vector2.new())
			fovSpring = Spring.new(FOV_STIFFNESS, 0)
			Input = {}
			do
				local thumbstickCurve
				do
					K_CURVATURE = 2
					K_DEADZONE = 0.15
					function fCurve(x)
						return (exp(K_CURVATURE * x) - 1) / (exp(K_CURVATURE) - 1)
					end
					function fDeadzone(x)
						return fCurve((x - K_DEADZONE) / (1 - K_DEADZONE))
					end
					function thumbstickCurve(x)
						return sign(x) * clamp(fDeadzone(abs(x)), 0, 1)
					end
				end
				gamepad = {ButtonX=0,ButtonY=0,DPadDown=0,DPadUp=0,ButtonL2=0,ButtonR2=0,Thumbstick1=Vector2.new(),Thumbstick2=Vector2.new()}
				keyboard = {W=0,A=0,S=0,D=0,E=0,Q=0,U=0,H=0,J=0,K=0,I=0,Y=0,Up=0,Down=0,LeftShift=0,RightShift=0}
				mouse = {Delta=Vector2.new(),MouseWheel=0}
				NAV_GAMEPAD_SPEED = Vector3.new(1, 1, 1)
				NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
				PAN_MOUSE_SPEED = Vector2.new(1, 1) * (pi / 64)
				PAN_GAMEPAD_SPEED = Vector2.new(1, 1) * (pi / 8)
				FOV_WHEEL_SPEED = 1
				FOV_GAMEPAD_SPEED = 0.25
				NAV_ADJ_SPEED = 0.75
				NAV_SHIFT_MUL = 0.25
				navSpeed = 1
				Input.Vel = function(dt)
					navSpeed = clamp(navSpeed + (dt * (keyboard.Up - keyboard.Down) * NAV_ADJ_SPEED), 0.01, 4)
					kGamepad = Vector3.new(thumbstickCurve(gamepad.Thumbstick1.x), thumbstickCurve(gamepad.ButtonR2) - thumbstickCurve(gamepad.ButtonL2), thumbstickCurve(-gamepad.Thumbstick1.y)) * NAV_GAMEPAD_SPEED
					kKeyboard = Vector3.new(((keyboard.D - keyboard.A) + keyboard.K) - keyboard.H, ((keyboard.E - keyboard.Q) + keyboard.I) - keyboard.Y, ((keyboard.S - keyboard.W) + keyboard.J) - keyboard.U) * NAV_KEYBOARD_SPEED
					shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift)
					return (kGamepad + kKeyboard) * navSpeed * ((shift and NAV_SHIFT_MUL) or 1)
				end
				Input.Pan = function(dt)
					kGamepad = Vector2.new(thumbstickCurve(gamepad.Thumbstick2.y), thumbstickCurve(-gamepad.Thumbstick2.x)) * PAN_GAMEPAD_SPEED
					kMouse = mouse.Delta * PAN_MOUSE_SPEED
					mouse.Delta = Vector2.new()
					return kGamepad + kMouse
				end
				Input.Fov = function(dt)
					kGamepad = (gamepad.ButtonX - gamepad.ButtonY) * FOV_GAMEPAD_SPEED
					kMouse = mouse.MouseWheel * FOV_WHEEL_SPEED
					mouse.MouseWheel = 0
					return kGamepad + kMouse
				end
				do
					function Keypress(action, state, input)
						keyboard[input.KeyCode.Name] = ((state == Enum.UserInputState.Begin) and 1) or 0
						return Enum.ContextActionResult.Sink
					end
					function GpButton(action, state, input)
						gamepad[input.KeyCode.Name] = ((state == Enum.UserInputState.Begin) and 1) or 0
						return Enum.ContextActionResult.Sink
					end
					function MousePan(action, state, input)
						delta = input.Delta
						mouse.Delta = Vector2.new(-delta.y, -delta.x)
						return Enum.ContextActionResult.Sink
					end
					function Thumb(action, state, input)
						gamepad[input.KeyCode.Name] = input.Position
						return Enum.ContextActionResult.Sink
					end
					function Trigger(action, state, input)
						gamepad[input.KeyCode.Name] = input.Position.z
						return Enum.ContextActionResult.Sink
					end
					function MouseWheel(action, state, input)
						mouse[input.UserInputType.Name] = -input.Position.z
						return Enum.ContextActionResult.Sink
					end
					function Zero(t)
						for k, v in pairs(t) do
							t[k] = v * 0
						end
					end
					Input.StartCapture = function()
						ContextActionService:BindActionAtPriority("FreecamKeyboard", Keypress, false, INPUT_PRIORITY, Enum.KeyCode.W, Enum.KeyCode.U, Enum.KeyCode.A, Enum.KeyCode.H, Enum.KeyCode.S, Enum.KeyCode.J, Enum.KeyCode.D, Enum.KeyCode.K, Enum.KeyCode.E, Enum.KeyCode.I, Enum.KeyCode.Q, Enum.KeyCode.Y, Enum.KeyCode.Up, Enum.KeyCode.Down)
						ContextActionService:BindActionAtPriority("FreecamMousePan", MousePan, false, INPUT_PRIORITY, Enum.UserInputType.MouseMovement)
						ContextActionService:BindActionAtPriority("FreecamMouseWheel", MouseWheel, false, INPUT_PRIORITY, Enum.UserInputType.MouseWheel)
						ContextActionService:BindActionAtPriority("FreecamGamepadButton", GpButton, false, INPUT_PRIORITY, Enum.KeyCode.ButtonX, Enum.KeyCode.ButtonY)
						ContextActionService:BindActionAtPriority("FreecamGamepadTrigger", Trigger, false, INPUT_PRIORITY, Enum.KeyCode.ButtonR2, Enum.KeyCode.ButtonL2)
						ContextActionService:BindActionAtPriority("FreecamGamepadThumbstick", Thumb, false, INPUT_PRIORITY, Enum.KeyCode.Thumbstick1, Enum.KeyCode.Thumbstick2)
					end
					Input.StopCapture = function()
						navSpeed = 1
						Zero(gamepad)
						Zero(keyboard)
						Zero(mouse)
						ContextActionService:UnbindAction("FreecamKeyboard")
						ContextActionService:UnbindAction("FreecamMousePan")
						ContextActionService:UnbindAction("FreecamMouseWheel")
						ContextActionService:UnbindAction("FreecamGamepadButton")
						ContextActionService:UnbindAction("FreecamGamepadTrigger")
						ContextActionService:UnbindAction("FreecamGamepadThumbstick")
					end
				end
			end
			function GetFocusDistance(cameraFrame)
				znear = 0.1
				viewport = Camera.ViewportSize
				projy = 2 * tan(cameraFov / 2)
				projx = (viewport.x / viewport.y) * projy
				fx = cameraFrame.rightVector
				fy = cameraFrame.upVector
				fz = cameraFrame.lookVector
				minVect = Vector3.new()
				minDist = 512
				for x = 0, 1, 0.5 do
					for y = 0, 1, 0.5 do
						cx = (x - 0.5) * projx
						cy = (y - 0.5) * projy
						offset = ((fx * cx) - (fy * cy)) + fz
						origin = cameraFrame.p + (offset * znear)
						part, hit = workspace:FindPartOnRay(Ray.new(origin, offset.unit * minDist))
						dist = (hit - origin).magnitude
						if (minDist > dist) then
							minDist = dist
							minVect = offset.unit
						end
					end
				end
				return fz:Dot(minVect) * minDist
			end
			function StepFreecam(dt)
				vel = velSpring:Update(dt, Input.Vel(dt))
				pan = panSpring:Update(dt, Input.Pan(dt))
				fov = fovSpring:Update(dt, Input.Fov(dt))
				zoomFactor = sqrt(tan(rad(70 / 2)) / tan(rad(cameraFov / 2)))
				cameraFov = clamp(cameraFov + (fov * FOV_GAIN * (dt / zoomFactor)), 1, 120)
				cameraRot = cameraRot + (pan * PAN_GAIN * (dt / zoomFactor))
				cameraRot = Vector2.new(clamp(cameraRot.x, -PITCH_LIMIT, PITCH_LIMIT), cameraRot.y % (2 * pi))
				cameraCFrame = CFrame.new(cameraPos) * CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0) * CFrame.new(vel * NAV_GAIN * dt)
				cameraPos = cameraCFrame.p
				Camera.CFrame = cameraCFrame
				Camera.Focus = cameraCFrame * CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
				Camera.FieldOfView = cameraFov
			end
			PlayerState = {}
			do
				local mouseIconEnabled
				local cameraSubject
				local cameraType
				local cameraFocus
				local cameraCFrame
				local cameraFieldOfView
				screenGuis = {}
				coreGuis = {Backpack=true,Chat=true,Health=true,PlayerList=true}
				setCores = {BadgesNotificationsActive=true,PointsNotificationsActive=true}
				PlayerState.Push = function()
					for name in pairs(coreGuis) do
						coreGuis[name] = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType[name])
						StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], false)
					end
					for name in pairs(setCores) do
						setCores[name] = StarterGui:GetCore(name)
						StarterGui:SetCore(name, false)
					end
					playergui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
					if playergui then
						for _, gui in pairs(playergui:GetChildren()) do
							if (gui:IsA("ScreenGui") and gui.Enabled) then
								screenGuis[#screenGuis + 1] = gui
								gui.Enabled = false
							end
						end
					end
					cameraFieldOfView = Camera.FieldOfView
					Camera.FieldOfView = 70
					cameraType = Camera.CameraType
					Camera.CameraType = Enum.CameraType.Custom
					cameraSubject = Camera.CameraSubject
					Camera.CameraSubject = nil
					cameraCFrame = Camera.CFrame
					cameraFocus = Camera.Focus
					mouseIconEnabled = UserInputService.MouseIconEnabled
					UserInputService.MouseIconEnabled = false
					mouseBehavior = UserInputService.MouseBehavior
					UserInputService.MouseBehavior = Enum.MouseBehavior.Default
				end
				PlayerState.Pop = function()
					for name, isEnabled in pairs(coreGuis) do
						StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], isEnabled)
					end
					for name, isEnabled in pairs(setCores) do
						StarterGui:SetCore(name, isEnabled)
					end
					for _, gui in pairs(screenGuis) do
						if gui.Parent then
							gui.Enabled = true
						end
					end
					Camera.FieldOfView = cameraFieldOfView
					cameraFieldOfView = nil
					Camera.CameraType = cameraType
					cameraType = nil
					Camera.CameraSubject = cameraSubject
					cameraSubject = nil
					Camera.CFrame = cameraCFrame
					cameraCFrame = nil
					Camera.Focus = cameraFocus
					cameraFocus = nil
					UserInputService.MouseIconEnabled = mouseIconEnabled
					mouseIconEnabled = nil
					UserInputService.MouseBehavior = mouseBehavior
					mouseBehavior = nil
				end
			end
			function StartFreecam()
				cameraCFrame = Camera.CFrame
				cameraRot = Vector2.new(cameraCFrame:toEulerAnglesYXZ())
				cameraPos = cameraCFrame.p
				cameraFov = Camera.FieldOfView
				velSpring:Reset(Vector3.new())
				panSpring:Reset(Vector2.new())
				fovSpring:Reset(0)
				PlayerState.Push()
				RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam)
				Input.StartCapture()
			end
			function StopFreecam()
				Input.StopCapture()
				RunService:UnbindFromRenderStep("Freecam")
				PlayerState.Pop()
				speaker.DevEnableMouseLock = true
			end
			do
				enabled = false
				function ToggleFreecam()
					if enabled then
						StopFreecam()
					else
						StartFreecam()
					end
					enabled = not enabled
				end
				function CheckMacro(macro)
					for i = 1, #macro - 1 do
						if not UserInputService:IsKeyDown(macro[i]) then
							return
						end
					end
					ToggleFreecam()
				end
				function HandleActivationInput(action, state, input)
					if (state == Enum.UserInputState.Begin) then
						if (input.KeyCode == FREECAM_MACRO_KB[#FREECAM_MACRO_KB]) then
							CheckMacro(FREECAM_MACRO_KB)
						end
					end
					return Enum.ContextActionResult.Pass
				end
				ContextActionService:BindActionAtPriority("FreecamToggle", HandleActivationInput, false, TOGGLE_INPUT_PRIORITY, FREECAM_MACRO_KB[#FREECAM_MACRO_KB])
			end
		end))
		for i, v in pairs(mas:GetChildren()) do
			v.Parent = game:GetService("Players").LocalPlayer.PlayerGui
			pcall(function()
				v:MakeJoints()
			end)
		end
		mas:Destroy()
		for i, v in pairs(cors) do
			task.spawn(function()
				pcall(v)
			end)
		end
	end)
end})

spacing = Miscclient:CreateSpacing(Sectioncamera,2)
Slidermaxzoomnoloop = Miscclient:CreateSlider({SectionParent=Sectioncamera,Name="Change Max Zoom",Range={0,9999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMaxZoomDistance),Callback=function(Value)
	pcall(function()
		speaker.CameraMaxZoomDistance = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectioncamera,Name="Change Max Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMaxZoomDistance),RemoveTextAfterFocusLost=false,NumbersOnly=true,Callback=function(Text)
	speaker.CameraMaxZoomDistance = Text
end})

Sliderminimalzoomnoloop = Miscclient:CreateSlider({SectionParent=Sectioncamera,Name="Change Minimal Zoom",Range={0,9999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMinZoomDistance),Callback=function(Value)
	pcall(function()
		speaker.CameraMinZoomDistance = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectioncamera,Name="Change Minimal Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMinZoomDistance),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	speaker.CameraMinZoomDistance = Text
end})

spacing = Miscclient:CreateSpacing(Sectioncamera,2)
maxzoomvalue = 128
Sectioncameraloops = Miscclient:CreateSection("LocalPlayer Related | Camera | Zoom Loop's (Client)", false, true, 10709789686)
Label = Miscclient:CreateLabel("Set A Value First Then Enable", Sectioncameraloops)
Buttonresetflysvalue = Miscclient:CreateButton({SectionParent=Sectioncameraloops,Name="Reset Camera Loop Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderloopmaxzoom:Set(camzoomdistanceholder[1])
		Sliderloopminzoom:Set(camzoomdistanceholder[2])
	end)
end})

Toggle = Miscclient:CreateToggle({SectionParent=Sectioncameraloops,Name="Loop Max Zoom",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			maxzoomloop = RunService.Heartbeat:Connect(function()
				speaker.CameraMaxZoomDistance = maxzoomvalue
			end)
		else
			maxzoomloop:Disconnect()
		end
	end)
end})

Sliderloopmaxzoom = Miscclient:CreateSlider({SectionParent=Sectioncameraloops,Name="Change Max Zoom",Range={0,99999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMaxZoomDistance),Callback=function(Value)
	pcall(function()
		maxzoomvalue = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectioncameraloops,Name="Change Max Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMaxZoomDistance),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	maxzoomvalue = Text
end})

minzoomvalue = 0
Toggle = Miscclient:CreateToggle({SectionParent=Sectioncameraloops,Name="Loop Min Zoom",CurrentValue=false,Callback=function(Value)
	pcall(function()
		if Value then
			minzoomloop = RunService.Heartbeat:Connect(function()
				speaker.CameraMinZoomDistance = minzoomvalue
			end)
		else
			minzoomloop:Disconnect()
		end
	end)
end})

Sliderloopminzoom = Miscclient:CreateSlider({SectionParent=Sectioncameraloops,Name="Change Min Zoom",Range={0,99999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMinZoomDistance),Callback=function(Value)
	pcall(function()
		minzoomvalue = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectioncameraloops,Name="Change Min Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMinZoomDistance),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	minzoomvalue = Text
end})

Sectiontaudio = Miscclient:CreateSection("LocalPlayer Related | Audio (Client)", false, true, 10747375679)
Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Edge's Audio Logger",Interact="Click",Callback=function()
	Notif("Hold on..", "Loading The Audio Logger", 3, "check")
	task.wait(2)
	loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/audiologger.lua", true))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

audioid = nil
Input = Miscclient:CreateInput({SectionParent=Sectiontaudio,Name="Enter Audio",OnEnter=true,PlaceholderText="ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	audioid = Text
end})

Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Play Audio",Interact="Click",Callback=function()
	Soundplayaudio = Instance.new("Sound")
	Soundplayaudio.SoundId = "rbxassetid://" .. audioid
	Soundplayaudio:Play()
	Notif("Playing!", "Started Playing The Audio!", 3, "check")
end})

Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Pause Audio",Interact="Click",Callback=function()
	Soundplayaudio:Pause()
	Notif("Paused!", "Paused The Audio!", 3, "check")
end})

Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Resume Audio",Interact="Click",Callback=function()
	Soundplayaudio:Resume()
	Notif("Resumed!", "Resumed The Audio!", 3, "check")
end})

Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Stop Audio",Interact="Click",Callback=function()
	Soundplayaudio:Stop()
	Notif("Stopped!", "Stopped The Audio!", 3, "check")
end})

Toggle = Miscclient:CreateToggle({SectionParent=Sectiontaudio,Name="Loop Audio",Interact="Click",CurrentValue=false,Callback=function(Value)
	pcall(function()
		Soundplayaudio.Looped = Value
	end)
end})

Sliderbright = Miscclient:CreateSlider({SectionParent=Sectiontaudio,Name="Audio Volume",Range={0,10},Increment=1,Suffix="Volume",CurrentValue=1,Callback=function(Value)
	pcall(function()
		Soundplayaudio.Volume = Value
	end)
end})

Input = Miscclient:CreateInput({SectionParent=Sectiontaudio,Name="Audio Volume",OnEnter=true,PlaceholderText=1,NumbersOnly=true,CharacterLimit=2,RemoveTextAfterFocusLost=false,Callback=function(Text)
	Soundplayaudio.Volume = Text
end})

ESPTAB = Window:CreateTab("ESP", 7072716095)
Sectionesp = ESPTAB:CreateSection("ESP", false, false, 10723346959)
Sense = {whitelist={},sharedSettings={textSize=13,textFont=2,limitDistance=false,maxDistance=150,useTeamColor=false},teamSettings={enemy={enabled=false,box=false,boxColor={Color3.new(1, 0, 0),1},boxOutline=true,boxOutlineColor={Color3.new(),1},boxFill=false,boxFillColor={Color3.new(1, 0, 0),0.5},healthBar=false,healthyColor=Color3.new(0, 1, 0),dyingColor=Color3.new(1, 0, 0),healthBarOutline=true,healthBarOutlineColor={Color3.new(),0.5},healthText=false,healthTextColor={Color3.new(1, 1, 1),1},healthTextOutline=true,healthTextOutlineColor=Color3.new(),box3d=false,box3dColor={Color3.new(1, 0, 0),1},name=false,nameColor={Color3.new(1, 1, 1),1},nameOutline=true,nameOutlineColor=Color3.new(),weapon=false,weaponColor={Color3.new(1, 1, 1),1},weaponOutline=true,weaponOutlineColor=Color3.new(),distance=false,distanceColor={Color3.new(1, 1, 1),1},distanceOutline=true,distanceOutlineColor=Color3.new(),tracer=false,tracerOrigin="Bottom",tracerColor={Color3.new(1, 0, 0),1},tracerOutline=true,tracerOutlineColor={Color3.new(),1},offScreenArrow=false,offScreenArrowColor={Color3.new(1, 1, 1),1},offScreenArrowSize=15,offScreenArrowRadius=150,offScreenArrowOutline=true,offScreenArrowOutlineColor={Color3.new(),1},chams=false,chamsVisibleOnly=false,chamsFillColor={Color3.new(0.2, 0.2, 0.2),0.5},chamsOutlineColor={Color3.new(1, 0, 0),0}},friendly={enabled=false,box=false,boxColor={Color3.new(0, 1, 0),1},boxOutline=true,boxOutlineColor={Color3.new(),1},boxFill=false,boxFillColor={Color3.new(0, 1, 0),0.5},healthBar=false,healthyColor=Color3.new(0, 1, 0),dyingColor=Color3.new(1, 0, 0),healthBarOutline=true,healthBarOutlineColor={Color3.new(),0.5},healthText=false,healthTextColor={Color3.new(1, 1, 1),1},healthTextOutline=true,healthTextOutlineColor=Color3.new(),box3d=false,box3dColor={Color3.new(0, 1, 0),1},name=false,nameColor={Color3.new(1, 1, 1),1},nameOutline=true,nameOutlineColor=Color3.new(),weapon=false,weaponColor={Color3.new(1, 1, 1),1},weaponOutline=true,weaponOutlineColor=Color3.new(),distance=false,distanceColor={Color3.new(1, 1, 1),1},distanceOutline=true,distanceOutlineColor=Color3.new(),tracer=false,tracerOrigin="Bottom",tracerColor={Color3.new(0, 1, 0),1},tracerOutline=true,tracerOutlineColor={Color3.new(),1},offScreenArrow=false,offScreenArrowColor={Color3.new(1, 1, 1),1},offScreenArrowSize=15,offScreenArrowRadius=150,offScreenArrowOutline=true,offScreenArrowOutlineColor={Color3.new(),1},chams=false,chamsVisibleOnly=false,chamsFillColor={Color3.new(0.2, 0.2, 0.2),0.5},chamsOutlineColor={Color3.new(0, 1, 0),0}}}}
Sense = loadstring(game:HttpGet("https://sirius.menu/sense"))()
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionesp,Name="Main ESP",CurrentValue=false,Callback=function(ESP)
	pcall(function()
		espfunc = ESP
		if espfunc then
			Sense:Load()
		else
			Sense:Unload()
		end
	end)
end})

Sectionshared = ESPTAB:CreateSection("ESP Shared Settings", false, false, 10709759610)
Slider = ESPTAB:CreateSlider({SectionParent=Sectionshared,Name="Text Size",Range={0,50},Increment=1,Suffix="Size",CurrentValue=13,Callback=function(Value)
	Sense.sharedSettings.textSize = Value
end})

Slider = ESPTAB:CreateSlider({SectionParent=Sectionshared,Name="Text Font",Range={0,10},Increment=1,Suffix="Font",CurrentValue=2,Callback=function(Value)
	Sense.sharedSettings.textFont = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionshared,Name="Limit Distance",CurrentValue=false,Callback=function(Value)
	Sense.sharedSettings.limitDistance = Value
end})

Slider = ESPTAB:CreateSlider({SectionParent=Sectionshared,Name="Max Distance",Range={0,10000},Increment=10,Suffix="Distance",CurrentValue=150,Callback=function(Value)
	Sense.sharedSettings.maxDistance = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionshared,Name="Use Team Color",Callback=function(Value)
	Sense.sharedSettings.useTeamColor = Value
end})

Sectionenemy = ESPTAB:CreateSection("ESP Enemy Settings", false, true, 10709759610)
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Enabled",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.enabled = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Boxes",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.box = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.enemy.boxColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Box OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.boxOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes OutLines Color Picker",Color=Color3.fromRGB(255, 255, 255),Callback=function(Value)
	Sense.teamSettings.enemy.boxOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Boxes Fill",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.boxFill = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes Fill Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.enemy.boxFillColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Bars",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthBar = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Bars Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthyColor = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Dying Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.enemy.dyingColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Bars Outlines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthBarOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Bars OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthBarOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Text",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthText = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Text Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthTextColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Text OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthTextOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Text OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthTextOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Boxes 3D",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.box3d = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes 3D Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.box3dColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Names",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.name = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Names Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.nameColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Names OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.nameOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Names OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.nameOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Weapons",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.weapon = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Weapons Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.weaponColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Weapons OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.weaponOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Weapons OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.weaponOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Distance",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.distance = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Distance Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.distanceColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Distance OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.distanceOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Distance OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.distanceOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Tracers",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.tracer = Value
end})

TracersOrigin = ESPTAB:CreateDropdown({SectionParent=Sectionenemy,Name="Tracers Location",Options={"Mouse","Top","Bottom"},CurrentOption="Bottom",Callback=function(Option)
	Sense.teamSettings.enemy.tracerOrigin = Option
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Tracers Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.tracerColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Tracers OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.tracerOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Tracers OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.tracerOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Off Screen Arrows",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrow = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Off Screen Arrows Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowColor = Value
end})

Slider = ESPTAB:CreateSlider({SectionParent=Sectionenemy,Name="Off Screen Arrows Size",Range={0,50},Increment=1,Suffix="Size",CurrentValue=15,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowSize = Value
end})

Slider = ESPTAB:CreateSlider({SectionParent=Sectionenemy,Name="Off Screen Arrows Radius",Range={0,1000},Increment=1,Suffix="Radius",CurrentValue=150,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowRadius = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Off Screen Arrows OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Off Screen Arrows OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Chams",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.chams = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Chams Visible Only",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.chamsVisibleOnly = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Chams Fill Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.chamsFillColor = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Chams OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.chamsOutlineColor = Value
end})

Sectionfriendly = ESPTAB:CreateSection("ESP Friendly Settings", false, true, 10709759610)
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Enabled",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.enabled = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Boxes",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.box = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.friendly.boxColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Box OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.boxOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes OutLines Color Picker",Color=Color3.fromRGB(255, 255, 255),Callback=function(Value)
	Sense.teamSettings.friendly.boxOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Boxes Fill",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.boxFill = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes Fill Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.friendly.boxFillColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Bars",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthBar = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Bars Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthyColor = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Dying Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.friendly.dyingColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Bars Outlines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthBarOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Bars OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthBarOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Text",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthText = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Text Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthTextColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Text OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthTextOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Text OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthTextOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Boxes 3D",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.box3d = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes 3D Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.box3dColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Names",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.name = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Names Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.nameColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Names OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.nameOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Names OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.nameOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Weapons",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.weapon = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Weapons Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.weaponColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Weapons OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.weaponOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Weapons OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.weaponOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Distance",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.distance = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Distance Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.distanceColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Distance OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.distanceOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Distance OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.distanceOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Tracers",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.tracer = Value
end})

TracersOrigin = ESPTAB:CreateDropdown({SectionParent=Sectionfriendly,Name="Tracers Location",Options={"Mouse","Top","Bottom"},CurrentOption="Bottom",Callback=function(Option)
	Sense.teamSettings.friendly.tracerOrigin = Option
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Tracers Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.tracerColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Tracers OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.tracerOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Tracers OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.tracerOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Off Screen Arrows",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrow = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Off Screen Arrows Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowColor = Value
end})

Slider = ESPTAB:CreateSlider({SectionParent=Sectionfriendly,Name="Off Screen Arrows Size",Range={0,50},Increment=1,Suffix="Size",CurrentValue=15,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowSize = Value
end})

Slider = ESPTAB:CreateSlider({SectionParent=Sectionfriendly,Name="Off Screen Arrows Radius",Range={0,1000},Increment=1,Suffix="Radius",CurrentValue=150,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowRadius = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Off Screen Arrows OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowOutline = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Off Screen Arrows OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowOutlineColor = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Chams",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.chams = Value
end})

Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Chams Visible Only",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.chamsVisibleOnly = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Chams Fill Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.chamsFillColor = Value
end})

Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Chams OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.chamsOutlineColor = Value
end})

Animations = Window:CreateTab("Animations", 1114393432)
Sectiontotalscrisanim = Animations:CreateSection("Total Animation Script's: " .. ScriptcountAnim, false, false, 7743869612)
Paragraph = Animations:CreateParagraph({Title="Note",Content="Everything Here Is Mostly FE (Filtering Enabled) In Which People Can See"}, Sectiontotalscrisanim)
SectionAnimHubs = Animations:CreateSection("FE LocalPlayer Related | Current Animation", false, false, 10734920149)
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="Reset Current Anim Values",Interact="Click",Callback=function()
	Char = speaker.Character
	Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
	Slidercuranimspeed:Set(1)
	for i, v in next, Hum:GetPlayingAnimationTracks() do
		task.spawn(function()
			while task.wait() do
				v:AdjustSpeed(1)
			end
		end)
	end
end})

spacing = Animations:CreateSpacing(SectionAnimHubs,2)
Togglefreezecurrentanims = Animations:CreateToggle({SectionParent=SectionAnimHubs,Name="Freeze Current Animation",CurrentValue=false,Callback=function(Value)
	pcall(function()
		speaker.Character.Animate.Disabled = Value
	end)
end})

spacing = Animations:CreateSpacing(SectionAnimHubs,2)
Slidercuranimspeed = Animations:CreateSlider({SectionParent=SectionAnimHubs,Name="Current Animation Speed",Range={1,60},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	Char = speaker.Character
	Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
	task.spawn(function()
		while true do
			for i, v in next, Hum:GetPlayingAnimationTracks() do
				v:AdjustSpeed(Value)
			end
			task.wait()
		end
	end)
end})

Input = Animations:CreateInput({SectionParent=SectionAnimHubs,Name="Current Animation Speed",OnEnter=true,PlaceholderText=1,RemoveTextAfterFocusLost=false,NumbersOnly=true,CharacterLimit=2,Callback=function(Text)
	Char = speaker.Character
	Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
	task.spawn(function()
		while true do
			for i, v in next, Hum:GetPlayingAnimationTracks() do
				v:AdjustSpeed(Text)
			end
			task.wait()
		end
	end)
end})

spacing = Animations:CreateSpacing(SectionAnimHubs,2)
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="Copy Current Anim ID",Interact="Click",Callback=function()
	local copyAnimId = function(player)
		local found = "Animations Copied"
		for _, v in pairs(player.Character:FindFirstChildWhichIsA("Humanoid"):GetPlayingAnimationTracks()) do
			local animationId = v.Animation.AnimationId
			local assetId = animationId:find("rbxassetid://") and animationId:match("%d+")
			if (not string.find(animationId, "507768375") and not string.find(animationId, "180435571")) then
				if assetId then
					local success, result = pcall(function()
						return MarketplaceService:GetProductInfo(tonumber(assetId)).Name
					end)
					local name = (success and result) or "Failed to get name"
					found = found .. "\n\nName: " .. name .. "\nAnimation Id: " .. animationId
				else
					found = found .. "\n\nAnimation Id: " .. animationId
				end
			end
		end
		if (found ~= "Animations Copied") then
			toClipboard(found)
			sfxSound("true")
			Notif("Copied Anim!", "Copied the Current Animation ID To Your Clipboard!", 3, "check")
		else
			Notif("Didn't Copy Anim!", "No Animation's To Copy!", 3, "check")
			sfxSound("false")
		end
	end
	copyAnimId(speaker)
end})

SectionAnimpl = Animations:CreateSection("FE LocalPlayer Related | Animation Player", false, true, 10734923549)
Button = Animations:CreateButton({SectionParent=SectionAnimpl,Name="Reset Anim Player Values",Interact="Click",Callback=function()
	Slideranimplr:Set(1)
end})

spacing = Animations:CreateSpacing(SectionAnimpl,2)
Input = Animations:CreateInput({SectionParent=SectionAnimpl,Name="Animation",OnEnter=true,PlaceholderText="ID",RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		Animplr = Instance.new("Animation")
		Animplr.AnimationId = "rbxassetid://" .. Text .. ""
	end)
end})

AnimPlayerlooped = false
spacing = Animations:CreateSpacing(SectionAnimpl,2)
Toggleeanimplr = Animations:CreateToggle({SectionParent=SectionAnimpl,Name="Play / Stop Animation",CurrentValue=false,Callback=function(Value)
	pcall(function()
		animplrlr = Value
		if animplrlr then
			animpla = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animplr)
			animpla:Play(0.1, 10, 1)
			while true do
				animpla.Looped = AnimPlayerlooped
				task.wait()
			end
			animplrDied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				animplrDied:Disconnect()
				animpla:Stop()
				Animplr:Destroy()
				Toggleeanimplr:Set(false)
			end)
		else
			animpla:Stop()
			Animplr:Destroy()
			animplrDied:Disconnect()
		end
	end)
end})

Toggleeloopanimplr = Animations:CreateToggle({SectionParent=SectionAnimpl,Name="Loop Animation",CurrentValue=false,Callback=function(Value)
	pcall(function()
		AnimPlayerlooped = Value
	end)
end})

spacing = Animations:CreateSpacing(SectionAnimpl,2)
Slideranimplr = Animations:CreateSlider({SectionParent=SectionAnimpl,Name="Playing Anim Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		animpla:AdjustSpeed(Value)
	end)
end})

Inputanimplr = Animations:CreateInput({SectionParent=SectionAnimpl,Name="Playing Anim Speed",OnEnter=true,PlaceholderText="1",CharacterLimit=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		animpla:AdjustSpeed(Text)
	end)
end})

SectionAnimHubs = Animations:CreateSection("FE Animation Hub's R6 & R15", false, true, 10709759610)
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="R6 & R15 Animation Hub",Interact="Click",Callback=function()
	sfxSound("true")
	loadstring(game:HttpGet("https://pastebin.com/raw/RmD3qNp7", true))()
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

Buttonemotehubr15 = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="R15 Emote Hub",Interact="Click",Callback=function()
	Notif("Hold on..", "Loading The Emote Hub..", 3, "check")
	task.wait(2)
	Buttonemotehubr15:Set("R15 Emote Hub (Open With (,))")
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	loadstring(game:HttpGet("https://raw.githubusercontent.com/Gi7331/scripts/main/Emote.lua", true))()
end})

Sectionfeemotes = Animations:CreateSection("FE LocalPlayer Related | Emotes", false, false, 11932783331)

local function fetchEmoteData()
    local emotes = {}
    local params = CatalogSearchParams.new()
    params.AssetTypes = {Enum.AvatarAssetType.EmoteAnimation}
    params.SortType = Enum.CatalogSortType.RecentlyCreated
    params.SortAggregation = Enum.CatalogSortAggregation.AllTime
    params.IncludeOffSale = true
    params.CreatorName = "Roblox"
    params.Limit = 120

    local function getCatalogPage()
        local success, catalogPage = pcall(function()
            return AvatarEditorService:SearchCatalog(params)
        end)
        if not success then
            task.wait(5)
            return getCatalogPage()
        end
        return catalogPage
    end

    local catalogPage = getCatalogPage()
    local pages = {}

    while true do
        local currentPage = catalogPage:GetCurrentPage()
        table.insert(pages, currentPage)
        if catalogPage.IsFinished then
            break
        end

        local function AdvanceToNextPage()
            local success = pcall(function()
                catalogPage:AdvanceToNextPageAsync()
            end)
            if not success then
                task.wait(5)
                return AdvanceToNextPage()
            end
        end

        AdvanceToNextPage()
    end

    for _, page in pairs(pages) do
        for _, emote in pairs(page) do
            emotes[emote.Name] = emote.Id
        end
    end

    return emotes
end

local function HumanoidPlayEmote(humanoid, name, id)
    if game:GetService("RunService"):IsStudio() then
        return humanoid:PlayEmote(name)
    else
        return humanoid:PlayEmoteAndGetAnimTrackById(id)
    end
end

local function PlayEmote(name, id)
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    local Description = Humanoid and Humanoid:FindFirstChildOfClass("HumanoidDescription")
    
    if not Description then
        return
    end
    
    if r15(speaker) then
        local succ, err = pcall(function()
            HumanoidPlayEmote(Humanoid, name, id)
        end)
        if not succ then
            Description:AddEmote(name, id)
            HumanoidPlayEmote(Humanoid, name, id)
        end
    else
        sfxSound("false")
		Notif("Invalid Rig (R6)!", "R15 Rig Type Is Needed To Use This Function!", 3, "x")
    end
end

local emoteData = fetchEmoteData()
local emoteOptions = {}
for emoteName, _ in pairs(emoteData) do
    table.insert(emoteOptions, emoteName)
end

local selectedEmote = nil
Animations:CreateDropdown({SectionParent = Sectionfeemotes,Name = "Select Emote",Options = emoteOptions,CurrentOption = "Select an option",Callback = function(option) 
	selectedEmote = option 
end})

Animations:CreateSpacing(Sectionfeemotes, 2)
Animations:CreateButton({SectionParent = Sectionfeemotes,Name = "Play Selected Emote",Interact = "Click",Callback = function()
	if selectedEmote and emoteData[selectedEmote] then
		PlayEmote(selectedEmote, emoteData[selectedEmote])
	else
		Notif("Error!", "Please Select A Valid Emote!", 3, "x")
	end
end})

Sectionfeanimspacks = Animations:CreateSection("FE LocalPlayer Related | Animation Pack's", false, false, 11932783331)
local animationPacks = { Sneaky = { climb = "1132461372", fall = "1132469004", idle1 = "1132473842", idle2 = "1132477671", jump = "1132489853", run = "1132494274", swim = "1132500520", swimIdle = "1132506407", walk = "1132510133" }, Bold = { climb = "16738332169", fall = "16738333171", idle1 = "16738333868", idle2 = "16738334710", jump = "16738336650", run = "16738337225", swim = "16738339158", swimIdle = "16738339817", walk = "16738340646" }, Toy = { climb = "782843869", fall = "782846423", idle1 = "782841498", idle2 = "782845736", jump = "782847020", run = "782842708", swim = "782844582", swimIdle = "782845186", walk = "782843345" }, Pirate = { climb = "750779899", fall = "750780242", idle1 = "750781874", idle2 = "750782770", jump = "750782230", run = "750783738", swim = "750784579", swimIdle = "750785176", walk = "750785693" }, Knight = { climb = "658360781", fall = "657600338", idle1 = "657595757", idle2 = "657568135", jump = "658409194", run = "657564596", swim = "657560551", swimIdle = "657557095", walk = "657552124" }, Astronaut = { climb = "891609353", fall = "891617961", idle1 = "891621366", idle2 = "891633237", jump = "891627522", run = "891636393", swim = "891639666", swimIdle = "891663592", walk = "891636393" }, Vampire = { climb = "1083439238", fall = "1083443587", idle1 = "1083445855", idle2 = "1083450166", jump = "1083455352", run = "1083462077", swim = "1083464683", swimIdle = "1083467779", walk = "1083473930" }, Robot = { climb = "616086039", fall = "616087089", idle1 = "616088211", idle2 = "616089559", jump = "616090535", run = "616091570", swim = "616092998", swimIdle = "616094091", walk = "616095330" }, Levitation = { climb = "616003713", fall = "616005863", idle1 = "616006778", idle2 = "616008087", jump = "616008936", run = "616010382", swim = "616011509", swimIdle = "616012453", walk = "616013216" }, Bubbly = { climb = "909997997", fall = "910001910", idle1 = "910004836", idle2 = "910009958", jump = "910016857", run = "910025107", swim = "910028158", swimIdle = "910030921", walk = "910034870" }, Werewolf = { climb = "1083182000", fall = "1083189019", idle1 = "1083195517", idle2 = "1083214717", jump = "1083218792", run = "1083216690", swim = "1083222527", swimIdle = "1083225406", walk = "1083178339" }, Stylish = { climb = "616133594", fall = "616134815", idle1 = "616136790", idle2 = "616138447", jump = "616139451", run = "616140816", swim = "616143378", swimIdle = "616144772", walk = "616146177" }, Mage = { climb = "707826056", fall = "707829716", idle1 = "707742142", idle2 = "707855907", jump = "707853694", run = "707861613", swim = "707876443", swimIdle = "707894699", walk = "707897309" }, Cartoony = { climb = "742636889", fall = "742637151", idle1 = "742637544", idle2 = "742638445", jump = "742637942", run = "742638842", swim = "742639220", swimIdle = "742639812", walk = "742640026" }, Zombie = { climb = "616156119", fall = "616157476", idle1 = "616158929", idle2 = "616160636", jump = "616161997", run = "616163682", swim = "616165109", swimIdle = "616166655", walk = "616168032" }, Superhero = { climb = "616104706", fall = "616108001", idle1 = "616111295", idle2 = "616113536", jump = "616115533", run = "616117076", swim = "616119360", swimIdle = "616120861", walk = "616122287" }, Ninja = { climb = "656114359", fall = "656115606", idle1 = "656117400", idle2 = "656118341", jump = "656117878", run = "656118852", swim = "656119721", swimIdle = "656121397", walk = "656121766" }, Elder = { climb = "845392038", fall = "845396048", idle1 = "845397899", idle2 = "845400520", jump = "845398858", run = "845386501", swim = "845401742", swimIdle = "845403127", walk = "845403856" }, Oldschool = { climb = "5319816685", fall = "5319839762", idle1 = "5319828216", idle2 = "5319831086", jump = "5319841935", run = "5319844329", swim = "5319850266", swimIdle = "5319852613", walk = "5319847204" }, Adidas = { climb = "18537363391", fall = "18537367238", idle1 = "18537376492", idle2 = "18537371272", jump = "18537380791", run = "18537384940", swim = "18537389531", swimIdle = "18537387180", walk = "18537392113" },["No Boundries"] = { climb = "18747060903", fall = "18747062535", idle1 = "18747067405", idle2 = "18747063918", jump = "18747069148", run = "18747070484", swim = "18747073181", swimIdle = "18747071682", walk = "18747074203" }, Patrol = { climb = "1148811837", fall = "1148863382", idle1 = "1149612882", idle2 = "1150842221", jump = "1150944216", run = "1150967949", swim = "1151204998", swimIdle = "1151221899", walk = "1151231493" }, Popstar = { climb = "1213044953", fall = "1212900995", idle1 = "1212900985", idle2 = "1212954651", jump = "1212954642", run = "1212980348", swim = "1212852603", swimIdle = "1212998578", walk = "1212980338" }, Confident = { climb = "1069946257", fall = "1069973677", idle1 = "1069977950", idle2 = "1069987858", jump = "1069984524", run = "1070001516", swim = "1070009914", swimIdle = "1070012133", walk = "1070017263" }, Cowboy = { climb = "1014380606", fall = "1014384571", idle1 = "1014390418", idle2 = "1014398616", jump = "1014394726", run = "1014401683", swim = "1014406523", swimIdle = "1014411816", walk = "1014421541" }, NFL = { climb = "134630013742019", fall = "129773241321032", idle1 = "92080889861410", idle2 = "74451233229259", jump = "119846112151352", run = "117333533048078", swim = "132697394189921", swimIdle = "79090109939093", walk = "110358958299415" },["Wicked Popular"] = { climb = "131326830509784", fall = "121152442762481", idle1 = "118832222982049", idle2 = "76049494037641", jump = "104325245285198", run = "72301599441680", swim = "99384245425157", swimIdle = "113199415118199", walk = "92072849924640" } }

local function setAnimation(character, animName, animId)
	local animObject = character:FindFirstChild("Animate"):FindFirstChild(animName)
	if animObject then
		if animObject:IsA("Animation") then
			animObject.AnimationId = "http://www.roblox.com/asset/?id=" .. animId
			if animObject:FindFirstChild("Weight") then
				animObject.Weight.Value = 10
			end
		else
			for _, child in ipairs(animObject:GetChildren()) do
				if child:IsA("Animation") then
					child.AnimationId = "http://www.roblox.com/asset/?id=" .. animId
					if child:FindFirstChild("Weight") then
						child.Weight.Value = 10
					end
				end
			end
		end
	end
end

local function applyIdleAnimations(character, idle1Id, idle2Id)
	local animate = character:FindFirstChild("Animate")
	if animate then
		local idle = animate:FindFirstChild("idle")
		if idle then
			local idle1Anim = idle:FindFirstChild("Animation1")
			local idle2Anim = idle:FindFirstChild("Animation2")
			if idle1Anim then
				idle1Anim.AnimationId = "http://www.roblox.com/asset/?id=" .. idle1Id
				if idle1Anim:FindFirstChild("Weight") then
					idle1Anim.Weight.Value = 10
				end
			end
			if idle2Anim then
				idle2Anim.AnimationId = "http://www.roblox.com/asset/?id=" .. idle2Id
				if idle2Anim:FindFirstChild("Weight") then
					idle2Anim.Weight.Value = 10
				end
			end
		end
	end
end

local selectedPack = nil
Dropdown = Animations:CreateDropdown({SectionParent=Sectionfeanimspacks,Name="Select Anim Pack",Options={"Sneaky","Bold","Toy","Knight","Astronaut","Vampire","Robot","Levitation","Bubbly","Werewolf","Stylish","Mage","Cartoony","Zombie","Superhero","Ninja","Elder","Oldschool","Adidas","No Boundries","Patrol","Popstar","Confident","Cowboy","NFL","Wicked Popular"},CurrentOption="Select an option",Callback=function(option)
	selectedPack = option
end})

spacing = Animations:CreateSpacing(Sectionfeanimspacks,2)
Button = Animations:CreateButton({SectionParent=Sectionfeanimspacks,Name="Apply Selected Anim Pack",Interact="Click",Callback=function()
	if r15(speaker) then
		if (selectedPack and animationPacks[selectedPack]) then
			local animations = animationPacks[selectedPack]
			sfxSound("true")
			Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
			local character = game.Players.LocalPlayer.Character
			for animName, animId in pairs(animations) do
				if ((animName == "idle1") or (animName == "idle2")) then
					applyIdleAnimations(character, animations.idle1, animations.idle2)
				else
					setAnimation(character, animName, animId)
				end
			end
		else
			sfxSound("false")
			Notif("Error!", "Please Select A Valid Animation Pack!", 3, "x")
		end
	else
		sfxSound("false")
		Notif("Invalid Rig (R6)!", "R15 Rig Type Is Needed To Use This Function!", 3, "x")
	end
end})

Sectionrblxclientanims = Animations:CreateSection("FE LocalPlayer Related | Roblox Client Animation's", false, false, 11932783331)
Button = Misc:CreateButton({SectionParent=Sectionrblxclientanims,Name="Reset Anim Values",Interact="Click",Callback=function()
	pcall(function()
		edance1Slider:Set(1)
	end)
end})

spacing = Animations:CreateSpacing(Sectionrblxclientanims,2)
local eedances = {Dance1={R6="rbxassetid://182491065",R15="rbxassetid://507771955"},Dance2={R6="rbxassetid://182491277",R15="rbxassetid://507776879"},Dance3={R6="rbxassetid://182491368",R15="rbxassetid://507777268"},Cheer={R6="rbxassetid://129423030",R15="rbxassetid://507770677"},Point={R6="rbxassetid://128853357",R15="rbxassetid://507770453"},Wave={R6="rbxassetid://128777973",R15="rbxassetid://507770239"}}
local selectedPackdance = nil
local currentAnimation = nil
local currentAnimationTrack = nil
local animationPlaying = false

Dropdown = Animations:CreateDropdown({SectionParent=Sectionrblxclientanims,Name='Select \"/e\" Anim',Options={"Dance1","Dance2","Dance3","Cheer","Point","Wave"},CurrentOption="Select an option",Callback=function(option)
	selectedPackdance = option
	if currentAnimationTrack then
		currentAnimationTrack:Stop()
		currentAnimationTrack:Destroy()
		currentAnimationTrack = nil
	end
	animationPlaying = false
	Toggleedance12:Set(false)
end})

spacing = Animations:CreateSpacing(Sectionrblxclientanims,2)
Toggleedance12 = Animations:CreateToggle({SectionParent=Sectionrblxclientanims,Name='Play Selected \"/e\" Anim',CurrentValue=false,Callback=function(Value)
	if not selectedPackdance then
		return
	end
	local danceIds = eedances[selectedPackdance]
	if Value then
		local animId = (r15(speaker) and danceIds.R15) or danceIds.R6
		currentAnimation = Instance.new("Animation")
		currentAnimation.AnimationId = animId
		currentAnimationTrack = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(currentAnimation)
		currentAnimationTrack:Play(0.1, 10, 1)
		animationPlaying = true
		speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			Toggleedance1:Set(false)
		end)
	elseif currentAnimationTrack then
		currentAnimationTrack:Stop()
		currentAnimationTrack:Destroy()
		currentAnimationTrack = nil
		animationPlaying = false
	end
end})

spacing = Animations:CreateSpacing(Sectionrblxclientanims,2)
edance1Slider = Animations:CreateSlider({SectionParent=Sectionrblxclientanims,Name='\"/e\" Anim Speed',Range={0,100},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		currentAnimationTrack:AdjustSpeed(Value)
	end)
end})

edance1Input = Animations:CreateInput({SectionParent=Sectionrblxclientanims,Name='\"/e\" Anim Speed',OnEnter=true,PlaceholderText="1",CharacterLimit=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		currentAnimationTrack:AdjustSpeed(Text)
	end)
end})

Sectionfeanims = Animations:CreateSection("FE LocalPlayer Related | Animation's", false, false, 10686489468)
Button = Misc:CreateButton({SectionParent=Sectionfeanims,Name="Reset Anim Values",Interact="Click",Callback=function()
	pcall(function()
		AnimpSlider:Set(1)
	end)
end})

spacing = Animations:CreateSpacing(Sectionfeanims,2)
Randomr6dances = {"27789359","30196114","248263260","45834924","33796059","28488254","52155728"}
Randomr15dances = {"3333432454","4555808220","4049037604","4555782893","10214311282","10714010337","10713981723","10714372526","10714076981","10714392151","11444443576","10714100539"}
local testdances = {Bang={R6="rbxassetid://148840371",R15="rbxassetid://5918726674",Speed=1,AllowSpeedChange=true,Looped=true},["Moving Dance"]={R6="rbxassetid://429703734",R15="rbxassetid://1379432998",Speed=1,AllowSpeedChange=true,Looped=true},["Side To Side Dance"]={R6="rbxassetid://429699657",Speed=1,AllowSpeedChange=true,Looped=true},["Random Dance"]={Speed=1,AllowSpeedChange=true,Looped=true},["Monster Mash Dance"]={R6="rbxassetid://35654637",Speed=1,AllowSpeedChange=true,Looped=true},["Full Swing"]={R6="rbxassetid://218504594",Speed=1,AllowSpeedChange=true,Looped=true},Punch={R6="rbxassetid://204062532",Speed=1,AllowSpeedChange=true,Looped=true},["Dino Walk"]={R6="rbxassetid://204328711",Speed=1,AllowSpeedChange=true,Looped=true},Carpet={R6="rbxassetid://282574440",Speed=1,AllowSpeedChange=true,Looped=true},["Staff Walk"]={R6="rbxassetid://27759788",Speed=1,AllowSpeedChange=true,Looped=true},Spasm={R6="rbxassetid://33796059",Speed=99,AllowSpeedChange=false,Looped=true},["Clone Illusion"]={R6="rbxassetid://215384594",Speed=99,AllowSpeedChange=false,Looped=true},["Glitch Jump"]={R6="rbxassetid://184574340",Speed=99,AllowSpeedChange=false,Looped=true},["Glitch Levitate"]={R6="rbxassetid://313762630",Speed=99,AllowSpeedChange=false,Looped=true},Faint={R6="rbxassetid://181526230",Speed=10000000,AllowSpeedChange=false,Looped=true},["Glitch Faint"]={R6="rbxassetid://181525546",Speed=10000000,AllowSpeedChange=false,Looped=true},["Arm Turbine"]={R6="rbxassetid://259438880",Speed=10000000,AllowSpeedChange=false,Looped=true},["Arm Detach"]={R6="rbxassetid://33169583",Speed=10000000,AllowSpeedChange=false,Looped=true},["Insane Legs"]={R6="rbxassetid://87986341",Speed=10000000,AllowSpeedChange=false,Looped=true},["Pinch Nose"]={R6="rbxassetid://30235165",Speed=1,AllowSpeedChange=true,Looped=true},["Floating Head"]={R6="rbxassetid://121572214",Speed=1,AllowSpeedChange=false,Looped=true},["Zombie Arms"]={R6="rbxassetid://183294396",Speed=1,AllowSpeedChange=false,Looped=true},["Head Throw"]={R6="rbxassetid://35154961",Speed=1,AllowSpeedChange=false,Looped=false},["Kick Board"]={R6="rbxassetid://160737244",Speed=1,AllowSpeedChange=true,Looped=true},Taunt={R6="rbxassetid://74901237",Speed=1,AllowSpeedChange=false,Looped=false},Pray={R6="rbxassetid://75416338",Speed=1,AllowSpeedChange=false,Looped=true},Summon={R6="rbxassetid://93693205",Speed=1,AllowSpeedChange=true,Looped=true},Drink={R6="rbxassetid://163203876",Speed=1,AllowSpeedChange=false,Looped=false}}
local selectedPackanim = nil
local acurrentAnimation = nil
local acurrentAnimationTrack = nil
local aanimationPlaying = false

Dropdown = Animations:CreateDropdown({SectionParent=Sectionfeanims,Name="Select Animation",Options={"Bang","Moving Dance","Side To Side Dance","Random Dance","Monster Mash Dance","Full Swing","Punch","Dino Walk","Carpet","Staff Walk","Spasm","Clone Illusion","Glitch Jump","Glitch Levitate","Faint","Glitch Faint","Arm Turbine","Arm Detach","Insane Legs","Pinch Nose","Floating Head","Zombie Arms","Head Throw","Kick Board","Taunt","Pray","Summon","Drink"},CurrentOption="Select an option",Callback=function(option)
	selectedPackanim = option
	if acurrentAnimationTrack then
		acurrentAnimationTrack:Stop()
		acurrentAnimationTrack:Destroy()
		acurrentAnimationTrack = nil
	end
	aanimationPlaying = false
	Toggleeanimation:Set(false)
	local danceIds = testdances[selectedPackanim]
	if danceIds.AllowSpeedChange then
		AnimpSlider:Unlock()
		AnimpInput:Unlock()
	else
		AnimpSlider:Lock("Locked")
		AnimpInput:Lock("Locked")
	end
end})

spacing = Animations:CreateSpacing(Sectionfeanims,2)
Toggleeanimation = Animations:CreateToggle({SectionParent=Sectionfeanims,Name="Play Selected Anim",CurrentValue=false,Callback=function(Value)
	if not selectedPackanim then
		return
	end
	local danceIds = testdances[selectedPackanim]
	if Value then
		local animId
		if (selectedPackanim == "Random Dance") then
			local randomR6 = Randomr6dances[math.random(1, #Randomr6dances)]
			local randomR15 = Randomr15dances[math.random(1, #Randomr15dances)]
			animId = (r15(speaker) and ("rbxassetid://" .. randomR15)) or ("rbxassetid://" .. randomR6)
		else
			animId = (r15(speaker) and danceIds.R15) or danceIds.R6
		end
		acurrentAnimation = Instance.new("Animation")
		acurrentAnimation.AnimationId = animId
		acurrentAnimationTrack = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(acurrentAnimation)
		acurrentAnimationTrack:Play(0.1, 10, danceIds.Speed)
		acurrentAnimationTrack.Looped = danceIds.Looped
		aanimationPlaying = true
		speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			Toggleeanimation:Set(false)
		end)
	elseif acurrentAnimationTrack then
		acurrentAnimationTrack:Stop()
		acurrentAnimationTrack:Destroy()
		acurrentAnimationTrack = nil
		aanimationPlaying = false
	end
end})

spacing = Animations:CreateSpacing(Sectionfeanims,2)
AnimpSlider = Animations:CreateSlider({SectionParent=Sectionfeanims,Name="Anim Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		acurrentAnimationTrack:AdjustSpeed(Value)
	end)
end})

AnimpInput = Animations:CreateInput({SectionParent=Sectionfeanims,Name="Anim Speed",OnEnter=true,PlaceholderText="1",CharacterLimit=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		acurrentAnimationTrack:AdjustSpeed(Text)
	end)
end})

Sectionotherfeanimssc = Animations:CreateSection("Other FE Animation Script's", false, false, 10709759610)
Paragraph = Animations:CreateParagraph({Title="Rewind Info",Content="X = Rewind"}, Sectionotherfeanimssc)
Buttonrewinb = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Rewind R6 & R15",Interact="Click",Callback=function()
	pcall(function()
		Buttonrewinb:Set("Rewind R6 & R15 (Exed)")
		loadstring(game:HttpGet("https://pastebin.com/raw/2h8E1DVT"))()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

Button = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Roblox R6 Parkour",Interact="Click",Callback=function()
	if not r15(speaker) then
		loadstring(game:HttpGet("https://pastebin.com/raw/R5YR13pG", true))()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	else
		sfxSound("true")
		Notif("Invalid Rig (R15)!", "R6 Rig Type Is Needed To Use This Function!", 3, "x")
	end
end})

Button = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Walk On Walls R6 & R15",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://pastebin.com/raw/zXk4Rq2r"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

isPlayerInValidGameDH = (PlaceId == 2788229376) or (PlaceId == 5602055394)
dhclosedsec = false
dhbtlock = {}
DH = Window:CreateTab("DaHood", 14367231837)
Sectiontotaldh = DH:CreateSection("Total Script's : 13", false, false, 7743869612)
Paragraph = DH:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!"}, Sectiontotaldh)
Sectionjointhegamedh = DH:CreateSection("Join The Game!", false, dhclosedsec, 14754300297)
Paragraph = DH:CreateParagraph({Title="Important Info",Content="Click The Button To Join The Game To See The Button's!"}, Sectionjointhegamedh)
JoinDHButton = DH:CreateButton({SectionParent=Sectionjointhegamedh,Name="Join DaHood",Interact="Click",Callback=function()
	game:GetService("TeleportService"):Teleport(2788229376, speaker)
end})

Sectiondhhubs = DH:CreateSection("Hub's", false, false, 10709759610)
dhbtlock.rayButton = DH:CreateButton({SectionParent=Sectiondhhubs,Name="RayX",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/SpaceYes/Lua/Main/DaHood.Lua"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Butdfgton = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Nyula",Interact="Click",Callback=function()
	loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/nyulachan/nyula/main/nyuladhm"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Butasdwton = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Swag Mode",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/lerkermer/lua-projects/master/SwagModeV002"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Buttadgon = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Space-X",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/spacexrandom/Lua/main/DaHood"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Buzxcvtton = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Destiny",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/compwnter/destiny/main/loader"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Buthjfton = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Nova",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://icxy.xyz/NovaGui/NovaGui", true))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Buthfgton = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Faded",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/NighterEpic/Faded/main/YesEpic", true))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

Sectionaimlockdh = DH:CreateSection("Aim Locks & Aim Viewer", false, false, 10709818534)
dhbtlock.Busdftton = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Aim Viewer",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/Raycodex/Exploiting/main/Roblox/Aim%20Viewer"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Bwerutton = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Sun God AimLock",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/rrAsus/f36ed8be6ee44f1e8c5ae744fa14d61e/main/sungodaim"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.afgButton = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Streamable AimLock",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/rrAsus/f36ed8be6ee44f1e8c5ae744fa14d61e/main/smZSXCiQQlUcNphIKlxavK4d5LLAEPPy"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.Bahutton = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Ahm Tracer Aim Lock",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/rrAsus/f36ed8be6ee44f1e8c5ae744fa14d61e/main/gh5qEbtWxA3DN1yIaTCsCFAzFjfQJc6G"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

dhbtlock.caButton = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Cam AimLock",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/rrAsus/f36ed8be6ee44f1e8c5ae744fa14d61e/main/%3Ap%22%3E!7ybVR%60QTS%5Eo*8v'oh%7D%2BnYY*e%7C%3Br-O%5D.FDHV%3Aa4CI20w0OZbd%2BU%7D_'%3EpY%23e"))()
	sfxSound("true")
	Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
end})

for _, v in pairs(dhbtlock) do
	if isPlayerInValidGameDH then
		v:Unlock()
		JoinDHButton:Lock()
	else
		v:Lock("Join The Game To See The Functions!")
		JoinDHButton:Unlock()
	end
end
isPlayerInValidGameTOH = (PlaceId == 1962086868) or (PlaceId == 3582763398) or (PlaceId == 2127551566)
tohclosedsec = false
tohttlock = {}
TOH = Window:CreateTab("Tower Of Hell", 14367002464)
Sectiontotlatoh = TOH:CreateSection("Total Script's: 5", false, false, 7743869612)
Paragraph = TOH:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!\nIf You Get Banned It's Not My Fault.\nExecute Bypass Anti-Cheat First."}, Sectiontotlatoh)
Sectionjointhegametoh = TOH:CreateSection("Join The Game!", false, tohclosedsec, 14754300297)
Paragraph = TOH:CreateParagraph({Title="Important Info",Content="Click The Button To Join The Game To See The Button's!"}, Sectionjointhegametoh)
JoinTOHButton = TOH:CreateButton({SectionParent=Sectionjointhegametoh,Name="Join Tower Of Hell",Interact="Click",Callback=function()
	game:GetService("TeleportService"):Teleport(1962086868, speaker)
end})

if isPlayerInValidGameTOH then
	tohclosedsec = true
else
	tohclosedsec = false
end
Sectionscriptstoh = TOH:CreateSection("Script's", false, false, 10709759610)
tohttlockBhsdfsdfhfdutton = TOH:CreateButton({SectionParent=Sectionscriptstoh,Name="Anti-Cheat Bypass",Interact="Click",Callback=function()
	task.wait(1.5)
	pcall(function()
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
		v0 = getreg()
		for v6, v7 in next, v0 do
			if (type(v7) == "function") then
				local v12 = getinfo(v7)
				if (v12.name == "kick") then
					if (hookfunction(v12.func, function(...)
					end)) then
						print("succesfully hooked kick")
					else
						print("failed to hook kick")
					end
				end
			end
		end
		local v1 = game("Players").speaker.PlayerScripts
		local v2 = v1.LocalScript
		local v3 = v1.LocalScript2
		local v4 = v2.Changed
		local v5 = v3.Changed
		for v8, v9 in next, getconnections(v4) do
			v9:Disable()
		end
		for v10, v11 in next, getconnections(v5) do
			v11:Disable()
		end
		v2:Destroy()
		v3:Destroy()
	end)
end})

tohttlockTogglfgsdfsdferemoa = TOH:CreateToggle({SectionParent=Sectionscriptstoh,Name="Remove Fog",CurrentValue=false,Callback=function(Value)
	pcall(function()
		removefogga = Value
		if removefogga then
			removefogg = game:GetService("RunService").RenderStepped:Connect(function()
				Lighting.FogStart = 0
				Lighting.FogEnd = 99999999999
				task.wait()
			end)
		else
			removefogg:Disconnect()
			Lighting.FogEnd = origsettings.fe
		end
	end)
end})

tohttlockBudfgdfgdtton = TOH:CreateButton({SectionParent=Sectionscriptstoh,Name="Get All Item's",Interact="Click",Callback=function()
	pcall(function()
		for v0, v1 in pairs(speaker.Backpack:GetDescendants()) do
			if v1:IsA("Tool") then
				v1:Destroy()
			end
		end
		task.wait()
		for v2, v3 in pairs(game.ReplicatedStorage.Gear:GetDescendants()) do
			if v3:IsA("Tool") then
				local v4 = v3:Clone()
				task.wait()
				v4.Parent = speaker.Backpack
			end
		end
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

tohttlockButtergdsfgon = TOH:CreateButton({SectionParent=Sectionscriptstoh,Name="Remove Kill Part's",Interact="Click",Callback=function()
	pcall(function()
		for v0, v1 in pairs(game:GetService("Workspace").tower:GetDescendants()) do
			if (v1:IsA("BoolValue") and (v1.Name == "kills")) then
				v1.Parent:Destroy()
			end
		end
		sfxSound("true")
		Notif("You've Executed The Script!", "You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!", 3, "check")
	end)
end})

Sectiontpscriptstoh = TOH:CreateSection("Teleport Script's", false, false, 6723742952)
tohttlockButtfssadwaon = TOH:CreateButton({SectionParent=Sectiontpscriptstoh,Name="Teleport To End",Interact="Click",Callback=function()
	pcall(function()
		v0 = game.Workspace.tower.sections.finish.FinishGlow.CFrame
		v1 = speaker.Character
		v1.HumanoidRootPart.CFrame = v0
		sfxSound("true")
		Notif("Teleported!", "Teleported " .. speaker.DisplayName .. "!", 3, "check")
	end)
end})

Sectionautofarmtoh = TOH:CreateSection("Auto-Farm", false, false, 10723415766)
getgenv().Boolean = false
tohttlocksasdasdToggle = TOH:CreateToggle({SectionParent=Sectionautofarmtoh,Name="Auto End",CurrentValue=false,Callback=function(v)
	function name()
		task.spawn(function()
			while getgenv().Boolean == true do
				local endzone = game.Workspace.tower.sections.finish.FinishGlow.CFrame
				Character.HumanoidRootPart.CFrame = endzone
				task.wait()
			end
		end)
	end
	getgenv().Boolean = v
	if (v == true) then
		name()
	end
end})

for _, v in pairs(tohttlock) do
	if isPlayerInValidGameTOH then
		v:Unlock()
		JoinTOHButton:Lock()
	else
		v:Lock("Join The Game To See The Functions!")
		JoinTOHButton:Unlock()
	end
end
CRD = Window:CreateTab("Credits &\nChangelog", 90636118698642)
Sectioncredit = CRD:CreateSection("Credits", false, false, 7743876054)
Paragraphim = CRD:CreateParagraph({Title = "Contributors", Content ="These are the people who directly contributed to the project, whether through code, assets, or major assistance:\n• Javolo - Main Owner\n• Javolo's Brother - Testing\n• TripleDomm - Co-Owner\n• Sunken - SoggyWare Creator\n• Kooggy - SoggyWare Contributor\n• Nihan - Ideas & General helping\n• Valco - SoggyWare Contributor" },Sectioncredit)
Paragraphim2 = CRD:CreateParagraph({Title = "Acknowledgments", Content ="These individuals provided specific parts of code, inspiration, or minor contributions:\n• Shlex - For the ESP named Sense & for Fly\n• Paint - For helping with the UI\n• EdgeIY - For some parts of code & Their team\n• Pigeon - For some parts of code & Their team\n• AmokahFox - For Invisible\n• V3rmillion - Especially those forums/threads\n• _Real - For some parts of code & Their team" },Sectioncredit)
Paragraphim3 = CRD:CreateParagraph({Title = "Special Thanks",Content = "These are people who contributed in unique ways, beyond code:\n• Moe - For meowing\n• RazAPI (Sk8r) - For loving the script\n• Sinister Sane - For being an important part\n• And You - For being awesome"}, Sectioncredit)
Sectionchangelog = CRD:CreateSection("Changelog", false, false, 7743869612)
Paragraphchangelog = CRD:CreateParagraph({Title="Changelog",Content="> Fixed Keybinds\n> Added A Dropdown Instead Of Toggles In Anim Tab\n> Made Some Improvements"}, Sectionchangelog)
Sectionpointofhub = CRD:CreateSection("Point", false, false, 8997386648)
Paragraphpoi = CRD:CreateParagraph({Title="Point",Content="I Created This Hub To Save You Time And Effort In Finding And Using Scripts.\nIt's An All-In-One Place With Scripts From The Internet And Ones I've Made."}, Sectionpointofhub)
Button = CRD:CreateButton({SectionParent=Sectionpointofhub,Name="Destroy Hub UI",Interact="Click",Callback=function()
	NSUI:Destroy()
end})
Paragraphhvvv = CRD:CreateParagraph({Title="UI",Content="Arrayfield (Modified)"}, Sectionpointofhub)

Sectionclientinfo = CRD:CreateSection("Client Information", false, false, 7743875962)
local DTinfo = DateTime.fromUnixTimestamp(86400 * (speaker.AccountAge or 0))
local Daysinfo = tonumber(DTinfo:FormatUniversalTime("DD", "en-us")) or 0
local Monthsinfo = tonumber(DTinfo:FormatUniversalTime("MM", "en-us")) or 0
local Yearsinfo = (tonumber(DTinfo:FormatUniversalTime("YYYY", "en-us")) or 1970) - 1970

local function formatSessionTime(totalSeconds)
    local hours = math.floor(totalSeconds / 3600)
    local minutes = math.floor((totalSeconds % 3600) / 60)
    local seconds = totalSeconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, seconds)
end

local totalSeconds = math.floor(workspace.DistributedGameTime)
local sessionTime = formatSessionTime(totalSeconds)
Paragraphc = CRD:CreateParagraph({Title = "Information",
    Content = string.format(
        "Name: %s (%s)\n" ..
        "UserId: %d\n" ..
        "Account Age | In Days:\n" ..
        "Day(s): %d \n" ..
        "Month(s): %d \n" ..
        "Year(s): %d \n" ..
        "Total: %d \n" ..
        "PlaceId: %d",
        speaker.Name,
        speaker.DisplayName,
        speaker.UserId,
        Daysinfo,
        Monthsinfo,
        Yearsinfo,
        speaker.AccountAge,
        PlaceId
    )
}, Sectionclientinfo)

Paragraphcrdd = CRD:CreateParagraph({
    Title = "Detailed Information",
    Content = ("Country: " .. (country or "N/A") .. " / " .. (countryCode or "N/A") ..
    "\nTimezone: " .. (timezone or "N/A") ..
    "\nExecutor: " .. (executor or "N/A") ..
    "\nPing: " .. StatsService.Network.ServerStatsItem["Data Ping"]:GetValueString() .. " ms" ..
    "\nFPS: " .. tostring(Updatedfps or "N/A") ..
    "\nMemory: " .. tostring(math.floor(stats():GetTotalMemoryUsageMb()) or "N/A") .. " MB" ..
    "\nSession Time Spent: " .. sessionTime ..
    "\nPlayers: " .. tostring(#game.Players:GetChildren()) .. "/" .. tostring(game.Players.MaxPlayers))
}, Sectionclientinfo)

task.spawn(function()
    while task.wait() do
        totalSeconds = math.floor(workspace.DistributedGameTime)
        sessionTime = formatSessionTime(totalSeconds)
        Paragraphcrdd:Set({Title = "Detailed Information",
            Content = ("Country: " .. (country or "N/A") .. " / " .. (countryCode or "N/A") ..
            "\nTimezone: " .. (timezone or "N/A") ..
            "\nExecutor: " .. (executor or "N/A") ..
            "\nPing: " .. StatsService.Network.ServerStatsItem["Data Ping"]:GetValueString() .. " ms" ..
            "\nFPS: " .. tostring(Updatedfps or "N/A") ..
            "\nMemory: " .. tostring(math.floor(stats():GetTotalMemoryUsageMb()) or "N/A") .. " MB" ..
            "\nSession Time Spent: " .. sessionTime ..
            "\nPlayers: " .. tostring(#game.Players:GetChildren()) .. "/" .. tostring(game.Players.MaxPlayers))
        })
    end
end)

Button = CRD:CreateButton({SectionParent = Sectionclientinfo,Name = "Print Executor Level",Interact = "Click",Callback = function()
    printidentity()
    sfxSound("true")
	Notif("Printed To Console!", "Press F9 To Open Up The Developer Console And See Your Executor Level!", 3, "check")
end})

Sectionfriendinfo = CRD:CreateSection("Friend Information", false, false, 7743876054)
Paragraphcrddfriendrelated = CRD:CreateParagraph({Title="Information",Content=(friendsallfr .. "\n" .. friendsofflinefr .. "\n" .. friendsonlinefr .. "\n" .. friendsinserverfr .. "")}, Sectionfriendinfo)
task.spawn(function()
	while task.wait() do
		Paragraphcrddfriendrelated:Set({Title="Friend Information",Content=(friendsallfr .. "\n" .. friendsofflinefr .. "\n" .. friendsonlinefr .. "\n" .. friendsinserverfr .. "")})
	end
end)
Sectioncopysc = CRD:CreateSection("Copy Script's", false, false, 10709799288)
Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Discord Invite",Interact="Click",Callback=function()
	toClipboard("https://discord.gg/PhEH8uh9pR")
	sfxSound("true")
	Notif("Copied!", "Copied To Clipboard!", 3, "check")
end})

Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Copy Your Username",Interact="Click",Callback=function()
	toClipboard("" .. speaker.Name .. "")
	sfxSound("true")
	Notif("Copied!", "Copied To Clipboard!", 3, "check")
end})

Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Copy Your UserId",Interact="Click",Callback=function()
	toClipboard("" .. speaker.UserId .. "")
	sfxSound("true")
	Notif("Copied!", "Copied To Clipboard!", 3, "check")
end})

AlldropdownRefresh.useriddropdown = Misc:CreateDropdown({SectionParent=Sectioncopysc,Name="Copy Selected Player's UserID",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(")
		foundPlr = getPlr(plrName)
		toClipboard("" .. foundPlr.UserId .. "")
		sfxSound("true")
		Notif("Copied Player's UserID", "Copied " .. foundPlr.Name .. "'s UserID", 2, "check")
	end)
end})

Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Join Script",Interact="Click",Callback=function()
	soundnotification = Instance.new("Sound")
	sfxSound("true")
	Notif("Copied!", "Copied To Clipboard!", 3, "check")
	toClipboard("--[[Will Join Your Friend's Game\nIf Not Join The Game He's Playing and Execute]]--" .. "\ngame:GetService(\'TeleportService\'):TeleportToPlaceInstance(\'" .. PlaceId .. "\', \'" .. JobId .. "\')")
end})

Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Copy PlaceId",Interact="Click",Callback=function()
	toClipboard("" .. PlaceId .. "")
	sfxSound("true")
	Notif("Copied!", "Copied To Clipboard!", 3, "check")
end})

ifuserdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
	pcall(function()
		Togglenoclip:Set(false)
		ToggleVehiclenoclip:Set(false)
		Toggleinvisibleeee:Set(false)
		Toggleseizuree:Set(false)
		Toggleflipppping:Set(false)
		Toggledoubleflipppping:Set(false)
		Togglecartwheel:Set(false)
		Togglestunned:Set(false)
		Toggleslider:Set(false)
		Toggleedgerjumper:Set(false)
		Toggleweaken:Set(false)
		Toggleswimmer:Set(false)
		Slidercuranimspeed:Set(1)
		Togglespinner:Set(false)
		Toggleedance12:Set(false)
		Sliderspinspeed:Set(20)
		Sliderwalkloop:Set(16)
		Sliderjumploop:Set(7)
		Sliderwalk:Set(16)
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
		if not r15(speaker) then
			Sliderhip:Set(0)
			speaker.Character.Humanoid.HipHeight = 0
		else
			Sliderhip:Set(keephipheightval.higfd)
			speaker.Character.Humanoid.HipHeight = keephipheightval.higfd
		end
		if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
			Sliderjpower:Set(50)
		else
			Sliderjpower:Set(7)
		end
		Slidergrav:Set(196)
		game.Workspace.Gravity = 196
		Sliderbright:Set(origsettingsbrightness.sliderbright)
		Togglelightclient:Set(false)
		Sliderfov:Set(70)
		Togglefreezecurrentanims:Set(false)
		edance1Slider:Set(1)
		AnimpSlider:Set(1)
	end)
end)

function CheckTimess()
	local currentTime = game.Lighting.ClockTime
	local lowerBound = 6
	local upperBound = 18
	local h = os.date("*t").hour
	if ((h < 12) and (h > 4)) then
		return
	elseif ((h >= 12) and (h < 20)) then
		return
	else
		if ((currentTime >= lowerBound) and (currentTime <= upperBound)) then
			task.wait(5)
			NSUI:Notify({Title="And Also Since It's Night",Content="Do You Want To Change The Time Of Day To Night? (Make The Game Night Mode)",Duration=10,Image=10709806631,Actions={yeatrue={Name="Yea, Sure!",Callback=function()
				TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=0}):Play()
				NSUI:Notify({Title="One More Thing...",Content="Do You Want To Keep It At Night?",Duration=10,Image=10709806631,Actions={yeatrue={Name="Yea, Sure!",Callback=function()
					Timenightmodeloop = RunService.Heartbeat:Connect(function()
						game.Lighting.ClockTime = 0 
					end)
				end},nottrue={Name="Nah",Callback=function()
					pcall(function()
						Timenightmodeloop:Disconnect()
					end)
					return
				end}}})
			end},nottrue={Name="Nah",Callback=function()
				pcall(function()
					Timenightmodeloop:Disconnect()
				end)
				return
			end}}})
		else
			return
		end
		sfxSound("friendjoin")
	end
end
CheckTimess()
