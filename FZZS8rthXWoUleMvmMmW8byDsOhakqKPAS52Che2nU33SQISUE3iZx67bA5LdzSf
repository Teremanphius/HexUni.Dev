if not game:IsLoaded() then
	game.Loaded:Wait();
end
getgenv().SecureMode = true;
RunService = game:GetService("RunService");
NSUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/rrAsus/NSUI/main/main.lua"))();
speaker = game.Players.LocalPlayer;
Character = speaker.Character or speaker.CharacterAdded:Wait();
LocalPlayer = speaker;
speakers = game:GetService("Players");
Players = speakers;
humanoid = Character:FindFirstChildOfClass("Humanoid");
Humanoid = humanoid;
Workspace = game:GetService("Workspace");
UserInputService = game:GetService("UserInputService");
TweenService = game:GetService("TweenService");
HttpService = game:GetService("HttpService");
TeleportService = game:GetService("TeleportService");
StarterGui = game:GetService("StarterGui");
GuiService = game:GetService("GuiService");
Lighting = game:GetService("Lighting");
ContextActionService = game:GetService("ContextActionService");
NetworkClient = game:GetService("NetworkClient");
ReplicatedStorage = game:GetService("ReplicatedStorage");
SoundService = game:GetService("SoundService");
StarterPlayer = game:GetService("StarterPlayer");
InsertService = game:GetService("InsertService");
ChatService = game:GetService("Chat");
ProximityPromptService = game:GetService("ProximityPromptService");
StatsService = game:GetService("Stats");
MaterialService = game:GetService("MaterialService");
AvatarEditorService = game:GetService("AvatarEditorService");
GameSettings = UserSettings():GetService("UserGameSettings");
JMouse = speaker:GetMouse();
oldgrav = workspace.Gravity;
swimbeat = nil;
Camera = workspace.CurrentCamera;
a = game:HttpGet("http://ip-api.com/json/");
b = game:GetService("HttpService"):JSONDecode(a);
country = b.country;
countryCode = b.countryCode;
c = game:HttpGet("http://worldtimeapi.org/api/ip");
d = game:GetService("HttpService"):JSONDecode(c);
timezone = d.timezone;
executor = identifyexecutor();
HumanModCons = {};
noVoid = false;
sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop;
gethidden = gethiddenproperty or get_hidden_property or get_hidden_prop;
queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport);
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request;
PlaceId, JobId = game.PlaceId, game.JobId;
Scriptcount = "191";
ScriptcountAnim = "61";
function getRoot(char)
	local rootPart = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso");
	return rootPart;
end
function randomString()
	length = math.random(10, 20);
	array = {};
	for i = 1, length do
		array[i] = string.char(math.random(32, 126));
	end
	return table.concat(array);
end
function isNumber(str)
	if ((tonumber(str) ~= nil) or (str == "inf")) then
		return true;
	end
end
function charresettopos()
	prev = speaker.Character:WaitForChild("HumanoidRootPart").CFrame;
	speaker.Character.Parent = workspace.Terrain;
	speaker.Character:BreakJoints();
	game:GetService("Workspace"):WaitForChild(speaker.Name);
	speaker.Character:WaitForChild("HumanoidRootPart").CFrame = prev;
end
function toClipboard(String)
	local clipBoard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set);
	if clipBoard then
		clipBoard(String);
	else
	end
end
function notifyyw(String, String2, Durationnn, Imageee)
	NSUI:Notify({Title=String,Content=String2,Duration=Durationnn,Image=Imageee});
end
function r15(plr)
	if (plr.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15) then
		return true;
	end
end
function breakvelocity()
	BeenASecond, V3 = false, Vector3.new(0, 0, 0);
	delay(1, function()
		BeenASecond = true;
	end);
	while not BeenASecond do
		for _, v in ipairs(speaker.Character:GetDescendants()) do
			if v.IsA(v, "BasePart") then
				v.Velocity, v.RotVelocity = V3, V3;
			end
		end
		task.wait();
	end
end
function getTorso(x)
	x = x or speaker.Character;
	return x:FindFirstChild("Torso") or x:FindFirstChild("UpperTorso") or x:FindFirstChild("LowerTorso") or x:FindFirstChild("HumanoidRootPart");
end
function getPlr(name)
	x = nil;
	for i, v in next, game:GetService("Players"):GetPlayers() do
		if string.find(v.Name:lower(), name:lower()) then
			x = v;
			break;
		end
	end
	return x;
end
function effecttrue()
	soundnotificationtrue = Instance.new("Sound");
	soundnotificationtrue.SoundId = "rbxassetid://1555493683";
	soundnotificationtrue.Looped = false;
	soundnotificationtrue.Volume = 0.65;
	soundnotificationtrue.Parent = workspace;
	soundnotificationtrue:Play();
end
function effectfalse()
	soundnotificationfalse = Instance.new("Sound");
	soundnotificationfalse.SoundId = "rbxassetid://1555324499";
	soundnotificationfalse.Looped = false;
	soundnotificationfalse.Volume = 0.65;
	soundnotificationfalse.Parent = workspace;
	soundnotificationfalse:Play();
end
function CheckFriends()
	friendsId = speaker.UserId;
	PlayersFriends = {};
	success, page = pcall(function()
		return speakers:GetFriendsAsync(friendsId);
	end);
	if success then
		repeat
			info = page:GetCurrentPage();
			for i, friendInfo in pairs(info) do
				table.insert(PlayersFriends, friendInfo);
			end
			if not page.IsFinished then
				page:AdvanceToNextPageAsync();
			end
		until page.IsFinished 
	end
	FriendsInTotal = 0;
	OnlineFriends = 0;
	FriendsInGame = 0;
	for i, v in pairs(PlayersFriends) do
		FriendsInTotal = FriendsInTotal + 1;
		if v.IsOnline then
			OnlineFriends = OnlineFriends + 1;
		end
		if game.Players:FindFirstChild(v.Username) then
			FriendsInGame = FriendsInGame + 1;
		end
	end
	friendsallfr = tostring(FriendsInTotal) .. " Friend's In Total";
	friendsofflinefr = tostring(FriendsInTotal - OnlineFriends) .. " Friend's Offline";
	friendsonlinefr = tostring(OnlineFriends) .. " Friend's Online";
	friendsinserverfr = tostring(FriendsInGame) .. " Friend's InGame";
end
pcall(CheckFriends);
_G.connections = {};
function effecttime()
	soundnotificationtime = Instance.new("Sound");
	soundnotificationtime.SoundId = "rbxassetid://6963032794";
	soundnotificationtime.Looped = false;
	soundnotificationtime.Volume = 0.65;
	soundnotificationtime.Parent = workspace;
	soundnotificationtime:Play();
end
function effectfriendjoin()
	soundfriendjoin = Instance.new("Sound");
	soundfriendjoin.SoundId = "rbxassetid://1862043663";
	soundfriendjoin.Looped = false;
	soundfriendjoin.Volume = 0.65;
	soundfriendjoin.Parent = workspace;
	soundfriendjoin:Play();
end
function CheckTime()
	local h = os.date("*t").hour;
	if ((h < 12) and (h > 4)) then
		NSUI:Notify({Title=("Morning, " .. speaker.DisplayName),Content="It's starting to shine!\nAnd welcome to Javolo Universal!",Duration=5,Image=NSUI:GetPlayerThumbnail(speaker.UserId, "HeadShot")});
		effecttime();
	elseif ((h >= 12) and (h < 20)) then
		NSUI:Notify({Title=("After Noon, " .. speaker.DisplayName),Content="Remember to smile!\nAnd welcome to Javolo Universal!",Duration=5,Image=NSUI:GetPlayerThumbnail(speaker.UserId, "HeadShot")});
		effecttime();
	else
		NSUI:Notify({Title=("Good Night, " .. speaker.DisplayName),Content="It's getting late...\nAnd welcome to Javolo Universal!",Duration=5,Image=NSUI:GetPlayerThumbnail(speaker.UserId, "HeadShot")});
		effecttime();
	end
end
CheckTime();
local playerAddedConnection;
local function onPlayerAdded(Player)
	if Player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
		pcall(function()
			NSUI:Notify({Title=(Player.Name .. " Joined!"),Content=(Player.Name .. " (Your Friend) Has Joined The Server."),Duration=6,Image=NSUI:GetPlayerThumbnail(Player.UserId, "HeadShot")});
			effectfriendjoin();
		end);
		task.wait(5);
		playerAddedConnection:Disconnect();
		task.wait(1);
		playerAddedConnection = game.Players.PlayerAdded:Connect(onPlayerAdded);
	end
end
playerAddedConnection = game.Players.PlayerAdded:Connect(onPlayerAdded);
QEfly = false;
flying = false;
flyysspeed = 3;
vehicleflyspeed = 3;
function sFLY(vfly)
	repeat
		wait();
	until speakers.LocalPlayer and speaker.Character and getRoot(speaker.Character) and speaker.Character:FindFirstChildOfClass("Humanoid") 
	repeat
		wait();
	until JMouse 
	if (flyKeyDown or flyKeyUp) then
		flyKeyDown:Disconnect();
		flyKeyUp:Disconnect();
	end
	local T = getRoot(speaker.Character);
	local CONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0,TiltX=0,TiltY=0};
	local lCONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0,TiltX=0,TiltY=0};
	local SPEED = 0;
	local function FLY()
		flying = true;
		local BG = Instance.new("BodyGyro");
		local BV = Instance.new("BodyVelocity");
		BG.P = 90000;
		BG.Parent = T;
		BV.Parent = T;
		BG.maxTorque = Vector3.new(8999999488, 8999999488, 8999999488);
		BG.cframe = T.CFrame;
		BV.velocity = Vector3.new(0, 0, 0);
		BV.maxForce = Vector3.new(8999999488, 8999999488, 8999999488);
		task.spawn(function()
			repeat
				wait();
				if (not vfly and speaker.Character:FindFirstChildOfClass("Humanoid")) then
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
				end
				if (((CONTROL.L + CONTROL.R) ~= 0) or ((CONTROL.F + CONTROL.B) ~= 0) or ((CONTROL.Q + CONTROL.E) ~= 0)) then
					SPEED = 50;
				elseif (not (((CONTROL.L + CONTROL.R) ~= 0) or ((CONTROL.F + CONTROL.B) ~= 0) or ((CONTROL.Q + CONTROL.E) ~= 0)) and (SPEED ~= 0)) then
					SPEED = 0;
				end
				if (((CONTROL.L + CONTROL.R) ~= 0) or ((CONTROL.F + CONTROL.B) ~= 0) or ((CONTROL.Q + CONTROL.E) ~= 0)) then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED;
					lCONTROL = {F=CONTROL.F,B=CONTROL.B,L=CONTROL.L,R=CONTROL.R};
				elseif (((CONTROL.L + CONTROL.R) == 0) and ((CONTROL.F + CONTROL.B) == 0) and ((CONTROL.Q + CONTROL.E) == 0) and (SPEED ~= 0)) then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED;
				else
					BV.velocity = Vector3.new(0, 0, 0);
				end
				local tiltCFrame = CFrame.Angles(math.rad(CONTROL.TiltX), 0, math.rad(CONTROL.TiltY));
				TweenService:Create(BG, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {cframe=(workspace.CurrentCamera.CoordinateFrame * tiltCFrame)}):Play();
			until not flying 
			CONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0,TiltX=0,TiltY=0};
			lCONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0,TiltX=0,TiltY=0};
			SPEED = 0;
			BG:Destroy();
			BV:Destroy();
			if speaker.Character:FindFirstChildOfClass("Humanoid") then
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
			end
		end);
	end
	flyKeyDown = JMouse.KeyDown:Connect(function(KEY)
		if (KEY:lower() == "w") then
			CONTROL.F = (vfly and vehicleflyspeed) or flyysspeed;
			CONTROL.TiltX = -45;
		elseif (KEY:lower() == "s") then
			CONTROL.B = -((vfly and vehicleflyspeed) or flyysspeed);
			CONTROL.TiltX = 45;
		elseif (KEY:lower() == "a") then
			CONTROL.L = -((vfly and vehicleflyspeed) or flyysspeed);
			CONTROL.TiltY = 45;
		elseif (KEY:lower() == "d") then
			CONTROL.R = (vfly and vehicleflyspeed) or flyysspeed;
			CONTROL.TiltY = -45;
		elseif (QEfly and (KEY:lower() == "e")) then
			CONTROL.Q = ((vfly and vehicleflyspeed) or flyysspeed) * 2;
		elseif (QEfly and (KEY:lower() == "q")) then
			CONTROL.E = -((vfly and vehicleflyspeed) or flyysspeed) * 2;
		end
		pcall(function()
			workspace.CurrentCamera.CameraType = Enum.CameraType.Track;
		end);
	end);
	flyKeyUp = JMouse.KeyUp:Connect(function(KEY)
		if (KEY:lower() == "w") then
			CONTROL.F = 0;
			CONTROL.TiltX = 0;
		elseif (KEY:lower() == "s") then
			CONTROL.B = 0;
			CONTROL.TiltX = 0;
		elseif (KEY:lower() == "a") then
			CONTROL.L = 0;
			CONTROL.TiltY = 0;
		elseif (KEY:lower() == "d") then
			CONTROL.R = 0;
			CONTROL.TiltY = 0;
		elseif (KEY:lower() == "e") then
			CONTROL.Q = 0;
		elseif (KEY:lower() == "q") then
			CONTROL.E = 0;
		end
	end);
	FLY();
end
function NOFLY()
	flying = false;
	if (flyKeyDown or flyKeyUp) then
		flyKeyDown:Disconnect();
		flyKeyUp:Disconnect();
	end
	if speaker.Character:FindFirstChildOfClass("Humanoid") then
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
	end
	pcall(function()
		workspace.CurrentCamera.CameraType = Enum.CameraType.Custom;
	end);
end
UpdatedFPS = false;
RunService.RenderStepped:Connect(function(step)
	local fps = 1 / step;
	UpdatedFPS = math.floor(fps);
end);
local Window = NSUI:CreateWindow({Name=("Javolo Universal\t\t\t\t   " .. os.date("%H:%M")),LoadingTitle="Javolo Universal",LoadingSubtitle="By Javolo",KeySystem=false,KeySettings={Title="Javolo Key System",Subtitle="Key System",Note="If You're a Friend Then You Have The Key in Dm's",FileName=("" .. speaker.UserId .. ""),SaveKey=true,GrabKeyFromSite=false,Key={""}}});
task.spawn(function()
	while task.wait(1) do
		Window:SetTopbarTitle("Javolo Universal\t\t\t\t   " .. os.date("%H:%M"));
	end
end);
Misc = Window:CreateTab("Universal FE", 9080478424);
Sectiontotalscrismisc = Misc:CreateSection("Total Universal Script's: " .. Scriptcount, false, false, 7743869612);
Paragraphtotal = Misc:CreateParagraph({Title="General Note",Content="Section's With FE (Filtering Enabled) Can Be Seen By Other Player's\nIf a Section Has (Client) Mean's You Only Can See It.\nThe Dropdown's You See, You Can Close Them By Pressing The Arrow."}, Sectiontotalscrismisc);
SCSSectionHUBS = Misc:CreateSection("FE Script Hub's", false, false, 10709759610);
Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Infinite Yield",Interact="Click",Callback=function()
	pcall(function()
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
		loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))();
	end);
end});
Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Dex",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end);
end});
Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="CMD X",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/CMD-X/CMD-X/master/Source", true))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end);
end});
Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Sirius",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://sirius.menu/script"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end);
end});
Button = Misc:CreateButton({SectionParent=SCSSectionHUBS,Name="Nameless Admin Hub",Interact="Click",Callback=function()
	pcall(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end);
end});
Sectiontgearstools = Misc:CreateSection("FE / (Client) LocalPlayer Related Script's | Gear's", false, true, 10747383470);
Button = Misc:CreateButton({SectionParent=Sectiontgearstools,Name="Equip All Tool's",Interact="Click",Callback=function()
	for _, v in pairs(speaker.Backpack:GetChildren()) do
		v.Parent = speaker.Character;
	end
	effecttrue();
	NSUI:Notify({Title="Equipped!",Content="Equipped All Gear's / Tool's!",Duration=3,Image=7733715400});
end});
Button = Misc:CreateButton({SectionParent=Sectiontgearstools,Name="Remove Gear's",Interact="Click",Callback=function()
	for i, v in pairs(speaker.Backpack:GetChildren()) do
		if v:IsA("Tool") then
			v:Destroy();
		end
	end
	effecttrue();
	NSUI:Notify({Title="Removed!",Content="Removed Gear's",Duration=3,Image=7733715400});
end});
Togglea = Misc:CreateToggle({SectionParent=Sectiontgearstools,Name="Enable Drop Gear's",CurrentValue=false,Callback=function(Value)
	pcall(function()
		enabledropgears = Value;
		if enabledropgears then
			for i, v in pairs(speaker.Backpack:GetChildren()) do
				v.CanBeDropped = true;
			end
			speaker.Character:FindFirstChildOfClass("Tool").CanBeDropped = true;
			if not enabledropgears then
				noVoid = true;
				speaker.Character.ChildAdded:Connect(function(rg)
					if (rg:IsA("Tool") and (noVoid == true)) then
						rg:Destroy();
					end
				end);
			end
		end
	end);
end});
Sectionfeplayerelatedanti = Misc:CreateSection("FE LocalPlayer / Player Related Script's | Anti's", false, true, 10734951847);
antiflingClip = true;
Toggleantiflinng = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Fling",CurrentValue=false,Callback=function(Value)
	antiflinggg = Value;
	if antiflinggg then
		antiflingClip = false;
		function antiflingLoop()
			if ((antiflingClip == false) and (speaker.Character ~= nil)) then
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if (child:IsA("BasePart") and (child.CanCollide == true)) then
						child.CanCollide = false;
					end
				end
			end
		end
		antiflingloop2 = game:GetService("RunService").Stepped:connect(antiflingLoop);
	end
	if not antiflinggg then
		if antiflingloop2 then
			antiflingloop2:Disconnect();
		end
		antiflingClip = true;
	end
end});
Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Void",CurrentValue=false,Callback=function(Value)
	pcall(function()
		antivoidder = Value;
		if antivoidder then
			noVoid = true;
			local t = tick();
			for i, v in pairs(speaker.Backpack:GetChildren()) do
				v:SetAttribute("OwnedByLP", t);
			end
			for i, v in pairs(speaker.Character:GetChildren()) do
				if v:IsA("Tool") then
					v:SetAttribute("OwnedByLP", t);
				end
			end
			if (novoidconnections == 0) then
				novoidconnections = 1;
				speaker.Backpack.ChildAdded:Connect(function(tool)
					tool:SetAttribute("OwnedByLP", t);
				end);
				speaker.Character.ChildAdded:Connect(function(rg)
					if (rg:IsA("Tool") and (noVoid == true) and (rg:GetAttribute("OwnedByLP") ~= t)) then
						repeat
							task.wait(0.05);
							rg:Destroy();
						until rg.Parent ~= speaker.Character 
					end
				end);
				if speaker.Character:FindFirstChildOfClass("Humanoid") then
					RunService.Stepped:Connect(function()
						for i, v in pairs(speakers:GetPlayers()) do
							if ((v ~= speaker) and v.Character and not v.Character:FindFirstChildOfClass("Humanoid") and noVoid) then
								v.Character:Destroy();
							end
						end
					end);
				end
			end
		end
		if not antivoidder then
			noVoid = false;
		end
	end);
end});
local nosit = false;
Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Sit",CurrentValue=false,Callback=function(Value)
	anitisitter = Value;
	if anitisitter then
		nosit = true;
		while nosit do
			task.wait(0.1);
			if (speaker.Character.Humanoid.Sit == true) then
				task.wait(0.1);
				speaker.Character.Humanoid.Sit = false;
			end
		end
	end
	if not anitisitter then
		nosit = false;
	end
end});
local nostun = false;
Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Stun",CurrentValue=false,Callback=function(Value)
	antistun = Value;
	if antistun then
		nostun = true;
		while nostun do
			task.wait(0.1);
			if (speaker.Character.Humanoid.PlatformStand == true) then
				task.wait(0.1);
				speaker.Character.Humanoid.PlatformStand = false;
			end
		end
	end
	if not antistun then
		nostun = false;
	end
end});
Toggle = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Ragdoll",CurrentValue=false,Callback=function(Value)
	antifragdoller = Value;
	if antifragdoller then
		speaker.Character.Humanoid:SetStateEnabled(1, false);
		speaker.Character.Humanoid:SetStateEnabled(0, false);
		_G.connections['nofall'] = speaker.CharacterAdded:Connect(function(char)
			task.wait();
			Character.Humanoid:SetStateEnabled(1, false);
			Character.Humanoid:SetStateEnabled(0, false);
		end);
	end
	if not antifragdoller then
		speaker.Character.Humanoid:SetStateEnabled(1, true);
		speaker.Character.Humanoid:SetStateEnabled(0, true);
		_G.connections['nofall']:Disconnect();
		_G.connections['nofall'] = nil;
	end
end});
Togglea = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Window Afk",CurrentValue=true,Callback=function(Value)
	pcall(function()
		antiwindowafk = Value;
		if antiwindowafk then
			if not getconnections then
				effectfalse();
				NSUI:Notify({Title="Incompatible Exploit!",Content="Missing Function('s) : getconnections!",Duration=3,Image=7733715400});
				return;
			end
			for _, v in pairs(getconnections(UserInputService.WindowFocused)) do
				v:Disable();
			end
			for _, v in pairs(getconnections(UserInputService.WindowFocusReleased)) do
				v:Disable();
			end
			if not antiwindowafk then
				if not getconnections then
					effectfalse();
					NSUI:Notify({Title="Incompatible Exploit!",Content="Missing Function('s) : getconnections!",Duration=3,Image=7733715400});
					return;
				end
				for _, v in pairs(getconnections(UserInputService.WindowFocused)) do
					v:Enable();
				end
				for _, v in pairs(getconnections(UserInputService.WindowFocusReleased)) do
					v:Enable();
				end
			end
		end
	end);
end});
Togglea = Misc:CreateToggle({SectionParent=Sectionfeplayerelatedanti,Name="Anti Afk | Idle",CurrentValue=true,Callback=function(Value)
	pcall(function()
		antiafkidle = Value;
		if antiafkidle then
			local gc = getconnections or get_signal_cons;
			if gc then
				for i, v in pairs(gc(Players.LocalPlayer.Idled)) do
					if v['Disable'] then
						v['Disable'](v);
					elseif v['Disconnect'] then
						v['Disconnect'](v);
					end
				end
			else
				local vu = game:GetService("VirtualUser");
				local disableidle;
				disableidle = Players.LocalPlayer.Idled:Connect(function()
					vu:CaptureController();
					vu:ClickButton2(Vector2.new());
				end);
			end
		end
		if not antiafkidle then
			disableidle:Disconnect();
		end
	end);
end});
Sectiontpscritps = Misc:CreateSection("FE LocalPlayer / Player Related | Teleport", false, false, 6723742952);
AlldropdownRefresh = {};
gotoplayersList = {};
AlldropdownRefresh.gotodropdown = Misc:CreateDropdown({SectionParent=Sectiontpscritps,Name="Teleport to / Goto",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		Character:PivotTo(foundPlr.Character:GetPivot());
		effecttrue();
		notifyyw("Teleported!", "Teleported To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
	end);
end});
local function updateAllPlayerLists()
	gotoplayersList = {};
	for _, player in pairs(game.Players:GetPlayers()) do
		if (player ~= speaker) then
			table.insert(gotoplayersList, player.Name .. " (" .. player.DisplayName .. ")");
		end
	end
	for _, v in AlldropdownRefresh do
		v:Refresh(gotoplayersList, "Select an option");
	end
end
game.Players.PlayerAdded:Connect(updateAllPlayerLists);
game.Players.PlayerRemoving:Connect(updateAllPlayerLists);
updateAllPlayerLists();
tweenSpeedtp = 1;
Paragraph = Misc:CreateParagraph({Title="Tween Info",Content="This Type Teleport Bypasses Most Anti-Cheat's.\nThe Lower The Speed The Faster It Is."}, Sectiontpscritps);
AlldropdownRefresh.tweegotodropdown = Misc:CreateDropdown({SectionParent=Sectiontpscritps,Name="Tween Teleport to / Goto",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if (foundPlr.Character ~= nil) then
			if (Humanoid and Humanoid.SeatPart) then
				Humanoid.Sit = false;
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeedtp, Enum.EasingStyle.Linear), {CFrame=(getRoot(foundPlr.Character).CFrame + Vector3.new(3, 1, 0))}):Play();
				effecttrue();
				notifyyw("Teleported!", "Teleported To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
			else
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeedtp, Enum.EasingStyle.Linear), {CFrame=(getRoot(foundPlr.Character).CFrame + Vector3.new(3, 1, 0))}):Play();
				effecttrue();
				notifyyw("Teleported!", "Teleported To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
			end
		end
		breakvelocity();
	end);
end});
Slidertweenspeedtp = Misc:CreateSlider({SectionParent=Sectiontpscritps,Name="Tween Teleport To /.. Speed",Range={0,10},Increment=0.1,Suffix="Speed",CurrentValue=tweenSpeedtp,Callback=function(Value)
	pcall(function()
		tweenSpeedtp = Value;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectiontpscritps,Name="Tween Teleport To /.. Speed",OnEnter=true,PlaceholderText=tweenSpeedtp,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		tweenSpeedtp = Text;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectiontpscritps,Name="Teleport To Game",PlaceholderText="ID",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		game:GetService("TeleportService"):Teleport(Text, speaker);
	end);
end});
local spectateing = false;
AlldropdownRefresh.spectatedropdown = Misc:CreateDropdown({SectionParent=Sectiontpscritps,Name="Spectate",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (spectateing == true) then
				spectateing = false;
				effectfalse();
				game.Workspace.Camera.CameraSubject = speaker.Character;
				notifyyw("No Longer Spectating The Player ", "Not Spectating " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				return;
			else
				spectateing = true;
				effecttrue();
				notifyyw("Now Spectating", "Spectating " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				while spectateing do
					game.Workspace.Camera.CameraSubject = foundPlr.Character;
					task.wait();
				end
			end
		end
	end);
end});
local function clicktpFunc()
	pcall(function()
		if JMouse.Target then
			if (Humanoid and Humanoid.SeatPart) then
				Humanoid.Sit = false;
				task.wait(0.1);
			end
			local hipHeight = Humanoid and (Humanoid.HipHeight > 0) and (Humanoid.HipHeight + 1);
			local rootPart = getRoot(Character);
			local rootPartPosition = rootPart.Position;
			local hitPosition = JMouse.Hit.Position;
			local newCFrame = CFrame.new(hitPosition, Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)) * CFrame.Angles(0, math.pi, 0);
			rootPart.CFrame = newCFrame + Vector3.new(0, hipHeight or 4, 0);
		end
	end);
end
Paragraph = Misc:CreateParagraph({Title="Press To TP Info",Content="Whenever You Press the Key It TP's To The Mouse Position.\nDouble Tap The Keybind To TP"}, Sectiontpscritps);
PressToTpKeybind = Misc:CreateKeybind({Name="Press to TP Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectiontpscritps,Callback=function(KeyBind)
	presstpff = KeyBind;
	presstpff = not presstpff;
	if presstpff then
		clicktpFunc();
	end
end});
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Reset Press to TP Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		PressToTpKeybind:Set("Set Keybind");
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Teleport To Lowest Player's Server",Interact="Click",Callback=function()
	pcall(function()
		Http = game:GetService("HttpService");
		TPS = game:GetService("TeleportService");
		Api = "https://games.roblox.com/v1/games/";
		_place = game.PlaceId;
		_servers = Api .. _place .. "/servers/Public?sortOrder=Asc&limit=100";
		function ListServers(cursor)
			Raw = game:HttpGet(_servers .. ((cursor and ("&cursor=" .. cursor)) or ""));
			return Http:JSONDecode(Raw);
		end
		local Server, Next;
		repeat
			Servers = ListServers(Next);
			Server = Servers.data[1];
			Next = Servers.nextPageCursor;
		until Server 
		TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer);
	end);
end});
Paragraph = Misc:CreateParagraph({Title="TP To Highest.. Info",Content='Can Show Up a Prompt Saying \"Server Full\" Or Something, Basically Failing But Keep On Pressing To TP'}, Sectiontpscritps);
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Teleport To Highest Player's Server",Interact="Click",Callback=function()
	pcall(function()
		Http = game:GetService("HttpService");
		TPS = game:GetService("TeleportService");
		Api = "https://games.roblox.com/v1/games/";
		_place = game.PlaceId;
		_servers = Api .. _place .. "/servers/Public?sortOrder=Dsc&limit=100";
		function ListServers(cursor)
			Raw = game:HttpGet(_servers .. ((cursor and ("&cursor=" .. cursor)) or ""));
			return Http:JSONDecode(Raw);
		end
		local Server, Next;
		repeat
			Servers = ListServers(Next);
			Server = Servers.data[1];
			Next = Servers.nextPageCursor;
		until Server 
		TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer);
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Server Hop",Interact="Click",Callback=function()
	pcall(function()
		if httprequest then
			local servers = {};
			local req = httprequest({Url=string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100", PlaceId)});
			local body = HttpService:JSONDecode(req.Body);
			if (body and body.data) then
				for i, v in next, body.data do
					if ((type(v) == "table") and tonumber(v.playing) and tonumber(v.maxPlayers) and (v.playing < v.maxPlayers) and (v.id ~= JobId)) then
						table.insert(servers, 1, v.id);
					end
				end
			end
			if (#servers > 0) then
				TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], speakers.LocalPlayer);
			else
				return NSUI:Notify({Title="Server Hop",Content="Couldn't Find Any Server's",Duration=3,Image=nil});
			end
		end
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Rejoin This Game",Interact="Click",Callback=function()
	game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer);
	effecttrue();
	NSUI:Notify({Title="Rejoined!",Content=("Rejoined " .. speaker.DisplayName .. "!"),Duration=3,Image=7733715400});
end});
Button = Misc:CreateButton({SectionParent=Sectiontpscritps,Name="Rejoin This Game With JU",Interact="Click",Callback=function()
	tpcc = false;
	ju = true;
	speaker.OnTeleport:Connect(function(State)
		if (ju and not tpcc and queueteleport) then
			tpcc = true;
			queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/Teremanphius/JMldw3D8dwztK3BgA-LU-FcupZGw2RdtR8MGPL7m34RMckx68MSZREHERPHwyqIC/main/FZZS8rthXWoUleMvmMmW8byDsOhakqKPAS52Che2nU33SQISUE3iZx67bA5LdzSf'))()");
		end
	end);
	game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer);
end});
Sectionreset = Misc:CreateSection("FE LocalPlayer Related | Reset", false, true, 9134761478);
Button = Misc:CreateButton({SectionParent=Sectionreset,Name="Enable Reset Button",Interact="Click",Callback=function()
	game:GetService("StarterGui"):SetCore("ResetButtonCallback", true);
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reset Button Is Now Available In The Esc Menu!",Duration=3,Image=7733715400});
end});
Button = Misc:CreateButton({SectionParent=Sectionreset,Name="Normal Character Reset",Interact="Click",Callback=function()
	speaker.Character.Humanoid.Health = 0;
	effecttrue();
	NSUI:Notify({Title="Reset!",Content=("Reseted " .. speaker.DisplayName .. "!"),Duration=3,Image=7733715400});
end});
Paragraph = Misc:CreateParagraph({Title="Character Reset Info",Content="This Character Reset Type, When You Reset It Teleport's You Back To Your Original Position."}, Sectionreset);
Button = Misc:CreateButton({SectionParent=Sectionreset,Name="Character Reset",Interact="Click",Callback=function()
	charresettopos();
	effecttrue();
	NSUI:Notify({Title="Reset!",Content=("Reseted " .. speaker.DisplayName .. "!"),Duration=3,Image=7733715400});
end});
Button = Misc:CreateButton({SectionParent=Sectionreset,Name="Commit Oof",Callback=function()
	A_1 = "This is it im doing it.";
	A_2 = "All";
	Event = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest;
	Event:FireServer(A_1, A_2);
	task.wait(1);
	A_1 = "I'm going to commit oof.";
	A_2 = "All";
	Event = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest;
	Event:FireServer(A_1, A_2);
	task.wait(1);
	A_1 = "Sayonara cruel world.";
	A_2 = "All";
	Event = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest;
	Event:FireServer(A_1, A_2);
	task.wait(1);
	LocalPlayer = game:GetService("Players").LocalPlayer;
	speaker.Character.Humanoid:MoveTo(speaker.Character.HumanoidRootPart.Position + (speaker.Character.HumanoidRootPart.CFrame.lookVector * 10));
	speaker.Character.Humanoid.Jump = true;
	task.wait(0.5);
	function Iterate(instance, func)
		for i, v in next, instance:GetChildren() do
			func(v);
		end
	end
	limbs = {["Right Leg"]=true,["Right Arm"]=true,["Left Leg"]=true,["Left Arm"]=true};
	Iterate(speaker.Character, function(v)
		if v:IsA("BasePart") then
			attachment = Instance.new("Attachment");
			attachment.Parent = v;
			attachment.Name = v.Name .. "[Attachment]";
			if limbs[v.Name] then
				attachment.Position = Vector3.new(0, v.Size.Y / 2, 0);
			elseif (v.Name == "Head") then
				attachment.Position = Vector3.new(0, -v.Size.Y / 2, 0);
				attachment.Rotation = Vector3.new(0, 0, -90);
			end
		end
	end);
	leftLegAttachment = Instance.new("Attachment");
	leftLegAttachment.Position = Vector3.new(-0.5, -1, 0);
	leftLegAttachment.Rotation = Vector3.new(0, -90, 0);
	rightLegAttachment = Instance.new("Attachment");
	rightLegAttachment.Position = Vector3.new(0.5, -1, 0);
	rightLegAttachment.Rotation = Vector3.new(0, -90, 0);
	rightLegAttachment.Parent, leftLegAttachment.Parent = speaker.Character.Torso, speaker.Character.Torso;
	jointAttachments = {Head={Attachment0=speaker.Character.Torso['NeckAttachment'],Attachment1=speaker.Character.Head["Head[Attachment]"]},["Left Arm"]={Attachment0=speaker.Character.Torso['LeftCollarAttachment'],Attachment1=speaker.Character["Left Arm"]["Left Arm[Attachment]"]},["Right Arm"]={Attachment0=speaker.Character.Torso['RightCollarAttachment'],Attachment1=speaker.Character["Right Arm"]["Right Arm[Attachment]"]},["Left Leg"]={Attachment0=leftLegAttachment,Attachment1=speaker.Character["Left Leg"]["Left Leg[Attachment]"]},["Right Leg"]={Attachment0=rightLegAttachment,Attachment1=speaker.Character["Right Leg"]["Right Leg[Attachment]"]}};
	speaker.Character.Humanoid.PlatformStand = true;
	Iterate(speaker.Character, function(v)
		if v:IsA("BasePart") then
			if jointAttachments[v.Name] then
				ballSocketJoint = Instance.new("BallSocketConstraint");
				ballSocketJoint.Parent = v;
				ballSocketJoint.Radius = 0.15;
				ballSocketJoint.Attachment0, ballSocketJoint.Attachment1 = jointAttachments[v.Name]['Attachment0'], jointAttachments[v.Name]['Attachment1'];
			end
		end
	end);
	Iterate(speaker.Character.Torso, function(v)
		if v:IsA("Motor") then
			v:Remove();
		end
	end);
	effecttrue();
	NSUI:Notify({Title="Damn Bro,",Content="Why'd You Kill Yourself?",Duration=3,Image=7733715400});
end});
Sectionflights = Misc:CreateSection("FE LocalPlayer Related | Flight", false, false, 9134755504);
Buttonresetflysvalue = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset Fly Values",Interact="Click",Callback=function()
	pcall(function()
		Slidervehicleflyspeed:Set(3);
		Slidercfspeed:Set(50);
		Sliderflyspeed:Set(3);
	end);
end});
Paragraph = Misc:CreateParagraph({Title="Grapple Info",Content="Make's Your Character Move To The Mouse\nex. You Put Your Mouse Up, Your Character Goes Up"}, Sectionflights);
local moveToMouse = false;
Togglegrappleasdasd = Misc:CreateToggle({SectionParent=Sectionflights,Name="Grapple",CurrentValue=false,Callback=function(Value)
	pcall(function()
		grapplier = Value;
		if grapplier then
			local grappleuserdied;
			grappleuserdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				Togglegrappleasdasd:Set(false);
			end);
			moveToMouse = true;
			local bpNew = Instance.new("BodyPosition", speaker.Character.HumanoidRootPart);
			while moveToMouse do
				task.wait();
				local mousePosY = JMouse.Hit.Y;
				local mousePosX = JMouse.Hit.X;
				local mousePosZ = JMouse.Hit.Z;
				bpNew.Position = Vector3.new(mousePosX, mousePosY, mousePosZ);
			end
		end
		if not grapplier then
			moveToMouse = false;
			speaker.Character.HumanoidRootPart.BodyPosition:Destroy();
		end
	end);
end});
CFspeed = 50;
Paragraph = Misc:CreateParagraph({Title="CFrame Fly Info",Content="This Version Of Fly Bypasses Most Anti-Cheat's"}, Sectionflights);
Toggleflii = Misc:CreateToggle({SectionParent=Sectionflights,Name="CFrame Fly",CurrentValue=false,Callback=function(Value)
	pcall(function()
		cfffly = Value;
		if cfffly then
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
			local Head = speaker.Character:WaitForChild("Head");
			Head.Anchored = true;
			if CFloop then
				CFloop:Disconnect();
			end
			CFloop = RunService.Heartbeat:Connect(function(deltaTime)
				moveDirection = speaker.Character:FindFirstChildOfClass("Humanoid").MoveDirection * CFspeed * deltaTime;
				headCFrame = Head.CFrame;
				local cameraCFrame = workspace.CurrentCamera.CFrame;
				cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position;
				cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1);
				local cameraPosition = cameraCFrame.Position;
				local headPosition = headCFrame.Position;
				objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection);
				Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity);
			end);
		else
			pcall(function()
				CFloop:Disconnect();
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
				Head = speaker.Character:WaitForChild("Head");
				Head.Anchored = false;
			end);
		end
	end);
end});
CframeFlyKeybind = Misc:CreateKeybind({Name="CFrame Fly Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionflights,Callback=function(KeyBind)
	cffffly = KeyBind;
	cffffly = not cffffly;
	if cffffly then
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
		local Head = speaker.Character:WaitForChild("Head");
		Head.Anchored = true;
		if CFloop then
			CFloop:Disconnect();
		end
		CFloop = RunService.Heartbeat:Connect(function(deltaTime)
			moveDirection = speaker.Character:FindFirstChildOfClass("Humanoid").MoveDirection * CFspeed * deltaTime;
			headCFrame = Head.CFrame;
			local cameraCFrame = workspace.CurrentCamera.CFrame;
			cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position;
			cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1);
			local cameraPosition = cameraCFrame.Position;
			local headPosition = headCFrame.Position;
			objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection);
			Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity);
		end);
	else
		pcall(function()
			CFloop:Disconnect();
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
			Head = speaker.Character:WaitForChild("Head");
			Head.Anchored = false;
		end);
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset CFrame Fly Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		CframeFlyKeybind:Set("Set Keybind");
	end);
end});
Slidercfspeed = Misc:CreateSlider({SectionParent=Sectionflights,Name="CFrame Fly Speed",Range={1,500},Increment=1,Suffix="CFrame Speed",CurrentValue=50,Callback=function(Value)
	pcall(function()
		CFspeed = Value;
	end);
end});
Inputcfspeed = Misc:CreateInput({SectionParent=Sectionflights,Name="CFrame Fly Speed",PlaceholderText=50,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	CFspeed = Text;
end});
Toggleflii = Misc:CreateToggle({SectionParent=Sectionflights,Name="Fly",CurrentValue=false,Callback=function(Value)
	pcall(function()
		flying = Value;
		if flying then
			flying = true;
			sFLY();
		else
			flying = false;
		end
	end);
end});
fLYKeybind = Misc:CreateKeybind({Name="Fly Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionflights,Callback=function(KeyBind)
	normalfly = KeyBind;
	normalfly = not normalfly;
	if normalfly then
		flying = true;
		sFLY();
	else
		flying = false;
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset Fly Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		fLYKeybind:Set("Set Keybind");
	end);
end});
Sliderflyspeed = Misc:CreateSlider({SectionParent=Sectionflights,Name="Fly Speed",Range={1,15},Increment=1,Suffix="Fly Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		flyysspeed = Value;
	end);
end});
Inputflyspeed = Misc:CreateInput({SectionParent=Sectionflights,Name="Fly Speed",PlaceholderText=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	flyysspeed = Text;
end});
Toggleflii = Misc:CreateToggle({SectionParent=Sectionflights,Name="Vehicle Fly",CurrentValue=false,Callback=function(Value)
	pcall(function()
		flying = Value;
		if flying then
			sFLY(true);
		else
			flying = false;
		end
	end);
end});
vehicleFLYKeybind = Misc:CreateKeybind({Name="Vehicle Fly Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionflights,Callback=function(KeyBind)
	normalvehiclefly = KeyBind;
	normalvehiclefly = not normalvehiclefly;
	if normalvehiclefly then
		sFLY(true);
	else
		flying = false;
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionflights,Name="Reset Vehicle Fly Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		vehicleFLYKeybind:Set("Set Keybind");
	end);
end});
Slidervehicleflyspeed = Misc:CreateSlider({SectionParent=Sectionflights,Name="Vehicle Fly Speed",Range={1,15},Increment=1,Suffix="Vehicle Fly Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		vehicleflyspeed = Value;
	end);
end});
Inputvehicleflyspeed = Misc:CreateInput({SectionParent=Sectionflights,Name="Vehicle Fly Speed",PlaceholderText=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	vehicleflyspeed = Text;
end});
Sectionplayerealtefunc = Misc:CreateSection("FE LocalPlayer Related | Function's & Keybind's", false, false, 10686489468);
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Break Velocity",Interact="Click",Callback=function()
	breakvelocity();
	effecttrue();
	NSUI:Notify({Title="Broke Velocity!",Content="Broke Character's Velocity!",Duration=3,Image=7733715400});
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Delete Velocity",Interact="Click",Callback=function()
	for i, v in pairs(speaker.Character:GetDescendants()) do
		if (v:IsA("BodyVelocity") or v:IsA("BodyGyro") or v:IsA("RocketPropulsion") or v:IsA("BodyThrust") or v:IsA("BodyAngularVelocity") or v:IsA("AngularVelocity") or v:IsA("BodyForce") or v:IsA("VectorForce") or v:IsA("LineForce")) then
			v:Destroy();
		end
	end
	effecttrue();
	NSUI:Notify({Title="Delete Velocity!",Content="Deleted Character's Velocity!",Duration=3,Image=7733715400});
end});
function promptNewRig(speaker, rig)
	local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid");
	if humanoid then
		AvatarEditorService:PromptSaveAvatar(humanoid.HumanoidDescription, Enum.HumanoidRigType[rig]);
		local result = AvatarEditorService.PromptSaveAvatarCompleted:Wait();
		if (result == Enum.AvatarPromptResult.Success) then
			charresettopos();
		end
	end
end
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Change Rig Type to R6",Interact="Click",Callback=function()
	promptNewRig(speaker, "R6");
	effecttrue();
	NSUI:Notify({Title="Changed Rig!",Content="Changed Character Rig Type To R6!",Duration=3,Image=7733715400});
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Change Rig Type to R15",Interact="Click",Callback=function()
	promptNewRig(speaker, "R15");
	effecttrue();
	NSUI:Notify({Title="Changed Rig!",Content="Changed Character Rig Type To R15!",Duration=3,Image=7733715400});
end});
anchorKeybind = Misc:CreateKeybind({Name="Freeze / Anchor Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	freeyourselfs = KeyBind;
	freeyourselfs = not freeyourselfs;
	if freeyourselfs then
		for _, v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Anchored = true;
			end
		end
	else
		for _, v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Anchored = false;
			end
		end
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Freeze /.. Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		anchorKeybind:Set("Set Keybind");
	end);
end});
SprintKeybind = Misc:CreateKeybind({Name="Sprint Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	sprints = KeyBind;
	sprints = not sprints;
	if sprints then
		TweenService:Create(speaker.Character:FindFirstChildOfClass("Humanoid"), TweenInfo.new(0.2), {WalkSpeed=32}):Play();
		TweenService:Create(game:GetService("Workspace").Camera, TweenInfo.new(0.2), {FieldOfView=95}):Play();
	else
		TweenService:Create(speaker.Character:FindFirstChildOfClass("Humanoid"), TweenInfo.new(0.2), {WalkSpeed=16}):Play();
		TweenService:Create(game:GetService("Workspace").Camera, TweenInfo.new(0.2), {FieldOfView=70}):Play();
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Sprint Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		SprintKeybind:Set("Set Keybind");
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Strengthen Character",Interact="Click",Callback=function()
	for i, player in pairs(speaker.Character:GetChildren()) do
		if (player.ClassName == "Part") then
			player.CustomPhysicalProperties = PhysicalProperties.new(999999, 0.3, 0.5);
		end
	end
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content="Script Is Now Working!\nPush Something.",Duration=3,Image=7733715400});
end});
tripKeybind = Misc:CreateKeybind({Name="Trip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	trippingf = KeyBind;
	trippingf = not trippingf;
	if trippingf then
		if (speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character)) then
			hum = speaker.Character:FindFirstChildOfClass("Humanoid");
			root = getRoot(speaker.Character);
			hum:ChangeState(0);
			root.Velocity = root.CFrame.LookVector * 30;
		end
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Trip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		tripKeybind:Set("Set Keybind");
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Sit",Interact="Click",Callback=function()
	speaker.Character:FindFirstChildOfClass("Humanoid").Sit = true;
end});
sitKeybind = Misc:CreateKeybind({Name="Sit Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	sittingf = KeyBind;
	sittingf = not sittingf;
	if sittingf then
		speaker.Character:FindFirstChildOfClass("Humanoid").Sit = true;
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Sit Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		sitKeybind:Set("Set Keybind");
	end);
end});
stunKeybind = Misc:CreateKeybind({Name="Stun Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	Stunff = KeyBind;
	Stunff = not Stunff;
	if Stunff then
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
	else
		speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Stun Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		stunKeybind:Set("Set Keybind");
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="God Mode",Interact="Click",Callback=function()
	effecttrue();
	NSUI:Notify({Title="God Mode!",Content="You Executed God Mode Until You Reset!",Duration=3,Image=7733715400});
	Cam = workspace.CurrentCamera;
	Pos, Char = Cam.CFrame, speaker.Character;
	Human = Char and Character.FindFirstChildWhichIsA(Char, "Humanoid");
	nHuman = Human.Clone(Human);
	nHuman.Parent, speaker.Character = Char, nil;
	nHuman.SetStateEnabled(nHuman, 15, false);
	nHuman.SetStateEnabled(nHuman, 1, false);
	nHuman.SetStateEnabled(nHuman, 0, false);
	nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human);
	speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos;
	nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None;
	Script = Character.FindFirstChild(Char, "Animate");
	if Script then
		Script.Disabled = true;
		task.wait();
		Script.Disabled = false;
	end
	nHuman.Health = nHuman.MaxHealth;
end});
godmodeKeybind = Misc:CreateKeybind({Name="God Mode Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	Godff = KeyBind;
	Godff = not Godff;
	if Godff then
		Cam = workspace.CurrentCamera;
		Pos, Char = Cam.CFrame, speaker.Character;
		Human = Char and Character.FindFirstChildWhichIsA(Char, "Humanoid");
		nHuman = Human.Clone(Human);
		nHuman.Parent, speaker.Character = Char, nil;
		nHuman.SetStateEnabled(nHuman, 15, false);
		nHuman.SetStateEnabled(nHuman, 1, false);
		nHuman.SetStateEnabled(nHuman, 0, false);
		nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human);
		speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos;
		nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None;
		Script = Character.FindFirstChild(Char, "Animate");
		if Script then
			Script.Disabled = true;
			task.wait();
			Script.Disabled = false;
		end
		nHuman.Health = nHuman.MaxHealth;
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset God Mode Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		godmodeKeybind:Set("Set Keybind");
	end);
end});
zerogravtripKeybind = Misc:CreateKeybind({Name="Zero Grav Trip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionplayerealtefunc,Callback=function(KeyBind)
	zerogravsit = KeyBind;
	zerogravsit = not zerogravsit;
	if zerogravsit then
		if (speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character)) then
			hum = speaker.Character:FindFirstChildOfClass("Humanoid");
			root = getRoot(speaker.Character);
			game.Workspace.Gravity = 0;
			root.Velocity = root.CFrame.LookVector * 17;
			speaker.Character.Humanoid.Sit = true;
		end
	else
		speaker.Character.Humanoid.Sit = false;
		game.Workspace.Gravity = oldgrav;
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionplayerealtefunc,Name="Reset Zero Grav Trip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		zerogravtripKeybind:Set("Set Keybind");
	end);
end});
carParts = {};
Sectionnoclip = Misc:CreateSection("FE LocalPlayer Related | NoClip", false, false, 14385986465);
Togglenoclip = Misc:CreateToggle({SectionParent=Sectionnoclip,Name="NoClip",CurrentValue=false,Callback=function(Value)
	nnoclipping = Value;
	if nnoclipping then
		Clip = false;
		task.wait(0.1);
		local function NoclipLoop()
			if ((Clip == false) and (speaker.Character ~= nil)) then
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if (child:IsA("BasePart") and (child.CanCollide == true) and (child.Name ~= floatName)) then
						child.CanCollide = false;
					end
				end
			end
		end
		Noclipping = RunService.Stepped:Connect(NoclipLoop);
	end
	if not nnoclipping then
		if Noclipping then
			Noclipping:Disconnect();
		end
		Clip = true;
	end
end});
NoClipKeybind = Misc:CreateKeybind({Name="NoClip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionnoclip,Callback=function(KeyBind)
	noclipff = KeyBind;
	noclipff = not noclipff;
	if noclipff then
		pcall(function()
			Clip = false;
			task.wait(0.1);
			local function NoclipLoop()
				if ((Clip == false) and (speaker.Character ~= nil)) then
					for _, child in pairs(speaker.Character:GetDescendants()) do
						if (child:IsA("BasePart") and (child.CanCollide == true) and (child.Name ~= floatName)) then
							child.CanCollide = false;
						end
					end
				end
			end
			Noclipping = RunService.Stepped:Connect(NoclipLoop);
		end);
	else
		pcall(function()
			if Noclipping then
				Noclipping:Disconnect();
			end
			Clip = true;
		end);
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionnoclip,Name="Reset NoClip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		NoClipKeybind:Set("Set Keybind");
	end);
end});
ToggleVehiclenoclip = Misc:CreateToggle({SectionParent=Sectionnoclip,Name="Vehicle NoClip",CurrentValue=false,Callback=function(Value)
	ToggleVehiclenoclipnnoclipping = Value;
	pcall(function()
		if ToggleVehiclenoclipnnoclipping then
			local Car = speaker.Character.Humanoid.SeatPart;
			for i, v in pairs(Car.Parent.Parent:GetDescendants()) do
				if v:IsA("BasePart") then
					if v.CanCollide then
						v.CanCollide = false;
						table.insert(carParts, v);
					end
				end
			end
		end
		if not ToggleVehiclenoclipnnoclipping then
			local Car = speaker.Character.Humanoid.SeatPart;
			for i, v in pairs(carParts) do
				if v:IsA("BasePart") then
					v.CanCollide = true;
				end
			end
		end
	end);
end});
vehNoClipKeybind = Misc:CreateKeybind({Name="Vehicle NoClip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionnoclip,Callback=function(KeyBind)
	vehnoclipff = KeyBind;
	vehnoclipff = not vehnoclipff;
	if vehnoclipff then
		local Car = speaker.Character.Humanoid.SeatPart;
		for i, v in pairs(Car.Parent.Parent:GetDescendants()) do
			if v:IsA("BasePart") then
				if v.CanCollide then
					v.CanCollide = false;
					table.insert(carParts, v);
				end
			end
		end
	else
		local Car = speaker.Character.Humanoid.SeatPart;
		for i, v in pairs(carParts) do
			if v:IsA("BasePart") then
				v.CanCollide = true;
			end
		end
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionnoclip,Name="Reset Vehicle NoClip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		vehNoClipKeybind:Set("Set Keybind");
	end);
end});
Sectioninvisible = Misc:CreateSection("FE LocalPlayer Related | Invisible's", false, false, 14386256326);
invisRunning = false;
Toggleinvisibleeee = Misc:CreateToggle({SectionParent=Sectioninvisible,Name="Invisible",CurrentValue=false,Callback=function(Value)
	invisibleeee = Value;
	pcall(function()
		if invisibleeee then
			if invisRunning then
				return;
			end
			invisRunning = true;
			local Player = speaker;
			repeat
				task.wait(0.1);
			until Player.Character 
			local Character = Player.Character;
			Character.Archivable = true;
			local IsInvis = false;
			local IsRunning = true;
			local InvisibleCharacter = Character:Clone();
			InvisibleCharacter.Parent = Lighting;
			local Void = workspace.FallenPartsDestroyHeight;
			InvisibleCharacter.Name = "";
			local CF;
			local invisFix = RunService.Stepped:Connect(function()
				pcall(function()
					local IsInteger;
					if tostring(Void):find("-") then
						IsInteger = true;
					else
						IsInteger = false;
					end
					local Pos = Player.Character.HumanoidRootPart.Position;
					local Pos_String = tostring(Pos);
					local Pos_Seperate = Pos_String:split(", ");
					local X = tonumber(Pos_Seperate[1]);
					local Y = tonumber(Pos_Seperate[2]);
					local Z = tonumber(Pos_Seperate[3]);
					if (IsInteger == true) then
						if (Y <= Void) then
							Respawn();
						end
					elseif (IsInteger == false) then
						if (Y >= Void) then
							Respawn();
						end
					end
				end);
			end);
			for i, v in pairs(InvisibleCharacter:GetDescendants()) do
				if v:IsA("BasePart") then
					if (v.Name == "HumanoidRootPart") then
						v.Transparency = 1;
					else
						v.Material = Enum.Material.ForceField;
						v.Color = Color3.fromRGB(25, 25, 25);
					end
				end
			end
			function Respawn()
				IsRunning = false;
				if (IsInvis == true) then
					pcall(function()
						Player.Character = Character;
						task.wait();
						Character.Parent = workspace;
						Character:FindFirstChildWhichIsA("Humanoid"):Destroy();
						IsInvis = false;
						InvisibleCharacter.Parent = nil;
						invisRunning = false;
					end);
				elseif (IsInvis == false) then
					pcall(function()
						Player.Character = Character;
						task.wait();
						Character.Parent = workspace;
						Character:FindFirstChildWhichIsA("Humanoid"):Destroy();
						TurnVisible();
					end);
				end
			end
			local invisDied;
			invisDied = InvisibleCharacter:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				Respawn();
				invisDied:Disconnect();
			end);
			if (IsInvis == true) then
				return;
			end
			IsInvis = true;
			CF = workspace.CurrentCamera.CFrame;
			local CF_1 = Player.Character.HumanoidRootPart.CFrame;
			Character:MoveTo(Vector3.new(0, math.pi * 1000000, 0));
			workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable;
			task.wait(0.2);
			workspace.CurrentCamera.CameraType = Enum.CameraType.Custom;
			InvisibleCharacter = InvisibleCharacter;
			Character.Parent = Lighting;
			InvisibleCharacter.Parent = workspace;
			InvisibleCharacter.HumanoidRootPart.CFrame = CF_1;
			Player.Character = InvisibleCharacter;
			workspace.CurrentCamera:remove();
			task.wait(0.1);
			repeat
				task.wait();
			until speaker.Character ~= nil 
			workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA("Humanoid");
			workspace.CurrentCamera.CameraType = "Custom";
			speaker.CameraMinZoomDistance = 0.5;
			speaker.CameraMaxZoomDistance = 400;
			speaker.CameraMode = "Classic";
			speaker.Character.Head.Anchored = false;
			Player.Character.Animate.Disabled = true;
			Player.Character.Animate.Disabled = false;
			function TurnVisible()
				if (IsInvis == false) then
					return;
				end
				invisFix:Disconnect();
				invisDied:Disconnect();
				CF = workspace.CurrentCamera.CFrame;
				Character = Character;
				local CF_1 = Player.Character.HumanoidRootPart.CFrame;
				Character.HumanoidRootPart.CFrame = CF_1;
				InvisibleCharacter:Destroy();
				Player.Character = Character;
				Character.Parent = workspace;
				IsInvis = false;
				Player.Character.Animate.Disabled = true;
				Player.Character.Animate.Disabled = false;
				invisDied = Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
					Respawn();
					invisDied:Disconnect();
				end);
				invisRunning = false;
			end
		end
		if not invisibleeee then
			TurnVisible();
		end
	end);
end});
InvisKeybind = Misc:CreateKeybind({Name="Invisible Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectioninvisible,Callback=function(KeyBind)
	invisff = KeyBind;
	invisff = not invisff;
	if invisff then
		if invisRunning then
			return;
		end
		invisRunning = true;
		local Player = speaker;
		repeat
			task.wait(0.1);
		until Player.Character 
		local Character = Player.Character;
		Character.Archivable = true;
		local IsInvis = false;
		local IsRunning = true;
		local InvisibleCharacter = Character:Clone();
		InvisibleCharacter.Parent = Lighting;
		local Void = workspace.FallenPartsDestroyHeight;
		InvisibleCharacter.Name = "";
		local CF;
		local invisFix = RunService.Stepped:Connect(function()
			pcall(function()
				local IsInteger;
				if tostring(Void):find("-") then
					IsInteger = true;
				else
					IsInteger = false;
				end
				local Pos = Player.Character.HumanoidRootPart.Position;
				local Pos_String = tostring(Pos);
				local Pos_Seperate = Pos_String:split(", ");
				local X = tonumber(Pos_Seperate[1]);
				local Y = tonumber(Pos_Seperate[2]);
				local Z = tonumber(Pos_Seperate[3]);
				if (IsInteger == true) then
					if (Y <= Void) then
						Respawn();
					end
				elseif (IsInteger == false) then
					if (Y >= Void) then
						Respawn();
					end
				end
			end);
		end);
		for i, v in pairs(InvisibleCharacter:GetDescendants()) do
			if v:IsA("BasePart") then
				if (v.Name == "HumanoidRootPart") then
					v.Transparency = 1;
				else
					v.Material = Enum.Material.ForceField;
					v.Color = Color3.fromRGB(25, 25, 25);
				end
			end
		end
		function Respawn()
			IsRunning = false;
			if (IsInvis == true) then
				pcall(function()
					Player.Character = Character;
					task.wait();
					Character.Parent = workspace;
					Character:FindFirstChildWhichIsA("Humanoid"):Destroy();
					IsInvis = false;
					InvisibleCharacter.Parent = nil;
					invisRunning = false;
				end);
			elseif (IsInvis == false) then
				pcall(function()
					Player.Character = Character;
					task.wait();
					Character.Parent = workspace;
					Character:FindFirstChildWhichIsA("Humanoid"):Destroy();
					TurnVisible();
				end);
			end
		end
		local invisDied;
		invisDied = InvisibleCharacter:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			Respawn();
			invisDied:Disconnect();
		end);
		if (IsInvis == true) then
			return;
		end
		IsInvis = true;
		CF = workspace.CurrentCamera.CFrame;
		local CF_1 = Player.Character.HumanoidRootPart.CFrame;
		Character:MoveTo(Vector3.new(0, math.pi * 1000000, 0));
		workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable;
		task.wait(0.2);
		workspace.CurrentCamera.CameraType = Enum.CameraType.Custom;
		InvisibleCharacter = InvisibleCharacter;
		Character.Parent = Lighting;
		InvisibleCharacter.Parent = workspace;
		InvisibleCharacter.HumanoidRootPart.CFrame = CF_1;
		Player.Character = InvisibleCharacter;
		workspace.CurrentCamera:remove();
		task.wait(0.1);
		repeat
			task.wait();
		until speaker.Character ~= nil 
		workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA("Humanoid");
		workspace.CurrentCamera.CameraType = "Custom";
		speaker.CameraMinZoomDistance = 0.5;
		speaker.CameraMaxZoomDistance = 400;
		speaker.CameraMode = "Classic";
		speaker.Character.Head.Anchored = false;
		Player.Character.Animate.Disabled = true;
		Player.Character.Animate.Disabled = false;
		function TurnVisible()
			if (IsInvis == false) then
				return;
			end
			invisFix:Disconnect();
			invisDied:Disconnect();
			CF = workspace.CurrentCamera.CFrame;
			Character = Character;
			local CF_1 = Player.Character.HumanoidRootPart.CFrame;
			Character.HumanoidRootPart.CFrame = CF_1;
			InvisibleCharacter:Destroy();
			Player.Character = Character;
			Character.Parent = workspace;
			IsInvis = false;
			Player.Character.Animate.Disabled = true;
			Player.Character.Animate.Disabled = false;
			invisDied = Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				Respawn();
				invisDied:Disconnect();
			end);
			invisRunning = false;
		end
	else
		TurnVisible();
	end
end});
Button = Misc:CreateButton({SectionParent=Sectioninvisible,Name="Reset Invisible Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		InvisKeybind:Set("Set Keybind");
	end);
end});
Button = Misc:CreateButton({SectionParent=Sectioninvisible,Name="Invisible (Tool)",Interact="Click",Callback=function()
	offset = 1100;
	LocalPlayer = game.Players.LocalPlayer;
	Backpack = speaker.Backpack;
	Character = speaker.Character;
	invisible = false;
	grips = {};
	local heldTool;
	local gripChanged;
	local handle;
	local weld;
	function setDisplayDistance(distance)
		for _, player in pairs(game.Players:GetPlayers()) do
			if (player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")) then
				player.Character:FindFirstChildWhichIsA("Humanoid").NameDisplayDistance = distance;
				player.Character:FindFirstChildWhichIsA("Humanoid").HealthDisplayDistance = distance;
			end
		end
	end
	tool = Instance.new("Tool", Backpack);
	tool.Name = "Ghostify [Disabled]";
	tool.RequiresHandle = false;
	tool.CanBeDropped = false;
	tool.Equipped:Connect(function()
		task.wait();
		if not invisible then
			invisible = true;
			tool.Name = "Ghostify [Enabled]";
			if handle then
				handle:Destroy();
			end
			if weld then
				weld:Destroy();
			end
			handle = Instance.new("Part", workspace);
			handle.Name = "Handle";
			handle.Transparency = 1;
			handle.CanCollide = false;
			handle.Size = Vector3.new(2, 1, 1);
			weld = Instance.new("Weld", handle);
			weld.Part0 = handle;
			weld.Part1 = Character.HumanoidRootPart;
			weld.C0 = CFrame.new(0, offset - 1.5, 0);
			setDisplayDistance(offset + 100);
			workspace.CurrentCamera.CameraSubject = handle;
			Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, offset, 0);
			Character.Humanoid.HipHeight = offset;
			Character.Humanoid:ChangeState(11);
			for _, child in pairs(Backpack:GetChildren()) do
				if (child:IsA("Tool") and (child ~= tool)) then
					grips[child] = child.Grip;
				end
			end
		elseif invisible then
			invisible = false;
			tool.Name = "Ghostify [Disabled]";
			if handle then
				handle:Destroy();
			end
			if weld then
				weld:Destroy();
			end
			for _, child in pairs(Character:GetChildren()) do
				if child:IsA("Tool") then
					child.Parent = Backpack;
				end
			end
			for tool, grip in pairs(grips) do
				if tool then
					tool.Grip = grip;
				end
			end
			heldTool = nil;
			setDisplayDistance(100);
			workspace.CurrentCamera.CameraSubject = Character.Humanoid;
			Character.Animate.Disabled = false;
			Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -offset, 0);
			Character.Humanoid.HipHeight = 0;
			Character.Humanoid:ChangeState(11);
		end
		tool.Parent = Backpack;
	end);
	Character.ChildAdded:Connect(function(child)
		task.wait();
		if (invisible and child:IsA("Tool") and (child ~= heldTool) and (child ~= tool)) then
			heldTool = child;
			lastGrip = heldTool.Grip;
			if not grips[heldTool] then
				grips[heldTool] = lastGrip;
			end
			for _, track in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do
				track:Stop();
			end
			Character.Animate.Disabled = true;
			heldTool.Grip = heldTool.Grip * CFrame.new(0, offset - 1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0);
			heldTool.Parent = Backpack;
			heldTool.Parent = Character;
			if gripChanged then
				gripChanged:Disconnect();
			end
			gripChanged = heldTool:GetPropertyChangedSignal("Grip"):Connect(function()
				task.wait();
				if not invisible then
					gripChanged:Disconnect();
				end
				if (heldTool.Grip ~= lastGrip) then
					lastGrip = heldTool.Grip * CFrame.new(0, offset - 1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0);
					heldTool.Grip = lastGrip;
					heldTool.Parent = Backpack;
					heldTool.Parent = Character;
				end
			end);
		end
	end);
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
Sectionlprtog = Misc:CreateSection("FE LocalPlayer Related | Toggle's", false, false, 10686489468);
Paragraph = Misc:CreateParagraph({Title="Upside Down Character & Crawl Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionlprtog);
Toggleupsidedown = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Upside Down Character",CurrentValue=false,Callback=function(Value)
	upsidedown = Value;
	if upsidedown then
		if not r15(speaker) then
			ifuserdiedar = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					Toggleupsidedown:Set(false);
					ifuserdiedar:Disconnect();
				end);
			end);
			effecttrue();
			NSUI:Notify({Title="You're Now Upside Down!",Content="You're Upside Down Until You Reset!\nAnd When You Sit In A Chair!",Duration=5,Image=7733715400});
			c = Character;
			hrp0 = c:FindFirstChild("HumanoidRootPart");
			hrp1 = hrp0:Clone();
			c.Parent = nil;
			hrp0.Parent = hrp1;
			hrp0.RootJoint.Part0 = nil;
			hrp1.Parent = c;
			c.Parent = workspace;
			c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.pi, 0, math.pi);
			h = game:GetService("RunService").Heartbeat;
			hrp0.Transparency = 0.85;
			hrp0.Material = Enum.Material.ForceField;
			hrp0.Color = Color3.fromRGB(25, 25, 25);
			while h:Wait() and c and c.Parent do
				hrp0.CFrame = hrp1.CFrame;
				hrp0.Orientation += Vector3.new(0, 0, 180)
				hrp0.Position -= Vector3.new(0, 0, 0)
				hrp0.Velocity = hrp1.Velocity;
			end
		elseif r15(speaker) then
			ifuserdiedar = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					Toggleupsidedown:Set(false);
					ifuserdiedar:Disconnect();
				end);
			end);
			effecttrue();
			NSUI:Notify({Title="You're Now Upside Down!",Content="You're Upside Down Until You Reset!\nAnd When You Sit In A Chair!",Duration=5,Image=7733715400});
			local Players = game:GetService("Players");
			local RunService = game:GetService("RunService");
			local LocalPlayer = Players.LocalPlayer;
			local Character = LocalPlayer.Character;
			local c = Character;
			local function setupCharacter()
				local hrp0 = c:FindFirstChild("HumanoidRootPart");
				if hrp0 then
					local hrp1 = hrp0:Clone();
					c.Parent = nil;
					hrp0.Parent = hrp1;
					hrp1.Parent = c;
					c.Parent = workspace;
					c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(0, 0, math.pi) * CFrame.new(0, -1, 0);
					hrp0.Transparency = 0.85;
					hrp0.Material = Enum.Material.ForceField;
					hrp0.Color = Color3.fromRGB(25, 25, 25);
					RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame;
							hrp0.Orientation += Vector3.new(0, 0, 180)
							hrp0.Position -= Vector3.new(0, 1, 0)
							hrp0.Velocity = hrp1.Velocity;
						end
					end);
				end
			end
			setupCharacter();
			Players.LocalPlayer.CharacterAdded:Connect(function(char)
				c = char;
				setupCharacter();
			end);
		end
	end
	if not upsidedown then
		charresettopos();
		task.wait(1);
		ifuserdiedar:Disconnect();
	end
end});
Toggle = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Freeze / Anchor Yourself",CurrentValue=false,Callback=function(Value)
	freezeyourself = Value;
	if freezeyourself then
		for i, v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Anchored = true;
			end
		end
	end
	if not freezeyourself then
		for i, v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") then
				v.Anchored = false;
			end
		end
	end
end});
Toggle = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Zero Grav Trip W/ Sit",CurrentValue=false,Callback=function(Value)
	zerograv = Value;
	if zerograv then
		if (speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character)) then
			hum = speaker.Character:FindFirstChildOfClass("Humanoid");
			root = getRoot(speaker.Character);
			game.Workspace.Gravity = 0;
			root.Velocity = root.CFrame.LookVector * 17;
			speaker.Character.Humanoid.Sit = true;
		end
	end
	if not zerograv then
		speaker.Character.Humanoid.Sit = false;
		game.Workspace.Gravity = oldgrav;
	end
end});
Toggleinfjump1 = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Hold Jump",CurrentValue=false,Callback=function(Value)
	InfiniteJumpEnabled = Value;
	game:GetService("UserInputService").JumpRequest:connect(function()
		if InfiniteJumpEnabled then
			game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping");
		end
	end);
end});
Toggleinfjump2 = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Infinite Jump",CurrentValue=false,Callback=function(Value)
	pcall(function()
		infjumpp2 = Value;
		if infjumpp2 then
			if infJump then
				infJump:Disconnect();
			end
			infJumpDebounce = false;
			infJump = UserInputService.JumpRequest:Connect(function()
				if not infJumpDebounce then
					infJumpDebounce = true;
					speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping);
					task.wait();
					infJumpDebounce = false;
				end
			end);
		end
		if not infjumpp2 then
			infJump:Disconnect();
		end
		infJumpDebounce = false;
	end);
end});
fakelagging = false;
Togglefakelag = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Fake Lag",CurrentValue=false,Callback=function(Value)
	pcall(function()
		Fakelag = Value;
		if Fakelag then
			fakelagging = true;
			while fakelagging do
				for i, v in pairs(speaker.Character:GetChildren()) do
					if v:IsA("BasePart") then
						v.Anchored = true;
					end
				end
				task.wait(0.1);
				for i, v in pairs(speaker.Character:GetChildren()) do
					if v:IsA("BasePart") then
						v.Anchored = false;
					end
				end
				task.wait(0.1);
			end
		end
		if not Fakelag then
			fakelagging = false;
			for i, v in pairs(speaker.Character:GetChildren()) do
				if v:IsA("BasePart") then
					v.Anchored = false;
				end
			end
		end
	end);
end});
ToggleCrawl = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Crawl",CurrentValue=false,Callback=function(Value)
	Crawlingornot = Value;
	if Crawlingornot then
		if not r15(speaker) then
			ifuserdiedar2 = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleCrawl:Set(false);
					ifuserdiedar2:Disconnect();
				end);
			end);
			local climbAnim = Instance.new("Animation");
			climbAnim.AnimationId = "rbxassetid://180436334";
			local climbTrack = speaker.Character.Humanoid:LoadAnimation(climbAnim);
			local function playIdleClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 0);
				else
					climbTrack:AdjustSpeed(0);
				end
			end
			local function playWalkingClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 1);
				else
					climbTrack:AdjustSpeed(1);
				end
			end
			local humrunr6;
			humrunr6 = speaker.Character.Humanoid.Running:Connect(function(speed)
				if (speed == 0) then
					playIdleClimbingAnimation();
				else
					playWalkingClimbingAnimation();
				end
			end);
			local c = speaker.Character;
			local hrp0 = c:FindFirstChild("HumanoidRootPart");
			if hrp0 then
				local hrp1 = hrp0:Clone();
				c.Parent = nil;
				hrp0.Parent = hrp1;
				hrp0.RootJoint.Part0 = nil;
				hrp1.Parent = c;
				c.Parent = workspace;
				c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.rad(90), 0, 0);
				c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.new(0, -2, 0);
				local h = game:GetService("RunService").Heartbeat;
				hrp0.Transparency = 0.85;
				hrp0.Material = Enum.Material.ForceField;
				hrp0.Color = Color3.fromRGB(25, 25, 25);
				while h:Wait() and c and c.Parent do
					hrp0.CFrame = hrp1.CFrame;
					hrp0.Orientation += Vector3.new(-90, 0, 0)
					hrp0.Position -= Vector3.new(0, 1.5, 0)
					hrp0.Velocity = hrp1.Velocity;
				end
			end
		elseif r15(speaker) then
			ifuserdiedar2 = speaker.Character:FindFirstChildWhichIsA("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleCrawl:Set(false);
					ifuserdiedar2:Disconnect();
				end);
			end);
			local player = speaker;
			local character = player.Character or player.CharacterAdded:Wait();
			local humanoid = character:WaitForChild("Humanoid");
			local climbAnim = Instance.new("Animation");
			climbAnim.AnimationId = "rbxassetid://507765644";
			local climbTrack = humanoid:LoadAnimation(climbAnim);
			local function playIdleClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 0);
				else
					climbTrack:AdjustSpeed(0);
				end
			end
			local function playWalkingClimbingAnimation()
				if not climbTrack.IsPlaying then
					climbTrack:Play(0, 10, 1);
				else
					climbTrack:AdjustSpeed(1);
				end
			end
			local humrunr15;
			humrunr15 = humanoid.Running:Connect(function(speed)
				if (speed == 0) then
					playIdleClimbingAnimation();
				else
					playWalkingClimbingAnimation();
				end
			end);
			local Players = game:GetService("Players");
			local RunService = game:GetService("RunService");
			local LocalPlayer = Players.LocalPlayer;
			local Character = LocalPlayer.Character;
			local c = Character;
			local function setupCharacter()
				local hrp0 = c:FindFirstChild("HumanoidRootPart");
				if hrp0 then
					local hrp1 = hrp0:Clone();
					c.Parent = nil;
					hrp0.Parent = hrp1;
					hrp1.Parent = c;
					c.Parent = workspace;
					c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(math.rad(-90), 0, 0) * CFrame.new(0, -1, -1.2);
					hrp0.Transparency = 0.85;
					hrp0.Material = Enum.Material.ForceField;
					hrp0.Color = Color3.fromRGB(25, 25, 25);
					RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame;
							hrp0.Orientation += Vector3.new(-90, 0, 0)
							hrp0.Position -= Vector3.new(0, 1.5, 0)
							hrp0.Velocity = hrp1.Velocity;
						end
					end);
				end
			end
			setupCharacter();
			r15charaddedcrawl = Players.LocalPlayer.CharacterAdded:Connect(function(char)
				c = char;
				setupCharacter();
				r15charaddedcrawl:Disconnect();
			end);
		end
	end
	if not Crawlingornot then
		pcall(function()
			ifuserdiedar2:Disconnect();
			charresettopos();
			if climbTrack then
				climbTrack:Stop();
			end
			if climbAnim then
				climbAnim:Destroy();
			end
			if r15(speaker) then
				humrunr6:Disconnect();
			else
				humrunr15:Disconnect();
				r15charaddedcrawl:Disconnect();
			end
		end);
	end
end});
Floating = false;
floatName = randomString();
Togglestunned = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Stun",CurrentValue=false,Callback=function(Value)
	pcall(function()
		stunned = Value;
		if stunned then
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
		end
		if not stunned then
			speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
		end
	end);
end});
Paragraph = Misc:CreateParagraph({Title="Sit Walk Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionlprtog);
Togglestiwalk = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Sit Walk",CurrentValue=false,Callback=function(Value)
	pcall(function()
		sitwalkerr = Value;
		if sitwalkerr then
			anims = speaker.Character.Animate;
			local sit = anims.sit:FindFirstChildOfClass("Animation").AnimationId;
			anims.idle:FindFirstChildOfClass("Animation").AnimationId = sit;
			anims.walk:FindFirstChildOfClass("Animation").AnimationId = sit;
			anims.run:FindFirstChildOfClass("Animation").AnimationId = sit;
			anims.jump:FindFirstChildOfClass("Animation").AnimationId = sit;
			ifuserdiedaq = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				pcall(function()
					Togglestiwalk:Set(false);
				end);
			end);
		end
		if not sitwalkerr then
			ifuserdiedaq:Disconnect();
			charresettopos();
		end
	end);
end});
function slipperwalk()
	for _, a in pairs(Character:GetDescendants()) do
		if a:IsA("BasePart") then
			a.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0, 0);
		end
	end
end
function nonslipwalk()
	for _, a in pairs(Character:GetDescendants()) do
		if a:IsA("BasePart") then
			a.CustomPhysicalProperties = PhysicalProperties.new(1, 0, 0);
		end
	end
end
Toggleslider = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Slide",CurrentValue=false,Callback=function(Value)
	icewalker = Value;
	if icewalker then
		slipperwalk();
	end
	if not icewalker then
		nonslipwalk();
	end
	speaker.CharacterAdded:Connect(function(char)
		Character = char;
		if icewalker then
			slipperwalk();
		else
			nonslipwalk();
		end
	end);
end});
Toggleedgerjumper = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Edge Jump",CurrentValue=false,Callback=function(Value)
	pcall(function()
		edgerjumper = Value;
		if edgerjumper then
			local Char = speaker.Character;
			local Human = Char and Char:FindFirstChildWhichIsA("Humanoid");
			local state;
			local laststate;
			local lastcf;
			local function edgejump()
				if (Char and Human) then
					laststate = state;
					state = Human:GetState();
					if ((laststate ~= state) and (state == Enum.HumanoidStateType.Freefall) and (laststate ~= Enum.HumanoidStateType.Jumping)) then
						Character.HumanoidRootPart.CFrame = lastcf;
						Character.HumanoidRootPart.Velocity = Vector3.new(Character.HumanoidRootPart.Velocity.X, Human.JumpPower or Human.JumpHeight, Character.HumanoidRootPart.Velocity.Z);
					end
					lastcf = Character.HumanoidRootPart.CFrame;
				end
			end
			edgejump();
			HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump);
			HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
				Char, Human = nChar, nChar:WaitForChild("Humanoid");
				edgejump();
				HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump);
			end);
		end
		if not edgerjumper then
			HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or nil;
			HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or nil;
		end
	end);
end});
Paragraph = Misc:CreateParagraph({Title="Float Info",Content="Control's :\nQ - Down\nE - Up"}, Sectionlprtog);
Toggle = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Float",CurrentValue=false,Callback=function(Value)
	pcall(function()
		floattt = Value;
		if floattt then
			Floating = true;
			pchar = speaker.Character;
			if (pchar and not pchar:FindFirstChild(floatName)) then
				task.spawn(function()
					Float = Instance.new("Part");
					Float.Name = floatName;
					Float.Parent = pchar;
					Float.Transparency = 1;
					Float.Size = Vector3.new(2, 0.2, 1.5);
					Float.Anchored = true;
					FloatValue = -3.1;
					Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0, FloatValue, 0);
					NSUI:Notify({Title="Float Has Been Enabled",Content="Now You Are Floating, Just Jump!",Duration=1.5,Image=7733715400});
					qUp = JMouse.KeyUp:Connect(function(KEY)
						if (KEY == "q") then
							FloatValue = FloatValue + 0.5;
						end
					end);
					eUp = JMouse.KeyUp:Connect(function(KEY)
						if (KEY == "e") then
							FloatValue = FloatValue - 0.5;
						end
					end);
					qDown = JMouse.KeyDown:Connect(function(KEY)
						if (KEY == "q") then
							FloatValue = FloatValue - 0.5;
						end
					end);
					eDown = JMouse.KeyDown:Connect(function(KEY)
						if (KEY == "e") then
							FloatValue = FloatValue + 0.5;
						end
					end);
					floatDied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
						FloatingFunc:Disconnect();
						Float:Destroy();
						qUp:Disconnect();
						eUp:Disconnect();
						qDown:Disconnect();
						eDown:Disconnect();
						floatDied:Disconnect();
					end);
					function FloatPadLoop()
						if (pchar:FindFirstChild(floatName) and getRoot(pchar)) then
							Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0, FloatValue, 0);
						else
							FloatingFunc:Disconnect();
							Float:Destroy();
							qUp:Disconnect();
							eUp:Disconnect();
							qDown:Disconnect();
							eDown:Disconnect();
							floatDied:Disconnect();
						end
					end
					FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop);
				end);
			end
		end
		if not floattt then
			Floating = false;
			pchar = speaker.Character;
			NSUI:Notify({Title="Float Has Been Disabled",Content="Now You Have Disabled Float!",Duration=1.5,Image=7733715400});
			if pchar:FindFirstChild(floatName) then
				pchar:FindFirstChild(floatName):Destroy();
			end
			if floatDied then
				FloatingFunc:Disconnect();
				qUp:Disconnect();
				eUp:Disconnect();
				qDown:Disconnect();
				eDown:Disconnect();
				floatDied:Disconnect();
			end
		end
	end);
end});
Toggleweaken = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Weaken Character",CurrentValue=false,Callback=function(Value)
	pcall(function()
		weakenchar = Value;
		if weakenchar then
			for i, player in pairs(speaker.Character:GetChildren()) do
				if (player.ClassName == "Part") then
					player.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5);
				end
			end
		end
		if not weakenchar then
			for i, player in pairs(speaker.Character:GetChildren()) do
				if (player.ClassName == "Part") then
					player.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5);
				end
			end
		end
	end);
end});
Toggleswimmer = Misc:CreateToggle({SectionParent=Sectionlprtog,Name="Swim",CurrentValue=false,Callback=function(Value)
	pcall(function()
		swimmer = Value;
		if swimmer then
			if (not swimming and speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")) then
				oldgrav = workspace.Gravity;
				workspace.Gravity = 0;
				local swimDied = function()
					workspace.Gravity = oldgrav;
					swimming = false;
				end;
				Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid");
				gravReset = Humanoid.Died:Connect(swimDied);
				enums = Enum.HumanoidStateType:GetEnumItems();
				table.remove(enums, table.find(enums, Enum.HumanoidStateType.None));
				for i, v in pairs(enums) do
					Humanoid:SetStateEnabled(v, false);
				end
				Humanoid:ChangeState(Enum.HumanoidStateType.Swimming);
			end
		end
		if not swimmer then
			if (speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")) then
				workspace.Gravity = oldgrav;
				swimming = false;
				if gravReset then
					gravReset:Disconnect();
				end
				if (swimbeat ~= nil) then
					swimbeat:Disconnect();
					swimbeat = nil;
				end
				Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid");
				enums = Enum.HumanoidStateType:GetEnumItems();
				table.remove(enums, table.find(enums, Enum.HumanoidStateType.None));
				for i, v in pairs(enums) do
					Humanoid:SetStateEnabled(v, true);
				end
			end
		end
	end);
end});
Sectionflipsnthings = Misc:CreateSection("FE LocalPlayer Related | Flip's & Roll's", false, false, 9134761478);
Paragraph = Misc:CreateParagraph({Title="Beyblade Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionflipsnthings);
ToggleBeyBlade = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Beyblade",CurrentValue=false,Callback=function(Value)
	beyblader = Value;
	if beyblader then
		local BeyBladee = Instance.new("BodyAngularVelocity");
		BeyBladee.Name = "BeyBlading";
		BeyBladee.Parent = getRoot(speaker.Character);
		BeyBladee.MaxTorque = Vector3.new(0, math.huge, 0);
		local function updateAngularVelocity()
			BeyBladee.AngularVelocity = Vector3.new(0, 20, 0);
		end
		updateAngularVelocity();
		local ifuserdied2;
		if not r15(speaker) then
			ifuserdied2 = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleBeyBlade:Set(false);
					ifuserdied2:Disconnect();
				end);
			end);
			local Character = game.Players.LocalPlayer.Character;
			local c = Character;
			local hrp0 = c:FindFirstChild("HumanoidRootPart");
			local hrp1 = hrp0:Clone();
			c.Parent = nil;
			hrp0.Parent = hrp1;
			hrp0.RootJoint.Part0 = nil;
			hrp1.Parent = c;
			c.Parent = workspace;
			c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.rad(90), 0, 0);
			local h = game:GetService("RunService").Heartbeat;
			hrp0.Transparency = 0.85;
			hrp0.Material = Enum.Material.ForceField;
			hrp0.Color = Color3.fromRGB(25, 25, 25);
			while h:Wait() and c and c.Parent do
				hrp0.CFrame = hrp1.CFrame;
				hrp0.Orientation += Vector3.new(-90, 0, 0)
				hrp0.Position -= Vector3.new(0, 0, 0)
				hrp0.Velocity = hrp1.Velocity;
			end
		elseif r15(speaker) then
			ifuserdied2 = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				pcall(function()
					ToggleBeyBlade:Set(false);
					ifuserdied2:Disconnect();
				end);
			end);
			local Players = game:GetService("Players");
			local RunService = game:GetService("RunService");
			local LocalPlayer = Players.LocalPlayer;
			local Character = LocalPlayer.Character;
			local c = Character;
			local function setupCharacter()
				local hrp0 = c:FindFirstChild("HumanoidRootPart");
				if hrp0 then
					local hrp1 = hrp0:Clone();
					c.Parent = nil;
					hrp0.Parent = hrp1;
					hrp1.Parent = c;
					c.Parent = workspace;
					c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(math.rad(-90), 0, 0) * CFrame.new(0, 0, 1.2);
					hrp0.Transparency = 0.85;
					hrp0.Material = Enum.Material.ForceField;
					hrp0.Color = Color3.fromRGB(25, 25, 25);
					RunService.Heartbeat:Connect(function()
						if (c and c.Parent) then
							hrp0.CFrame = hrp1.CFrame;
							hrp0.Orientation += Vector3.new(-90, 0, 0)
							hrp0.Position -= Vector3.new(0, 0, 0)
							hrp0.Velocity = hrp1.Velocity;
						end
					end);
				end
			end
			setupCharacter();
			Players.LocalPlayer.CharacterAdded:Connect(function(char)
				c = char;
				setupCharacter();
			end);
		end
	end
	if not beyblader then
		pcall(function()
			charresettopos();
			ifuserdied2:Disconnect();
			for _, v in pairs(getRoot(speaker.Character):GetChildren()) do
				if (v.Name == "BeyBlading") then
					v:Destroy();
				end
			end
		end);
	end
end});
Flipping = false;
Toggleflipppping = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Flip",CurrentValue=false,Callback=function(Value)
	flippa = Value;
	if flippa then
		if not r15(speaker) then
			Flipping = true;
			pl = speaker;
			me = pl.Character;
			xl = me.Torso["Right Shoulder"];
			local debounce = false;
			function _restoreproperties()
				Holder = speaker.Character;
				Torso = Holder:FindFirstChild("Torso");
				RightS = Torso:FindFirstChild("Right Shoulder");
				LeftS = Torso:FindFirstChild("Left Shoulder");
				RightH = Torso:FindFirstChild("Right Hip");
				LeftH = Torso:FindFirstChild("Left Hip");
				RightS.MaxVelocity = 0.15;
				LeftS.MaxVelocity = 0.15;
				RightH.MaxVelocity = 0.1;
				LeftH.MaxVelocity = 0.1;
				RightS.DesiredAngle = 0;
				LeftS.DesiredAngle = 0;
				LeftH.DesiredAngle = 0;
				RightH.DesiredAngle = 0;
			end
			function ManageAnimation(value)
				Holder = speaker.Character;
				Player = speaker;
				if (value == "no anim") then
					Anim = Holder:FindFirstChild("Animate");
					if (Anim ~= nil) then
						Anim.Disabled = true;
						Anim.Parent = Player;
					end
				elseif (value == "re-anim") then
					Anim = Player:FindFirstChild("Animate");
					if (Anim ~= nil) then
						Anim.Disabled = false;
						Anim.Parent = Holder;
					end
				end
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
					wait();
				end
				ml:Remove();
			end
			function Flip2()
				if (debounce == true) then
					return;
				end
				debounce = true;
				Char = speaker.Character;
				Human = Character.Humanoid;
				Torso = Character.Torso;
				CF = Torso.CFrame;
				Human.PlatformStand = true;
				VelUp = Instance.new("BodyVelocity");
				VelUp.velocity = Vector3.new(0, 60, 0) + (Torso.CFrame.lookVector * 26);
				VelUp.P = VelUp.P * 2;
				VelUp.maxForce = Vector3.new(10000, 10000, 10000) * 999;
				VelUp.Parent = Torso;
				coroutine.resume(coroutine.create(Down), VelUp);
				Gyro = Instance.new("BodyGyro");
				Gyro.P = Gyro.P * 10;
				Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
				Gyro.cframe = CF;
				Gyro.Parent = Torso;
				for i = 2, 28 do
					Gyro.cframe = Gyro.cframe * CFrame.fromEulerAnglesXYZ(math.pi / -16, 0, 0);
					wait();
				end
				Gyro.cframe = CF;
				wait();
				Gyro:Remove();
				Human.PlatformStand = false;
				_restoreproperties();
				debounce = false;
			end
			while Flipping do
				wait();
				Flip2();
			end
		else
			Flipping = true;
			local speaker = game.Players.LocalPlayer;
			local pl = speaker;
			local me = pl.Character;
			local xl = me:WaitForChild("RightUpperArm");
			local debounce = false;
			function _restoreproperties()
				local Holder = speaker.Character;
				local Torso = Holder:FindFirstChild("UpperTorso");
				local RightS = Torso:FindFirstChild("Right Shoulder") or Holder:FindFirstChild("RightShoulder");
				local LeftS = Torso:FindFirstChild("Left Shoulder") or Holder:FindFirstChild("LeftShoulder");
				local RightH = Torso:FindFirstChild("Right Hip") or Holder:FindFirstChild("RightHip");
				local LeftH = Torso:FindFirstChild("Left Hip") or Holder:FindFirstChild("LeftHip");
				if (Torso and RightS and LeftS and RightH and LeftH) then
					RightS.MaxVelocity = 0.15;
					LeftS.MaxVelocity = 0.15;
					RightH.MaxVelocity = 0.1;
					LeftH.MaxVelocity = 0.1;
					RightS.DesiredAngle = 0;
					LeftS.DesiredAngle = 0;
					LeftH.DesiredAngle = 0;
					RightH.DesiredAngle = 0;
				end
			end
			function ManageAnimation(value)
				local Holder = speaker.Character;
				local Player = speaker;
				if (value == "no anim") then
					local Anim = Holder:FindFirstChild("Animate");
					if (Anim ~= nil) then
						Anim.Disabled = true;
						Anim.Parent = Player;
					end
				elseif (value == "re-anim") then
					local Anim = Player:FindFirstChild("Animate");
					if (Anim ~= nil) then
						Anim.Disabled = false;
						Anim.Parent = Holder;
					end
				end
			end
			function Down(ml)
				for i = 1, ml.Velocity.y / 3 do
					ml.Velocity = ml.Velocity + Vector3.new(0, -4.25, 0);
					wait();
				end
				ml:Destroy();
			end
			function Flip2()
				if (debounce == true) then
					return;
				end
				debounce = true;
				local Char = speaker.Character;
				local Human = Character.Humanoid;
				local Torso = Char:FindFirstChild("UpperTorso");
				if Torso then
					local CF = Torso.CFrame;
					Human.PlatformStand = true;
					local VelUp = Instance.new("BodyVelocity");
					VelUp.Velocity = Vector3.new(0, 60, 0) + (Torso.CFrame.LookVector * 26);
					VelUp.P = VelUp.P * 2;
					VelUp.MaxForce = Vector3.new(10000, 10000, 10000) * 999;
					VelUp.Parent = Torso;
					coroutine.resume(coroutine.create(Down), VelUp);
					local Gyro = Instance.new("BodyGyro");
					Gyro.P = Gyro.P * 10;
					Gyro.MaxTorque = Vector3.new(100000, 100000, 100000) * 999;
					Gyro.CFrame = CF;
					Gyro.Parent = Torso;
					for i = 2, 28 do
						Gyro.CFrame = Gyro.CFrame * CFrame.Angles(math.rad(-16), 0, 0);
						wait();
					end
					Gyro.CFrame = CF;
					wait();
					Gyro:Destroy();
					Human.PlatformStand = false;
					_restoreproperties();
					debounce = false;
				end
			end
			while Flipping do
				wait();
				Flip2();
			end
		end
	end
	if not flippa then
		Flipping = false;
	end
end});
doubleFlipping = false;
Toggledoubleflipppping = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Double Flip",CurrentValue=false,Callback=function(Value)
	pcall(function()
		doubleflippa = Value;
		if doubleflippa then
			if not r15(speaker) then
				doubleFlipping = true;
				pl = speaker;
				me = pl.Character;
				xl = me.Torso["Right Shoulder"];
				local debounce = false;
				function _restoreproperties()
					Holder = speaker.Character;
					Torso = Holder:FindFirstChild("Torso");
					RightS = Torso:FindFirstChild("Right Shoulder");
					LeftS = Torso:FindFirstChild("Left Shoulder");
					RightH = Torso:FindFirstChild("Right Hip");
					LeftH = Torso:FindFirstChild("Left Hip");
					RightS.MaxVelocity = 0.15;
					LeftS.MaxVelocity = 0.15;
					RightH.MaxVelocity = 0.1;
					LeftH.MaxVelocity = 0.1;
					RightS.DesiredAngle = 0;
					LeftS.DesiredAngle = 0;
					LeftH.DesiredAngle = 0;
					RightH.DesiredAngle = 0;
				end
				function ManageAnimation(value)
					Holder = speaker.Character;
					Player = speaker;
					if (value == "no anim") then
						Anim = Holder:FindFirstChild("Animate");
						if (Anim ~= nil) then
							Anim.Disabled = true;
							Anim.Parent = Player;
						end
					elseif (value == "re-anim") then
						Anim = Player:FindFirstChild("Animate");
						if (Anim ~= nil) then
							Anim.Disabled = false;
							Anim.Parent = Holder;
						end
					end
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
						wait();
					end
					ml:Remove();
				end
				function Flip3()
					if (debounce == true) then
						return;
					end
					debounce = true;
					Char = speaker.Character;
					Human = Character.Humanoid;
					Torso = Character.Torso;
					CF = Torso.CFrame;
					Human.PlatformStand = true;
					VelUp = Instance.new("BodyVelocity");
					VelUp.velocity = Vector3.new(0, 60, 0) + (Torso.CFrame.lookVector * 26);
					VelUp.P = VelUp.P * 2;
					VelUp.maxForce = Vector3.new(10000, 10000, 10000) * 999;
					VelUp.Parent = Torso;
					coroutine.resume(coroutine.create(Down), VelUp);
					Gyro = Instance.new("BodyGyro");
					Gyro.P = Gyro.P * 10;
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
					Gyro.cframe = CF;
					Gyro.Parent = Torso;
					for i = 2, 28 do
						Gyro.cframe = Gyro.cframe * CFrame.fromEulerAnglesXYZ(math.pi / -8, 0, 0);
						wait();
					end
					Gyro.cframe = CF;
					wait();
					Gyro:Remove();
					Human.PlatformStand = false;
					_restoreproperties();
					debounce = false;
				end
				while doubleFlipping do
					wait();
					Flip3();
				end
			else
				doubleFlipping = true;
				local speaker = game.Players.LocalPlayer;
				local debounce = false;
				function _restoreproperties()
					local Holder = speaker.Character;
					local UpperTorso = Holder:FindFirstChild("UpperTorso");
					local RightShoulder = Holder:FindFirstChild("RightShoulder");
					local LeftShoulder = Holder:FindFirstChild("LeftShoulder");
					local RightHip = Holder:FindFirstChild("RightHip");
					local LeftHip = Holder:FindFirstChild("LeftHip");
					if (UpperTorso and RightShoulder and LeftShoulder and RightHip and LeftHip) then
						RightShoulder.MaxVelocity = 0.15;
						LeftShoulder.MaxVelocity = 0.15;
						RightHip.MaxVelocity = 0.1;
						LeftHip.MaxVelocity = 0.1;
						RightShoulder.DesiredAngle = 0;
						LeftShoulder.DesiredAngle = 0;
						LeftHip.DesiredAngle = 0;
						RightHip.DesiredAngle = 0;
					end
				end
				function ManageAnimation(value)
					local Holder = speaker.Character;
					local Player = speaker;
					if (value == "no anim") then
						local Anim = Holder:FindFirstChild("Animate");
						if (Anim ~= nil) then
							Anim.Disabled = true;
							Anim.Parent = Player;
						end
					elseif (value == "re-anim") then
						local Anim = Player:FindFirstChild("Animate");
						if (Anim ~= nil) then
							Anim.Disabled = false;
							Anim.Parent = Holder;
						end
					end
				end
				function Down(ml)
					for i = 1, ml.Velocity.Y / 3 do
						ml.Velocity = ml.Velocity + Vector3.new(0, -4.25, 0);
						wait();
					end
					ml:Destroy();
				end
				function Flip3()
					if (debounce == true) then
						return;
					end
					debounce = true;
					local Char = speaker.Character;
					local Human = Character.Humanoid;
					local Torso = Char:FindFirstChild("UpperTorso");
					if Torso then
						local CF = Torso.CFrame;
						Human.PlatformStand = true;
						local VelUp = Instance.new("BodyVelocity");
						VelUp.Velocity = Vector3.new(0, 80, 0) + (Torso.CFrame.LookVector * 35);
						VelUp.P = VelUp.P * 2;
						VelUp.MaxForce = Vector3.new(10000, 10000, 10000) * 999;
						VelUp.Parent = Torso;
						coroutine.resume(coroutine.create(Down), VelUp);
						local Gyro = Instance.new("BodyGyro");
						Gyro.P = Gyro.P * 10;
						Gyro.MaxTorque = Vector3.new(100000, 100000, 100000) * 999;
						Gyro.CFrame = CF;
						Gyro.Parent = Torso;
						for i = 2, 20 do
							Gyro.CFrame = Gyro.CFrame * CFrame.Angles(math.rad(-18), 0, 0);
							wait();
						end
						Gyro.CFrame = CF;
						wait();
						Gyro:Destroy();
						Human.PlatformStand = false;
						_restoreproperties();
						debounce = false;
					end
				end
				while doubleFlipping do
					wait();
					Flip3();
				end
			end
		end
		if not doubleflippa then
			doubleFlipping = false;
		end
	end);
end});
cwFlipping = false;
Togglecartwheel = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Cart Wheel",CurrentValue=false,Callback=function(Value)
	pcall(function()
		cartwheeling = Value;
		if cartwheeling then
			if not r15(speaker) then
				cwFlipping = true;
				function _restoreproperties()
					Torso = speaker.Character:FindFirstChild("Torso");
					RightS = Torso:FindFirstChild("Right Shoulder");
					LeftS = Torso:FindFirstChild("Left Shoulder");
					RightH = Torso:FindFirstChild("Right Hip");
					LeftH = Torso:FindFirstChild("Left Hip");
					RightS.MaxVelocity = 0.15;
					LeftS.MaxVelocity = 0.15;
					RightH.MaxVelocity = 0.1;
					LeftH.MaxVelocity = 0.1;
					RightS.DesiredAngle = 0;
					LeftS.DesiredAngle = 0;
					LeftH.DesiredAngle = 0;
					RightH.DesiredAngle = 0;
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
						wait();
					end
					ml:Remove();
				end
				function Flip()
					if (debounce == true) then
						return;
					end
					debounce = true;
					local Gyro = Instance.new("BodyGyro");
					Gyro.P = Gyro.P * 10;
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
					Gyro.CFrame = speaker.Character.Torso.CFrame;
					Gyro.Parent = speaker.Character.Torso;
					for i = 0, 50 do
						Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(math.pi / -29, 0, 0);
						wait();
					end
					Gyro.CFrame = speaker.Character.Torso.CFrame;
					wait();
					Gyro:Remove();
					speaker.Character.Humanoid.PlatformStand = false;
					_restoreproperties();
					debounce = false;
				end
				while cwFlipping do
					wait();
					Flip();
				end
			else
				cwFlipping = true;
				function _restoreproperties()
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso");
					local RightS = Torso:FindFirstChild("Right Shoulder");
					local LeftS = Torso:FindFirstChild("Left Shoulder");
					local RightH = Torso:FindFirstChild("Right Hip");
					local LeftH = Torso:FindFirstChild("Left Hip");
					if (Torso and RightS and LeftS and RightH and LeftH) then
						RightS.MaxVelocity = 0.15;
						LeftS.MaxVelocity = 0.15;
						RightH.MaxVelocity = 0.1;
						LeftH.MaxVelocity = 0.1;
						RightS.DesiredAngle = 0;
						LeftS.DesiredAngle = 0;
						LeftH.DesiredAngle = 0;
						RightH.DesiredAngle = 0;
					end
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
						task.wait();
					end
					ml:Remove();
				end
				function Flip()
					if (debounce == true) then
						return;
					end
					debounce = true;
					local Gyro = Instance.new("BodyGyro");
					Gyro.P = Gyro.P * 10;
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso");
					if Torso then
						Gyro.CFrame = Torso.CFrame;
						Gyro.Parent = Torso;
						for i = 0, 50 do
							Gyro.CFrame = Gyro.CFrame * CFrame.Angles(math.rad(-7), 0, 0);
							wait();
						end
						Gyro.CFrame = Torso.CFrame;
						wait();
						Gyro:Remove();
						speaker.Character.Humanoid.PlatformStand = false;
						_restoreproperties();
						debounce = false;
					end
				end
				while cwFlipping do
					wait();
					Flip();
				end
			end
		end
		if not cartwheeling then
			cwFlipping = false;
		end
	end);
end});
StarRoll = false;
Togglecartwheel = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Star Roll",CurrentValue=false,Callback=function(Value)
	pcall(function()
		starrolling = Value;
		if starrolling then
			if not r15(speaker) then
				StarRoll = true;
				function _restoreproperties()
					Torso = speaker.Character:FindFirstChild("Torso");
					RightS = Torso:FindFirstChild("Right Shoulder");
					LeftS = Torso:FindFirstChild("Left Shoulder");
					RightH = Torso:FindFirstChild("Right Hip");
					LeftH = Torso:FindFirstChild("Left Hip");
					RightS.MaxVelocity = 0.15;
					LeftS.MaxVelocity = 0.15;
					RightH.MaxVelocity = 0.1;
					LeftH.MaxVelocity = 0.1;
					RightS.DesiredAngle = 0;
					LeftS.DesiredAngle = 0;
					LeftH.DesiredAngle = 0;
					RightH.DesiredAngle = 0;
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
						wait();
					end
					ml:Remove();
				end
				function Flip()
					if (debounce == true) then
						return;
					end
					debounce = true;
					local Gyro = Instance.new("BodyGyro");
					Gyro.P = Gyro.P * 10;
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
					Gyro.CFrame = speaker.Character.Torso.CFrame;
					Gyro.Parent = speaker.Character.Torso;
					for i = 0, 50 do
						Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(0, 0, math.pi / -29);
						wait();
					end
					Gyro.CFrame = speaker.Character.Torso.CFrame;
					wait();
					Gyro:Remove();
					speaker.Character.Humanoid.PlatformStand = false;
					_restoreproperties();
					debounce = false;
				end
				while StarRoll do
					wait();
					Flip();
				end
			else
				StarRoll = true;
				function _restoreproperties()
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso");
					local RightS = Torso:FindFirstChild("Right Shoulder");
					local LeftS = Torso:FindFirstChild("Left Shoulder");
					local RightH = Torso:FindFirstChild("Right Hip");
					local LeftH = Torso:FindFirstChild("Left Hip");
					if (Torso and RightS and LeftS and RightH and LeftH) then
						RightS.MaxVelocity = 0.15;
						LeftS.MaxVelocity = 0.15;
						RightH.MaxVelocity = 0.1;
						LeftH.MaxVelocity = 0.1;
						RightS.DesiredAngle = 0;
						LeftS.DesiredAngle = 0;
						LeftH.DesiredAngle = 0;
						RightH.DesiredAngle = 0;
					end
				end
				function Down(ml)
					for i = 1, ml.velocity.y / 3 do
						ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
						wait();
					end
					ml:Remove();
				end
				function Flip()
					if (debounce == true) then
						return;
					end
					debounce = true;
					local Gyro = Instance.new("BodyGyro");
					Gyro.P = Gyro.P * 10;
					Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
					local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso");
					if Torso then
						Gyro.CFrame = Torso.CFrame;
						Gyro.Parent = Torso;
						for i = 0, 50 do
							Gyro.CFrame = Gyro.CFrame * CFrame.Angles(0, 0, math.rad(-7));
							wait();
						end
						Gyro.CFrame = Torso.CFrame;
						task.wait();
						Gyro:Remove();
						speaker.Character.Humanoid.PlatformStand = false;
						_restoreproperties();
						debounce = false;
					end
				end
				while StarRoll do
					wait();
					Flip();
				end
			end
		end
		if not starrolling then
			StarRoll = false;
		end
	end);
end});
local seizureFlipping = false;
Toggleseizuree = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Seizure",CurrentValue=false,Callback=function(Value)
	seizure = Value;
	if seizure then
		if not r15(speaker) then
			seizureFlipping = true;
			function _restoreproperties()
				Torso = Character:FindFirstChild("Torso");
				RightS = Torso:FindFirstChild("Right Shoulder");
				LeftS = Torso:FindFirstChild("Left Shoulder");
				RightH = Torso:FindFirstChild("Right Hip");
				LeftH = Torso:FindFirstChild("Left Hip");
				RightS.MaxVelocity = 0.15;
				LeftS.MaxVelocity = 0.15;
				RightH.MaxVelocity = 0.1;
				LeftH.MaxVelocity = 0.1;
				RightS.DesiredAngle = 0;
				LeftS.DesiredAngle = 0;
				LeftH.DesiredAngle = 0;
				RightH.DesiredAngle = 0;
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
					wait();
				end
				ml:Remove();
			end
			function Flip5()
				if (debounce == true) then
					return;
				end
				debounce = true;
				Character.Humanoid.PlatformStand = true;
				local VelUp = Instance.new("BodyVelocity");
				VelUp.maxForce = Vector3.new(10000, 10000, 10000) * 999;
				VelUp.Parent = Character.Torso;
				coroutine.resume(coroutine.create(Down), VelUp);
				local Gyro = Instance.new("BodyGyro");
				Gyro.P = Gyro.P * 10;
				Gyro.CFrame = Character.Torso.CFrame;
				Gyro.Parent = Character.Torso;
				for i = 1, 16 do
					Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(math.pi / 9, math.pi / -18, 0);
					wait();
				end
				Gyro.CFrame = Character.Torso.CFrame;
				wait();
				Gyro:Remove();
				Character.Humanoid.PlatformStand = false;
				_restoreproperties();
				debounce = false;
			end
			while seizureFlipping do
				task.wait();
				Flip5();
			end
		else
			seizureFlipping = true;
			debounce = false;
			local function _restoreproperties()
				local UpperTorso = Character:FindFirstChild("UpperTorso");
				if not UpperTorso then
					return;
				end
				local RightShoulder = UpperTorso:FindFirstChild("Right Shoulder");
				local LeftShoulder = UpperTorso:FindFirstChild("Left Shoulder");
				local RightHip = Character:FindFirstChild("RightUpperLeg"):FindFirstChild("Right Hip");
				local LeftHip = Character:FindFirstChild("LeftUpperLeg"):FindFirstChild("Left Hip");
				if (RightShoulder and LeftShoulder and RightHip and LeftHip) then
					RightShoulder.MaxVelocity = 0.15;
					LeftShoulder.MaxVelocity = 0.15;
					RightHip.MaxVelocity = 0.1;
					LeftHip.MaxVelocity = 0.1;
					RightShoulder.DesiredAngle = 0;
					LeftShoulder.DesiredAngle = 0;
					LeftHip.DesiredAngle = 0;
					RightHip.DesiredAngle = 0;
				end
			end
			local function Down(ml)
				for i = 1, ml.Velocity.Y / 3 do
					ml.Velocity = ml.Velocity + Vector3.new(0, -0.25, 0);
					wait();
				end
				ml:Destroy();
			end
			local function Flip5()
				if debounce then
					return;
				end
				debounce = true;
				Character.Humanoid.PlatformStand = true;
				local VelUp = Instance.new("BodyVelocity");
				VelUp.Velocity = Vector3.new(0, 10, 0);
				VelUp.MaxForce = Vector3.new(10000, 10000, 10000) * 999;
				VelUp.Parent = Character.HumanoidRootPart;
				coroutine.resume(coroutine.create(Down), VelUp);
				local Gyro = Instance.new("BodyGyro");
				Gyro.P = Gyro.P * 10;
				Gyro.CFrame = Character.HumanoidRootPart.CFrame;
				Gyro.MaxTorque = Vector3.new(100000, 100000, 100000) * 999;
				Gyro.Parent = Character.HumanoidRootPart;
				for i = 1, 16 do
					local randomRotationX = math.random(-math.pi, math.pi) / 9;
					local randomRotationY = math.random(-math.pi, math.pi) / 9;
					local randomRotationZ = math.random(-math.pi, math.pi) / 9;
					Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(randomRotationX, randomRotationY, randomRotationZ);
					wait();
				end
				Gyro.CFrame = Character.HumanoidRootPart.CFrame;
				wait();
				Gyro:Destroy();
				Character.Humanoid.PlatformStand = false;
				_restoreproperties();
				debounce = false;
			end
			while seizureFlipping do
				wait();
				Flip5();
			end
		end
	end
	if not seizure then
		seizureFlipping = false;
	end
end});
BarrelRoll = false;
Looproll = false;
Togglecartwheel = Misc:CreateToggle({SectionParent=Sectionflipsnthings,Name="Barrel Roll",CurrentValue=false,Callback=function(Value)
	barrelrolling = Value;
	if barrelrolling then
		if not r15(speaker) then
			BarrelRoll = true;
			function _restoreproperties()
				Torso = speaker.Character:FindFirstChild("Torso");
				RightS = Torso:FindFirstChild("Right Shoulder");
				LeftS = Torso:FindFirstChild("Left Shoulder");
				RightH = Torso:FindFirstChild("Right Hip");
				LeftH = Torso:FindFirstChild("Left Hip");
				RightS.MaxVelocity = 0.15;
				LeftS.MaxVelocity = 0.15;
				RightH.MaxVelocity = 0.1;
				LeftH.MaxVelocity = 0.1;
				RightS.DesiredAngle = 0;
				LeftS.DesiredAngle = 0;
				LeftH.DesiredAngle = 0;
				RightH.DesiredAngle = 0;
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
					wait();
				end
				ml:Remove();
			end
			Looproll = true;
			function Flip()
				if (debounce == true) then
					return;
				end
				debounce = true;
				local Gyro = Instance.new("BodyGyro");
				Gyro.P = Gyro.P * 10;
				Gyro.maxTorque = Vector3.new(99999997952, 99999997952, 99999997952) * 8999999488;
				Gyro.CFrame = speaker.Character.Torso.CFrame;
				Gyro.Parent = speaker.Character.Torso;
				local initialPosition = speaker.Character.Torso.Position;
				local initialOrientation = speaker.Character.Torso.CFrame - speaker.Character.Torso.Position;
				Gyro.CFrame = (initialOrientation * CFrame.fromEulerAnglesXYZ(0, 0, math.pi / 2)) + initialPosition;
				while Looproll do
					Gyro.CFrame = Gyro.CFrame * CFrame.fromEulerAnglesXYZ(0, math.pi / -34, 0);
					wait();
				end
				speaker.Character.Torso.CFrame = initialOrientation + initialPosition;
				wait();
				Gyro:Remove();
				speaker.Character.Humanoid.PlatformStand = false;
				_restoreproperties();
				debounce = false;
			end
			while BarrelRoll do
				wait();
				Flip();
			end
		else
			BarrelRoll = true;
			function _restoreproperties()
				local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso");
				local RightS = Torso:FindFirstChild("Right Shoulder");
				local LeftS = Torso:FindFirstChild("Left Shoulder");
				local RightH = Torso:FindFirstChild("Right Hip");
				local LeftH = Torso:FindFirstChild("Left Hip");
				if (Torso and RightS and LeftS and RightH and LeftH) then
					RightS.MaxVelocity = 0.15;
					LeftS.MaxVelocity = 0.15;
					RightH.MaxVelocity = 0.1;
					LeftH.MaxVelocity = 0.1;
					RightS.DesiredAngle = 0;
					LeftS.DesiredAngle = 0;
					LeftH.DesiredAngle = 0;
					RightH.DesiredAngle = 0;
				end
			end
			function Down(ml)
				for i = 1, ml.velocity.y / 3 do
					ml.velocity = ml.velocity + Vector3.new(0, -4.25, 0);
					task.wait();
				end
				ml:Remove();
			end
			Looproll = true;
			function Flip()
				if (debounce == true) then
					return;
				end
				debounce = true;
				local Gyro = Instance.new("BodyGyro");
				Gyro.P = Gyro.P * 10;
				Gyro.maxTorque = Vector3.new(100000, 100000, 100000) * 999;
				local Torso = speaker.Character:FindFirstChild("UpperTorso") or speaker.Character:FindFirstChild("Torso");
				if Torso then
					Gyro.CFrame = Torso.CFrame;
					Gyro.Parent = Torso;
					local initialCFrame = Torso.CFrame;
					Gyro.CFrame = initialCFrame * CFrame.fromEulerAnglesXYZ(0, 0, math.pi / 2);
					while Looproll do
						Gyro.CFrame = Gyro.CFrame * CFrame.Angles(0, math.rad(-9), 0);
						task.wait();
					end
					Gyro.CFrame = Torso.CFrame;
					task.wait();
					Gyro:Remove();
					speaker.Character.Humanoid.PlatformStand = false;
					_restoreproperties();
					debounce = false;
				end
			end
			while BarrelRoll do
				task.wait();
				Flip();
			end
		end
	end
	if not barrelrolling then
		BarrelRoll = false;
		Looproll = false;
	end
end});
hbackflipnfrontflip = 0.0174533;
BackflipKeybind = Misc:CreateKeybind({Name="BackFlip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionflipsnthings,Callback=function(KeyBind)
	backflips = KeyBind;
	backflips = not backflips;
	if backflips then
		function speakerBackflip()
			speaker.Character.Humanoid:ChangeState("Jumping");
			task.wait();
			speaker.Character.Humanoid.Sit = true;
			for i = 1, 360 do
				delay(i / 720, function()
					speaker.Character.Humanoid.Sit = true;
					speaker.Character.HumanoidRootPart.CFrame = speaker.Character.HumanoidRootPart.CFrame * CFrame.Angles(hbackflipnfrontflip, 0, 0);
				end);
			end
			task.wait(0.55);
			speaker.Character.Humanoid.Sit = false;
		end
		speakerBackflip();
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionflipsnthings,Name="Reset BackFlip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		BackflipKeybind:Set("Set Keybind");
	end);
end});
SideflipKeybind = Misc:CreateKeybind({Name="SideFlip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionflipsnthings,Callback=function(KeyBind)
	sideflips = KeyBind;
	sideflips = not sideflips;
	if sideflips then
		function speakerSideflip()
			speaker.Character.Humanoid:ChangeState("Jumping");
			task.wait();
			speaker.Character.Humanoid.Sit = true;
			for i = 1, 360 do
				delay(i / 720, function()
					speaker.Character.Humanoid.Sit = true;
					speaker.Character.HumanoidRootPart.CFrame = speaker.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, 0, -hbackflipnfrontflip);
				end);
			end
			task.wait(0.55);
			speaker.Character.Humanoid.Sit = false;
		end
		speakerSideflip();
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionflipsnthings,Name="Reset SideFlip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		SideflipKeybind:Set("Set Keybind");
	end);
end});
FrontflipKeybind = Misc:CreateKeybind({Name="FrontFlip Keybind",CurrentKeybind="Set Keybind",HoldToInteract=false,SectionParent=Sectionflipsnthings,Callback=function(KeyBind)
	frontflips = KeyBind;
	frontflips = not frontflips;
	if frontflips then
		function speakerFrontflip()
			speaker.Character.Humanoid:ChangeState("Jumping");
			task.wait();
			speaker.Character.Humanoid.Sit = true;
			for i = 1, 360 do
				delay(i / 720, function()
					speaker.Character.Humanoid.Sit = true;
					speaker.Character.HumanoidRootPart.CFrame = speaker.Character.HumanoidRootPart.CFrame * CFrame.Angles(-hbackflipnfrontflip, 0, 0);
				end);
			end
			task.wait(0.55);
			speaker.Character.Humanoid.Sit = false;
		end
		speakerFrontflip();
	end
end});
Button = Misc:CreateButton({SectionParent=Sectionflipsnthings,Name="Reset FrontFlip Keybind",Callback=function()
	effecttrue();
	NSUI:Notify({Title="Reset!",Content="Reseted The Keybind!",Duration=2,Image=7733715400});
	pcall(function()
		FrontflipKeybind:Set("Set Keybind");
	end);
end});
Sectionhamsterball = Misc:CreateSection("FE LocalPlayer Related | Hamster Ball", false, false, 9134761478);
Paragraph = Misc:CreateParagraph({Title="Hamster Ball Info",Content="People See You Rolling Like a Hamster Ball, But They Don't See The Ball"}, Sectionhamsterball);
SPEED_MULTIPLIER = 30;
JUMP_POWER = 60;
JUMP_GAP = 0.3;
Togglehamsterball = Misc:CreateToggle({SectionParent=Sectionhamsterball,Name="Hamster Ball",CurrentValue=false,Callback=function(Value)
	hamsterballs = Value;
	if hamsterballs then
		character = speaker.Character;
		for i, v in ipairs(character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = false;
			end
		end
		ball = character.HumanoidRootPart;
		ball.Shape = Enum.PartType.Ball;
		ballColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255));
		ball.Color = ballColor;
		ball.Size = Vector3.new(7, 7, 7);
		ball.Transparency = 0.5;
		humanoid = character:WaitForChild("Humanoid");
		params = RaycastParams.new();
		params.FilterType = Enum.RaycastFilterType.Blacklist;
		params.FilterDescendantsInstances = {character};
		tc = RunService.RenderStepped:Connect(function(delta)
			ball.CanCollide = true;
			humanoid.PlatformStand = true;
			if UserInputService:GetFocusedTextBox() then
				return;
			end
			if UserInputService:IsKeyDown("W") then
				ball.RotVelocity -= (Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER)
			end
			if UserInputService:IsKeyDown("A") then
				ball.RotVelocity -= (Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER)
			end
			if UserInputService:IsKeyDown("S") then
				ball.RotVelocity += (Camera.CFrame.RightVector * delta * SPEED_MULTIPLIER)
			end
			if UserInputService:IsKeyDown("D") then
				ball.RotVelocity += (Camera.CFrame.LookVector * delta * SPEED_MULTIPLIER)
			end
		end);
		UserInputService.JumpRequest:Connect(function()
			local result = workspace:Raycast(ball.Position, Vector3.new(0, -((ball.Size.Y / 2) + JUMP_GAP), 0), params);
			if result then
				ball.Velocity = ball.Velocity + Vector3.new(0, JUMP_POWER, 0);
			end
		end);
		Camera.CameraSubject = ball;
		local hamDied;
		hamDied = humanoid.Died:Connect(function()
			tc:Disconnect();
			hamDied:Disconnect();
		end);
	end
	if not hamsterballs then
		pcall(function()
			charresettopos();
			tc:Disconnect();
			hamDied:Disconnect();
		end);
	end
end});
Buttonresethamval = Misc:CreateButton({SectionParent=Sectionhamsterball,Name="Reset Hamster Ball Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderspeedmultiham:Set(30);
		Sliderhamjp:Set(60);
		Sliderjgham:Set(0.3);
		SPEED_MULTIPLIER = 30;
		JUMP_POWER = 60;
		JUMP_GAP = 0.3;
	end);
end});
Sliderspeedmultiham = Misc:CreateSlider({SectionParent=Sectionhamsterball,Name="Hamster Ball Speed",Range={0,250},Increment=1,Suffix="Speed",CurrentValue=30,Callback=function(Value)
	pcall(function()
		SPEED_MULTIPLIER = Value;
	end);
end});
Inputpeedmultiham = Misc:CreateInput({SectionParent=Sectionhamsterball,Name="Hamster Ball Speed",PlaceholderText=30,RemoveTextAfterFocusLost=false,Callback=function(Text)
	SPEED_MULTIPLIER = Text;
end});
Sliderhamjp = Misc:CreateSlider({SectionParent=Sectionhamsterball,Name="Hamster Ball Jump Power",Range={0,250},Increment=1,Suffix="Jump Power",CurrentValue=60,Callback=function(Value)
	pcall(function()
		JUMP_POWER = Value;
	end);
end});
Inputspinspeed = Misc:CreateInput({SectionParent=Sectionhamsterball,Name="Hamster Ball Jump Power",PlaceholderText=60,RemoveTextAfterFocusLost=false,Callback=function(Text)
	JUMP_POWER = Text;
end});
Sliderjgham = Misc:CreateSlider({SectionParent=Sectionhamsterball,Name="Hamster Ball Jump Gap",Range={0,15},Increment=0.1,Suffix="Jump Gap",CurrentValue=0.3,Callback=function(Value)
	pcall(function()
		JUMP_GAP = Value;
	end);
end});
Inputspinspeed = Misc:CreateInput({SectionParent=Sectionhamsterball,Name="Hamster Ball Speed",PlaceholderText=0.3,RemoveTextAfterFocusLost=false,Callback=function(Text)
	JUMP_GAP = Text;
end});
Sectionspin = Misc:CreateSection("FE LocalPlayer Related | Spin", false, false, 9134761478);
spinSpeed = 20;
Togglespinner = Misc:CreateToggle({SectionParent=Sectionspin,Name="Spin",CurrentValue=false,Callback=function(Value)
	pcall(function()
		spinner = Value;
		if spinner then
			Spin = Instance.new("BodyAngularVelocity");
			Spin.Name = "Spinning";
			Spin.Parent = getRoot(speaker.Character);
			Spin.MaxTorque = Vector3.new(0, math.huge, 0);
			task.spawn(function()
				while task.wait() do
					Spin.AngularVelocity = Vector3.new(0, spinSpeed, 0);
				end
			end);
		end
		if not spinner then
			for i, v in pairs(getRoot(speaker.Character):GetChildren()) do
				if (v.Name == "Spinning") then
					v:Destroy();
				end
			end
		end
	end);
end});
Sliderspinspeed = Misc:CreateSlider({SectionParent=Sectionspin,Name="Spin Speed",Range={0,780},Increment=1,Suffix="Spin Speed",CurrentValue=20,Callback=function(Value)
	pcall(function()
		spinSpeed = Value;
	end);
end});
Inputspinspeed = Misc:CreateInput({SectionParent=Sectionspin,Name="Spin Speed",PlaceholderText=20,RemoveTextAfterFocusLost=false,Callback=function(Text)
	spinSpeed = Text;
end});
Sectionlpsliderinputloops = Misc:CreateSection("FE LocalPlayer Related | Slider's & Input Loop's", false, true, 10686489468);
Buttonresetflysvalue = Misc:CreateButton({SectionParent=Sectionlpsliderinputloops,Name="Reset Character Loop Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderwalkloop:Set(16);
		Sliderjumploop:Set(50);
	end);
end});
walkspeedsped = 16;
Label = Misc:CreateLabel("Set A Value First Then Enable", Sectionlpsliderinputloops);
Toggle = Misc:CreateToggle({SectionParent=Sectionlpsliderinputloops,Name="Loop Walk Speed",CurrentValue=false,Callback=function(Value)
	pcall(function()
		loopws = Value;
		if loopws then
			walkspeedloop = RunService.Heartbeat:Connect(function()
				if isNumber(walkspeedsped) then
					local Char = speaker.Character or workspace:FindFirstChild(speaker.Name);
					local Human = Char and Char:FindFirstChildWhichIsA("Humanoid");
					local function WalkSpeedChange()
						if (Char and Human) then
							Human.WalkSpeed = walkspeedsped;
						end
					end
					WalkSpeedChange();
					HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange);
					HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid");
						WalkSpeedChange();
						HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange);
					end);
				end
			end);
		end
		if not loopws then
			walkspeedloop:Disconnect();
			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil;
			HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil;
		end
	end);
end});
Sliderwalkloop = Misc:CreateSlider({SectionParent=Sectionlpsliderinputloops,Name="Loop Walk Speed",Range={1,300},Increment=1,Suffix="Speed",CurrentValue=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),Callback=function(Value)
	pcall(function()
		walkspeedsped = Value;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectionlpsliderinputloops,Name="Loop Walk Speed",OnEnter=true,PlaceholderText=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	walkspeedsped = Text;
end});
jpower = 50;
Toggle = Misc:CreateToggle({SectionParent=Sectionlpsliderinputloops,Name="Loop Jump Power / Height",CurrentValue=false,Callback=function(Value)
	pcall(function()
		loopjp = Value;
		if loopjp then
			jumppowerloop = RunService.Heartbeat:Connect(function()
				if isNumber(jpower) then
					local Char = speaker.Character or workspace:FindFirstChild(speaker.Name);
					local Human = Char and Char:FindFirstChildWhichIsA("Humanoid");
					local function JumpPowerChange()
						if (Char and Human) then
							if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
								speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower = jpower;
							else
								speaker.Character:FindFirstChildOfClass("Humanoid").JumpHeight = jpower;
							end
						end
					end
					JumpPowerChange();
					HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange);
					HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid");
						JumpPowerChange();
						HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange);
					end);
				end
			end);
		end
		if not loopjp then
			jumppowerloop:Disconnect();
			local Char = speaker.Character or workspace:FindFirstChild(speaker.Name);
			local Human = Char and Char:FindFirstChildWhichIsA("Humanoid");
			HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or nil;
			HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or nil;
			if (Char and Human) then
				if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
					speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower = 50;
				else
					speaker.Character:FindFirstChildOfClass("Humanoid").JumpHeight = 7;
				end
			end
		end
	end);
end});
Sliderjumploop = Misc:CreateSlider({SectionParent=Sectionlpsliderinputloops,Name="Loop Jump Power / Height",Range={1,350},Increment=1,Suffix="Power | Height",CurrentValue=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower),Callback=function(Value)
	pcall(function()
		jpower = Value;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectionlpsliderinputloops,Name="Loop Jump Power / Height",OnEnter=true,PlaceholderText=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	jpower = Text;
end});
function getJumpValue()
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
	if humanoid.UseJumpPower then
		return math.floor(humanoid.JumpPower);
	else
		return math.floor(humanoid.JumpHeight);
	end
end
function getJumpValue2()
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
	if humanoid.UseJumpPower then
		return "Jump Power";
	else
		return "Jump Height";
	end
end
function getJumpValue3()
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
	if humanoid.UseJumpPower then
		return 600;
	else
		return 400;
	end
end
Sectionlpsliderinput = Misc:CreateSection("FE LocalPlayer Related | Slider's & Input's", false, false, 10686489468);
Buttonresetcharactervalue = Misc:CreateButton({SectionParent=Sectionlpsliderinput,Name="Reset Char Values",Interact="Click",Callback=function()
	Sliderwalk:Set(16);
	if not r15(speaker) then
		Sliderhip:Set(0);
		speaker.Character.Humanoid.HipHeight = 0;
	else
		Sliderhip:Set(2);
		speaker.Character.Humanoid.HipHeight = 2;
	end
	if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
		Sliderjpower:Set(50);
	else
		Sliderjpower:Set(7);
	end
	Slidergrav:Set(196);
end});
Sliderwalk = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Walk Speed",Range={1,300},Increment=1,Suffix="Speed",CurrentValue=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),Callback=function(Value)
	pcall(function()
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Walk Speed",NumbersOnly=true,OnEnter=true,PlaceholderText=math.floor(speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Text;
	end);
end});
Sliderhip = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Hip Height",Range={-2,100},Increment=1,Suffix="Hip Height",CurrentValue=math.floor(speaker.Character.Humanoid.HipHeight),Callback=function(Value)
	pcall(function()
		speaker.Character.Humanoid.HipHeight = Value;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Hip Height",NumbersOnly=true,OnEnter=true,PlaceholderText=math.floor(speaker.Character.Humanoid.HipHeight),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		speaker.Character.Humanoid.HipHeight = Text;
	end);
end});
Sliderjpower = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Jump Power / Jump Height",Range={1,getJumpValue3()},Increment=1,Suffix=getJumpValue2(),CurrentValue=getJumpValue(),Callback=function(Value)
	pcall(function()
		if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower = Value;
		else
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpHeight = Value;
		end
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Jump Power / Jump Height",NumbersOnly=true,OnEnter=true,PlaceholderText=getJumpValue(),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpPower = Text;
		else
			speaker.Character:FindFirstChildOfClass("Humanoid").JumpHeight = Text;
		end
	end);
end});
Slidergrav = Misc:CreateSlider({SectionParent=Sectionlpsliderinput,Name="Gravity",Range={0,700},Increment=1,Suffix="Gravity",CurrentValue=math.floor(game.Workspace.Gravity),Callback=function(Value)
	pcall(function()
		game.Workspace.Gravity = Value;
	end);
end});
Input = Misc:CreateInput({SectionParent=Sectionlpsliderinput,Name="Gravity",NumbersOnly=true,OnEnter=true,PlaceholderText=math.floor(game.Workspace.Gravity),RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		game.Workspace.Gravity = Text;
	end);
end});
MiscPlayer = Window:CreateTab("Universal Player", 9080478424);
Sectiontotalscrismisc = MiscPlayer:CreateSection("Total Universal Script's: " .. Scriptcount, false, false, 7743869612);
Paragraphtotal = MiscPlayer:CreateParagraph({Title="General Note",Content="Section's With FE (Filtering Enabled) Can Be Seen By Other Player's\nIf a Section Has (Client) Mean's You Only Can See It.\nThe Dropdown's You See, You Can Close Them By Pressing The Arrow."}, Sectiontotalscrismisc);
Sectionplayrerelatedtp = MiscPlayer:CreateSection("FE Player Related | Silly & Misc & Other", false, false, 10686489468);
Paragraph = MiscPlayer:CreateParagraph({Title="Important Info",Content="The Dropdown Button's Are Like a Toggle."}, Sectionplayrerelatedtp);
local Annoy = false;
AlldropdownRefresh.Annoydropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Annoy",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Annoy == true) then
					Annoy = false;
					effectfalse();
					notifyyw("No Longer Annoying The Player ", "Not Annoying " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					return;
				else
					Annoy = true;
					effecttrue();
					notifyyw("Now Annoying", "Annoying " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					while Annoy do
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 0, 0);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local glued = false;
AlldropdownRefresh.GluetoPLRdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Glue",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (glued == true) then
					glued = false;
					effectfalse();
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
					notifyyw("No Longer Glued To Player", "Not Glued To " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					return;
				else
					glued = true;
					effecttrue();
					notifyyw("Now Glued", "Glued To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					while glued do
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.new(speaker.Character.HumanoidRootPart.CFrame.lookVector.X, foundPlr.Character.HumanoidRootPart.Size.Y, speaker.Character.HumanoidRootPart.CFrame.lookVector.Z);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local walkto = false;
AlldropdownRefresh.WalkTodropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Walk To",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (walkto == true) then
					walkto = false;
					effectfalse();
					notifyyw("No Longer Walking To Player", "Not Walking To " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					return;
				else
					walkto = true;
					effecttrue();
					notifyyw("Now Walking", "Walking To " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					while walkto do
						speaker.Character.Humanoid:MoveTo(foundPlr.Character.HumanoidRootPart.Position);
						task.wait();
					end
				end
			end
		end
	end);
end});
local StandOnHead = false;
AlldropdownRefresh.StandOndropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Stand On",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (StandOnHead == true) then
					StandOnHead = false;
					effectfalse();
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
					notifyyw("No Longer Standing On The Player ", "Not Standing On " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					return;
				else
					StandOnHead = true;
					effecttrue();
					notifyyw("Now Standing", "Standing On " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					while StandOnHead do
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 5.4, 0);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
Paragraph = MiscPlayer:CreateParagraph({Title="Spook Info",Content="Teleport's You To The Player For A Few Seconds To Spook Them"}, Sectionplayrerelatedtp);
AlldropdownRefresh.Spookdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Spook",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		prev = speaker.Character:WaitForChild("HumanoidRootPart").CFrame;
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0, 3.2);
			wait(0.9);
			speaker.Character:WaitForChild("HumanoidRootPart").CFrame = prev;
		elseif (foundPlr == speaker) then
			return nil;
		end
	end);
end});
local Follow = false;
AlldropdownRefresh.followdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Stalk",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			flwnum = -5;
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Follow == true) then
					Follow = false;
					notifyyw("No Longer Stalking The Player", "Not Stalking " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					return;
				else
					Follow = true;
					notifyyw("Now Stalking", "Stalking " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while Follow do
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame + (foundPlr.Character.HumanoidRootPart.CFrame.lookVector * flwnum);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local LoopHello = false;
local trueforanim = false;
AlldropdownRefresh.loopwavedropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Loop Wave / Greeting",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if ((LoopHello == true) and (trueforanim == true)) then
					LoopHello = false;
					trueforanim = false;
					WaverDied:Disconnect();
					Waver:Stop();
					WaveAnim:Destroy();
					notifyyw("No Longer Greeting The Player", "Not Greeting " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					return;
				else
					LoopHello = true;
					trueforanim = true;
					notifyyw("Now Greeting", "Greeting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					WaveAnim = Instance.new("Animation");
					if not r15(speaker) then
						WaveAnim.AnimationId = "rbxassetid://128777973";
					else
						WaveAnim.AnimationId = "rbxassetid://507770239";
					end
					Waver = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(WaveAnim);
					WaverDied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
						WaverDied:Disconnect();
						Waver:Stop();
						WaveAnim:Destroy();
					end);
					while LoopHello do
						if (speaker.Character and foundPlr.Character) then
							speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0, 3.2);
							speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						end
						if trueforanim then
							Waver:Play(0.1, 10, 1);
							task.wait(1.8);
						end
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local Carpettion = false;
AlldropdownRefresh.Carpetdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Carpet",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if not r15(speaker) then
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					if (Carpettion == true) then
						Carpettion = false;
						effectfalse();
						notifyyw("No Longer Carpeting The Player", "Not Carpeting " .. foundPlr.Name .. " Anymore", 2, 10747384394);
						carpete:Stop();
						carpetAnim:Destroy();
						return;
					else
						Carpettion = true;
						carpetAnim = Instance.new("Animation");
						carpetAnim.AnimationId = "rbxassetid://282574440";
						carpete = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(carpetAnim);
						carpete:Play(0.1, 1, 1);
						effecttrue();
						notifyyw("Now Carpeting", "Carpeting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
						while Carpettion do
							speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 0, 0);
							speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
							game:GetService("RunService").RenderStepped:Wait();
						end
					end
				end
			else
				notifyyw("R6!", "R6 Rig Type Is Needed To Use This!", 2, 10747384394);
				effectfalse();
			end
		end
	end);
end});
local ffhugger = false;
AlldropdownRefresh.Hugdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Hug",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if not r15(speaker) then
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					if (ffhugger == true) then
						ffhugger = false;
						notifyyw("No Longer Hugging The Player", "Not Hugging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
						effectfalse();
						zomearm:Stop();
						zombiearmsAnim:Destroy();
						return;
					else
						ffhugger = true;
						zombiearmsAnim = Instance.new("Animation");
						zombiearmsAnim.AnimationId = "rbxassetid://183294396";
						zomearm = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(zombiearmsAnim);
						zomearm:Play();
						zomearm:AdjustSpeed(0);
						notifyyw("Now Hugging", "Hugging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
						effecttrue();
						while ffhugger do
							speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0.6, 0, 1);
							speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
							game:GetService("RunService").RenderStepped:Wait();
						end
					end
				end
			elseif (ffhugger == true) then
				ffhugger = false;
				notifyyw("No Longer Hugging The Player", "Not Hugging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				effectfalse();
				zomearm:Stop();
				zombiearmsAnim:Destroy();
				speaker.Character.Animate.Disabled = false;
				return;
			else
				ffhugger = true;
				zombiearmsAnim = Instance.new("Animation");
				zombiearmsAnim.AnimationId = "rbxassetid://708553116";
				zomearm = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(zombiearmsAnim);
				zomearm:Play();
				zomearm:AdjustSpeed(0);
				speaker.Character.Animate.Disabled = true;
				notifyyw("Now Hugging", "Hugging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				effecttrue();
				while ffhugger do
					speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0.6, 0, 1);
					speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
					game:GetService("RunService").RenderStepped:Wait();
				end
			end
		end
	end);
end});
local actualpb = false;
AlldropdownRefresh.Piggybackdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="PiggyBack",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (actualpb == true) then
					actualpb = false;
					notifyyw("No Longer PiggyBacking The Player", "Not PiggyBacking " .. foundPlr.Name .. "", 2, 10747384394);
					speaker.Character.Humanoid.Sit = false;
					effectfalse();
					return;
				else
					actualpb = true;
					notifyyw("Now PiggyBacking", "PiggyBacking " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while actualpb do
						speaker.Character.Humanoid.Sit = true;
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 0.4, 1.2);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local besomebackpack = false;
AlldropdownRefresh.backpackdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Backpack",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (besomebackpack == true) then
					besomebackpack = false;
					notifyyw("No Longer Backpacking The Player", "Not Backpacking " .. foundPlr.Name .. "", 2, 10747384394);
					speaker.Character.Humanoid.Sit = false;
					effectfalse();
					return;
				else
					besomebackpack = true;
					notifyyw("Now Backpacking", "Being " .. foundPlr.Name .. " Backpack", 2, 10709790644);
					effecttrue();
					while besomebackpack do
						speaker.Character.Humanoid.Sit = true;
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, -0.21, -1);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local headsits = false;
AlldropdownRefresh.Headsitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Headsit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (headsits == true) then
					headsits = false;
					notifyyw("No Longer HeadSitting The Player", "Not HeadSitting " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					speaker.Character.Humanoid.Sit = false;
					effectfalse();
					return;
				else
					headsits = true;
					notifyyw("Now HeadSitting", "HeadSitting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while headsits do
						speaker.Character.Humanoid.Sit = true;
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 1.6, 0.4);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local baskets = false;
AlldropdownRefresh.Basketdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Basket",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	plrName = Option:match("^(.-) %(");
	foundPlr = getPlr(plrName);
	if foundPlr then
		if not r15(speaker) then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (baskets == true) then
					baskets = false;
					notifyyw("No Longer Basketting The Player", "Not Being " .. foundPlr.Name .. " Basket Anymore", 2, 10747384394);
					speaker.Character.Humanoid.Sit = false;
					effectfalse();
					return;
				else
					baskets = true;
					notifyyw("Now Basketting", "Being " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ") Basket", 4, 10709790644);
					effecttrue();
					while baskets do
						speaker.Character.Humanoid.Sit = true;
						local targetArm = foundPlr.Character:FindFirstChild("RightHand") or foundPlr.Character:FindFirstChild("Right Arm");
						if targetArm then
							speaker.Character.HumanoidRootPart.CFrame = targetArm.CFrame * CFrame.Angles(math.rad(90), math.rad(0), 0) * CFrame.new(0, 0, 1.6);
							speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						end
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		elseif (baskets == true) then
			baskets = false;
			notifyyw("No Longer Basketting The Player", "Not Being " .. foundPlr.Name .. " Basket Anymore", 2, 10747384394);
			zomearm:Stop();
			zombiearmsAnim:Destroy();
			speaker.Character.Animate.Disabled = false;
			effectfalse();
			return;
		else
			baskets = true;
			notifyyw("Now Basketting", "Being " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ") Basket", 4, 10709790644);
			effecttrue();
			zombiearmsAnim = Instance.new("Animation");
			zombiearmsAnim.AnimationId = "rbxassetid://10714360343";
			zomearm = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(zombiearmsAnim);
			zomearm:Play(0, 10, 0);
			speaker.Character.Animate.Disabled = true;
			while baskets do
				local targetArm = foundPlr.Character:FindFirstChild("RightHand") or foundPlr.Character:FindFirstChild("Right Arm");
				if targetArm then
					speaker.Character.HumanoidRootPart.CFrame = targetArm.CFrame * CFrame.Angles(math.rad(145), math.rad(0), 0) * CFrame.new(0, 1.6, 1.6);
					speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
				end
				game:GetService("RunService").RenderStepped:Wait();
			end
		end
	end
end});
local ActualHeadsit = false;
AlldropdownRefresh.ActualHeadsitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Actual Headsit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ActualHeadsit == true) then
					ActualHeadsit = false;
					notifyyw("No Longer HeadSitting The Player", "Not HeadSitting " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					speaker.Character.Humanoid.Sit = false;
					effectfalse();
					return;
				else
					ActualHeadsit = true;
					notifyyw("Now HeadSitting", "HeadSitting " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while ActualHeadsit do
						speaker.Character.Humanoid.Sit = true;
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 3.6, 0.4);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
local animsync;
issyncinganim = false;
Paragraph = MiscPlayer:CreateParagraph({Title="Anim Sync Info",Content="Going to Reset Your Character When You Turn It Off"}, Sectionplayrerelatedtp);
AlldropdownRefresh.animsyncdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Anim Sync",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (issyncinganim == true) then
					charresettopos();
					issyncinganim = false;
					notifyyw("Stopped Syncing", "Stopped Syncing With " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					animsync:Disconnect();
					return;
				else
					issyncinganim = true;
					effecttrue();
					notifyyw("Now Syncing", "Syncing With " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					animsync = foundPlr.Character.Humanoid.AnimationPlayed:Connect(function(track)
						local animID = track.Animation.AnimationId;
						for _, animationTrack in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do
							animationTrack:Stop();
						end
						Character.Animate.Disabled = true;
						local Anim = Instance.new("Animation");
						Anim.AnimationId = animID;
						local syncinganim = Character.Humanoid:LoadAnimation(Anim);
						syncinganim:Play();
						syncinganim:AdjustWeight(10);
						syncinganim.Stopped:Connect(function()
							Character.Animate.Disabled = false;
						end);
					end);
				end
			end
		end
	end);
end});
local orbitingfuck = false;
AlldropdownRefresh.orbitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Orbit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (orbitingfuck == true) then
				effectfalse();
				orbitingfuck = false;
				notifyyw("No Longer Orbiting The Player", "Not Orbiting " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				for i, v in pairs(speaker.Character:GetDescendants()) do
					if ((v.Name == "OrbitalDestructionPart") or (v.Name == "OrbitalDestruction")) then
						v:Destroy();
					end
				end
				speaker.Character.Humanoid.PlatformStand = false;
				speaker.Character.Humanoid.Sit = false;
				return;
			else
				orbitingfuck = true;
				effecttrue();
				notifyyw("Now Orbiting", "Orbiting Around " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				local P = Instance.new("Part", foundPlr.Character);
				P.Transparency = 1;
				P.Name = "ThePart";
				P.Size = Vector3.new(1.7, 1.7, 1.7);
				P.Massless = true;
				P.CanCollide = false;
				local W = Instance.new("Weld", P);
				W.Part1 = foundPlr.Character.HumanoidRootPart;
				W.Part0 = P;
				local sine = 0;
				local change = 1;
				local spin = 0;
				local spin2 = 0;
				local rp = Instance.new("RocketPropulsion");
				rp.Parent = speaker.Character.HumanoidRootPart;
				rp.CartoonFactor = 1;
				rp.MaxThrust = 5000;
				rp.MaxSpeed = 100;
				rp.ThrustP = 5000;
				rp.Name = "OrbitalDestructionPart";
				rp.Target = foundPlr.Character.ThePart;
				rp:Fire();
				speaker.Character.Humanoid.PlatformStand = true;
				while orbitingfuck do
					game:GetService("RunService").RenderStepped:wait();
					sine = sine + change;
					spin2 = spin2 + 0.6;
					spin = spin + 1;
					W.C0 = CFrame.new(7 * math.cos(20), -2 - (2 * math.sin(sine / 10)), 7 * math.sin(20)) * CFrame.Angles(math.rad(0), math.rad(spin), math.rad(0));
				end
			end
		end
	end);
end});
local closeorbitingfuck = false;
AlldropdownRefresh.closeorbitdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Close Orbit",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (closeorbitingfuck == true) then
				effectfalse();
				closeorbitingfuck = false;
				notifyyw("No Longer Orbiting The Player", "Not Orbiting " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				for i, v in pairs(speaker.Character:GetDescendants()) do
					if ((v.Name == "OrbitalDestructionPart") or (v.Name == "OrbitalDestruction")) then
						v:Destroy();
					end
				end
				speaker.Character.Humanoid.Sit = false;
				return;
			else
				closeorbitingfuck = true;
				effecttrue();
				notifyyw("Now Orbiting", "Orbiting Around " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				local rp = Instance.new("RocketPropulsion");
				rp.Parent = speaker.Character.HumanoidRootPart;
				rp.CartoonFactor = 1;
				rp.MaxThrust = 5000;
				rp.MaxSpeed = 100;
				rp.ThrustP = 5000;
				rp.Name = "OrbitalDestruction";
				rp.Target = foundPlr.Character.HumanoidRootPart;
				rp:Fire();
				speaker.Character.Humanoid.Sit = true;
				while closeorbitingfuck do
					game:GetService("RunService").RenderStepped:wait();
					sine = sine + change;
					spin2 = spin2 + 0.6;
					spin = spin + 1;
					W.C0 = CFrame.new(7 * math.cos(20), -2 - (2 * math.sin(sine / 10)), 7 * math.sin(20)) * CFrame.Angles(math.rad(0), math.rad(spin), math.rad(0));
				end
			end
		end
	end);
end});
Paragraph = MiscPlayer:CreateParagraph({Title="Look At Info",Content="Make's Your Character Look At The Target. \nBest Used With Anti Ragdoll Which Is In the Anti Section"}, Sectionplayrerelatedtp);
local lookingAt = false;
AlldropdownRefresh.lookatdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Look At",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (lookingAt == true) then
				lookingAt = false;
				effectfalse();
				notifyyw("No Longer Looking At The Player", "Not Looking At " .. foundPlr.Name .. "Anymore", 2, 10747384394);
				return;
			else
				lookingAt = true;
				effecttrue();
				notifyyw("Now Looking At", "Looking At " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				while lookingAt do
					game:GetService("RunService").Heartbeat:Wait();
					speaker.Character.HumanoidRootPart.CFrame = CFrame.new(speaker.Character.HumanoidRootPart.Position, foundPlr.Character.HumanoidRootPart.Position);
				end
			end
		end
	end);
end});
local spinaround = false;
local spinaroundrotation = 0;
local spinaroundspeed = 0.2;
local spinarounddistance = 6;
AlldropdownRefresh.spinarounddropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp,Name="Spin Around",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		local root = getRoot(speaker.Character);
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if (foundPlr and foundPlr.Character and getRoot(foundPlr.Character) and root and humanoid) then
			if (spinaround == true) then
				effectfalse();
				notifyyw("No Longer Spinning Around The Player", "Not Spinning Around " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				spinaround = false;
				return;
			else
				spinaround = true;
				effecttrue();
				notifyyw("Now Spinning Around", "Spinning Around " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				while spinaround do
					spinaroundrotation = spinaroundrotation + spinaroundspeed;
					root.CFrame = CFrame.new(getRoot(foundPlr.Character).Position) * CFrame.Angles(0, math.rad(spinaroundrotation), 0) * CFrame.new(spinarounddistance, 0, 0);
					root.CFrame = CFrame.new(root.Position, getRoot(foundPlr.Character).Position);
					RunService.RenderStepped:Wait();
				end
			end
		end
	end);
end});
SpinaroundSliderSpeed = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Speed",Range={1,99},Increment=1,Suffix="Speed",CurrentValue=spinaroundspeed,Callback=function(Value)
	pcall(function()
		spinaroundspeed = Value;
	end);
end});
SpinaroundInputSpeed = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Speed",OnEnter=true,PlaceholderText=spinaroundspeed,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		spinaroundspeed = Text;
	end);
end});
SpinaroundSliderRadius = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Radius / Distance",Range={1,350},Increment=1,Suffix="Radius / Distance",CurrentValue=spinarounddistance,Callback=function(Value)
	pcall(function()
		spinarounddistance = Value;
	end);
end});
SpinaroundInputRadius = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp,Name="Spin Around Radius / Distance",OnEnter=true,PlaceholderText=spinarounddistance,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		spinarounddistance = Text;
	end);
end});
Sectionplayrerelatedtp69 = MiscPlayer:CreateSection("FE Player Related | 69", false, false, 10686489468);
Paragraph = MiscPlayer:CreateParagraph({Title="Important Info",Content="The Dropdown Button's Are Like a Toggle.\nGoing to Reset Your Character When You Turn It Off"}, Sectionplayrerelatedtp69);
local Bang69 = false;
AlldropdownRefresh.a69dropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp69,Name="69",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if not r15(speaker) then
				if (Bang69 == true) then
					Bang69 = false;
					notifyyw("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					bang69:Stop();
					bangAnim:Destroy();
					Bang69 = false;
					charresettopos();
					return;
				else
					Bang69 = true;
					notifyyw("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					c = Character;
					hrp0 = c:FindFirstChild("HumanoidRootPart");
					hrp1 = hrp0:Clone();
					c.Parent = nil;
					hrp0.Parent = hrp1;
					hrp0.RootJoint.Part0 = nil;
					hrp1.Parent = c;
					c.Parent = workspace;
					c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.pi, 0, math.pi);
					hrp0.Transparency = 0.85;
					hrp0.Material = Enum.Material.ForceField;
					hrp0.Color = Color3.fromRGB(25, 25, 25);
					f69lwnum = 1;
					bangAnim = Instance.new("Animation");
					bangAnim.AnimationId = "rbxassetid://148840371";
					bang69 = speaker.Character.Humanoid:LoadAnimation(bangAnim);
					bang69:Play(0.1, 1, 1);
					if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
						Bang69 = true;
						while Bang69 and c and c.Parent do
							speaker.Character.HumanoidRootPart.CFrame = (foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0)) + (foundPlr.Character.HumanoidRootPart.CFrame.lookVector * f69lwnum);
							speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
							hrp0.CFrame = hrp1.CFrame;
							hrp0.Orientation += Vector3.new(0, 0, 180)
							hrp0.Position -= Vector3.new(0, 0, 0)
							hrp0.Velocity = hrp1.Velocity;
							game:GetService("RunService").RenderStepped:Wait();
						end
					end
				end
			elseif (Bang69 == true) then
				Bang69 = false;
				notifyyw("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				effectfalse();
				bang69:Stop();
				a69upsideown:Disconnect();
				bangAnim:Destroy();
				Bang69 = false;
				charresettopos();
				return;
			else
				Bang69 = true;
				notifyyw("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				effecttrue();
				local Players = game:GetService("Players");
				local RunService = game:GetService("RunService");
				local LocalPlayer = Players.LocalPlayer;
				local Character = LocalPlayer.Character;
				local c = Character;
				local function setupCharacter()
					local hrp0 = c:FindFirstChild("HumanoidRootPart");
					if hrp0 then
						local hrp1 = hrp0:Clone();
						c.Parent = nil;
						hrp0.Parent = hrp1;
						hrp1.Parent = c;
						c.Parent = workspace;
						c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(0, 0, math.pi) * CFrame.new(0, -2.5, 0);
						hrp0.Transparency = 0.85;
						hrp0.Material = Enum.Material.ForceField;
						hrp0.Color = Color3.fromRGB(25, 25, 25);
						RunService.Heartbeat:Connect(function()
							if (c and c.Parent) then
								hrp0.CFrame = hrp1.CFrame;
								hrp0.Orientation += Vector3.new(0, 0, 180)
								hrp0.Position -= Vector3.new(0, -0.5, 0)
								hrp0.Velocity = hrp1.Velocity;
							end
						end);
					end
				end
				setupCharacter();
				if r15(speaker) then
					local a69upsideown;
					a69upsideown = Players.LocalPlayer.CharacterAdded:Connect(function(char)
						c = char;
						setupCharacter();
					end);
				end
				f69lwnum = 1;
				bangAnim = Instance.new("Animation");
				bangAnim.AnimationId = "rbxassetid://5918726674";
				bang69 = speaker.Character.Humanoid:LoadAnimation(bangAnim);
				bang69:Play(0.1, 1, 1);
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					Bang69 = true;
					while Bang69 do
						speaker.Character.HumanoidRootPart.CFrame = (foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0)) + (foundPlr.Character.HumanoidRootPart.CFrame.lookVector * f69lwnum);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
		ifuserdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			bang69:Stop();
			bangAnim:Destroy();
			a69upsideown:Disconnect();
			Bang69 = false;
		end);
	end);
end});
bangSlider69 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp69,Name="69 Speed",Range={0,100},Increment=3,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		bang69:AdjustSpeed(Value);
	end);
end});
Inputbangerionspeed69 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp69,Name="69 Speed",PlaceholderText="1",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		bang69:AdjustSpeed(Text);
	end);
end});
local ffc1hump = false;
amplitudeof69hump = 1.2;
frequencyof69hump = 1;
AlldropdownRefresh.a69humpdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if not r15(speaker) then
				if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
					if (ffc1hump == true) then
						ffc1hump = false;
						speaker.Character.Humanoid.PlatformStand = false;
						notifyyw("No Longer 69 Humping The Player", "Not 69 Humping " .. foundPlr.Name .. " Anymore", 2, 10747384394);
						effectfalse();
						charresettopos();
						return;
					else
						ffc1hump = true;
						notifyyw("Now 69 Humping", "69 Humping " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
						effecttrue();
						c = Character;
						hrp0 = c:FindFirstChild("HumanoidRootPart");
						hrp1 = hrp0:Clone();
						c.Parent = nil;
						hrp0.Parent = hrp1;
						hrp0.RootJoint.Part0 = nil;
						hrp1.Parent = c;
						c.Parent = workspace;
						c.HumanoidRootPart.RootJoint.C0 = c.HumanoidRootPart.RootJoint.C0 * CFrame.Angles(math.pi, 0, math.pi);
						hrp0.Transparency = 0.85;
						hrp0.Material = Enum.Material.ForceField;
						hrp0.Color = Color3.fromRGB(25, 25, 25);
						while ffc1hump and c and c.Parent do
							speaker.Character.Humanoid.PlatformStand = true;
							time = tick();
							xOffset = amplitudeof69hump * math.sin(2 * math.pi * frequencyof69hump * time);
							speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(Vector3.new(0, 0, xOffset));
							speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
							hrp0.CFrame = hrp1.CFrame;
							hrp0.Orientation += Vector3.new(0, 0, 180)
							hrp0.Position -= Vector3.new(0, 0, 0)
							hrp0.Velocity = hrp1.Velocity;
							game:GetService("RunService").RenderStepped:Wait();
						end
					end
				end
			elseif (ffc1hump == true) then
				ffc1hump = false;
				speaker.Character.Humanoid.PlatformStand = false;
				notifyyw("No Longer 69 Humping ", "Not 69 Humping " .. foundPlr.Name .. " Anymore", 2, 10747384394);
				effectfalse();
				a69humper:Disconnect();
				charresettopos();
				return;
			else
				ffc1hump = true;
				notifyyw("Now 69 Humping", "69 Humping " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
				effecttrue();
				local Players = game:GetService("Players");
				local RunService = game:GetService("RunService");
				local LocalPlayer = Players.LocalPlayer;
				local Character = LocalPlayer.Character;
				local c = Character;
				local function setupCharacter()
					local hrp0 = c:FindFirstChild("HumanoidRootPart");
					if hrp0 then
						local hrp1 = hrp0:Clone();
						c.Parent = nil;
						hrp0.Parent = hrp1;
						hrp1.Parent = c;
						c.Parent = workspace;
						c.LowerTorso.Root.C0 = c.LowerTorso.Root.C0 * CFrame.Angles(0, 0, math.pi) * CFrame.new(0, -2, 0);
						hrp0.Transparency = 0.85;
						hrp0.Material = Enum.Material.ForceField;
						hrp0.Color = Color3.fromRGB(25, 25, 25);
						RunService.Heartbeat:Connect(function()
							if (c and c.Parent) then
								hrp0.CFrame = hrp1.CFrame;
								hrp0.Orientation += Vector3.new(0, 0, 180)
								hrp0.Position -= Vector3.new(0, 0, 0)
								hrp0.Velocity = hrp1.Velocity;
							end
						end);
					end
				end
				setupCharacter();
				if r15(speaker) then
					local a69humper;
					a69humper = Players.LocalPlayer.CharacterAdded:Connect(function(char)
						c = char;
						setupCharacter();
					end);
				end
				while ffc1hump do
					speaker.Character.Humanoid.PlatformStand = true;
					time = tick();
					xOffset = amplitudeof69hump * math.sin(2 * math.pi * frequencyof69hump * time);
					speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(Vector3.new(0, 0, xOffset));
					speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
					game:GetService("RunService").RenderStepped:Wait();
				end
			end
		end
	end);
end});
facebangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump Speed",Range={0,10},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		frequencyof69hump = Value;
	end);
end});
faceInputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtp69,Name="69 Hump Speed",OnEnter=true,PlaceholderText="1",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		frequencyof69hump = Text;
	end);
end});
Sectionplayrerelatedtpbang = MiscPlayer:CreateSection("FE Player Related | Bang", false, false, 10686489468);
Paragraph = MiscPlayer:CreateParagraph({Title="Important Info",Content="The Dropdown Button's Are Like a Toggle."}, Sectionplayrerelatedtpbang);
local Bang = false;
AlldropdownRefresh.bangdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Bang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			flwnum = -1;
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Bang == true) then
					Follow = false;
					v2banger:Stop();
					v2bangerAnim:Destroy();
					Bang = false;
					notifyyw("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					return;
				else
					Bang = true;
					v2bangerAnim = Instance.new("Animation");
					if not r15(speaker) then
						v2bangerAnim.AnimationId = "rbxassetid://148840371";
					else
						v2bangerAnim.AnimationId = "rbxassetid://5918726674";
					end
					v2banger = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(v2bangerAnim);
					v2banger:Play(0.1, 1, 3);
					notifyyw("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while Bang do
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame + (foundPlr.Character.HumanoidRootPart.CFrame.lookVector * flwnum);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
bangSlider = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Bang Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		v2banger:AdjustSpeed(Value);
	end);
end});
Inputbangerionspeed = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Bang Speed",PlaceholderText="3",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		v2banger:AdjustSpeed(Text);
	end);
end});
local ff2 = false;
AlldropdownRefresh.facebangdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Facebang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ff2 == true) then
					ff2 = false;
					facebanger:Stop();
					facebangerAnim:Destroy();
					notifyyw("No Longer Facebanging The Player", "Not Facebanging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					return;
				else
					ff2 = true;
					facebangerAnim = Instance.new("Animation");
					if not r15(speaker) then
						facebangerAnim.AnimationId = "rbxassetid://148840371";
					else
						facebangerAnim.AnimationId = "rbxassetid://5918726674";
					end
					facebanger = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(facebangerAnim);
					facebanger:Play(0.1, 1, 3);
					notifyyw("Now Facebanging", "Facebanging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while ff2 do
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 2, 0.5);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
facebangSlider = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Facebang Speed",Range={0,100},Increment=3,Suffix="Speed",CurrentValue=3,Callback=function(Value)
	pcall(function()
		facebanger:AdjustSpeed(Value);
	end);
end});
Inputbangerions = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtpbang,Name="Anim Facebang Speed",PlaceholderText="3",OnEnter=true,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		facebanger:AdjustSpeed(Text);
	end);
end});
local ff = false;
AlldropdownRefresh.sitfacebangdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtpbang,Name="Sit Facebang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ff == true) then
					ff = false;
					Character.Humanoid.Sit = false;
					notifyyw("No Longer Facebanging ", "Not Facebanging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					return;
				else
					ff = true;
					notifyyw("Now Facebanging", "Facebanging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while ff do
						Character.Humanoid.Sit = true;
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 1.6, 0.4);
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
Sectionplayrerelatedtphump = MiscPlayer:CreateSection("FE Player Related | Hump", false, false, 10686489468);
Paragraph = MiscPlayer:CreateParagraph({Title="Important Info",Content="The Dropdown Button's Are Like a Toggle."}, Sectionplayrerelatedtphump);
local Humping = false;
amplitudeofbang = 1.2;
frequencyofbang = 1;
minuss1 = -1;
AlldropdownRefresh.humpdropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtphump,Name="Hump",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (Humping == true) then
					Humping = false;
					effectfalse();
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
					notifyyw("No Longer Banging The Player", "Not Banging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					return;
				else
					Humping = true;
					notifyyw("Now Banging", "Banging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while Humping do
						local time = tick();
						local xOffset = amplitudeofbang * math.sin(2 * math.pi * frequencyofbang * time);
						local newCFrame = (foundPlr.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, xOffset)) + (foundPlr.Character.HumanoidRootPart.CFrame.lookVector * minuss1);
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
						speaker.Character.HumanoidRootPart.CFrame = newCFrame;
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").Heartbeat:Wait();
					end
				end
			end
		end
	end);
end});
bangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtphump,Name="Hump Speed",Range={0,10},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		frequencyofbang = Value;
	end);
end});
Inputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtphump,Name="Hump Speed",OnEnter=true,PlaceholderText="1",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		frequencyofbang = Text;
	end);
end});
local ffc1 = false;
amplitudeofbangface = 1.2;
frequencyofbangface = 1;
AlldropdownRefresh.hump2dropdown = MiscPlayer:CreateDropdown({SectionParent=Sectionplayrerelatedtphump,Name="Hump Facebang",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		if foundPlr then
			if (foundPlr.Character and foundPlr.Character:FindFirstChild("Humanoid")) then
				if (ffc1 == true) then
					ffc1 = false;
					speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false;
					notifyyw("No Longer Facebanging The Player", "Not Facebanging " .. foundPlr.Name .. " Anymore", 2, 10747384394);
					effectfalse();
					return;
				else
					ffc1 = true;
					notifyyw("Now Facebanging", "Facebanging " .. foundPlr.Name .. " (" .. foundPlr.DisplayName .. ")", 4, 10709790644);
					effecttrue();
					while ffc1 do
						speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true;
						time = tick();
						xOffset = amplitudeofbangface * math.sin(2 * math.pi * frequencyofbangface * time);
						speaker.Character.HumanoidRootPart.CFrame = foundPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(Vector3.new(0, 2, xOffset));
						speaker.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new();
						game:GetService("RunService").RenderStepped:Wait();
					end
				end
			end
		end
	end);
end});
facebangSliderv1 = MiscPlayer:CreateSlider({SectionParent=Sectionplayrerelatedtphump,Name="Hump Facebang Speed",Range={0,10},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		frequencyofbangface = Value;
	end);
end});
faceInputbangerionspeedf1 = MiscPlayer:CreateInput({SectionParent=Sectionplayrerelatedtphump,Name="Hump Facebang Speed",OnEnter=true,PlaceholderText="1",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		frequencyofbangface = Text;
	end);
end});
Miscclient = Window:CreateTab("Universal Client", 9080478424);
SectiontotalscrisMiscclient = Miscclient:CreateSection("Total Universal Script's: " .. Scriptcount, false, false, 7743869612);
Paragraph = Miscclient:CreateParagraph({Title="General Note",Content="If a Section Has (Client) Mean's You Only Can See It.\nThe Dropdown's You See, You Can Close Them By Pressing The Arrow."}, SectiontotalscrisMiscclient);
Sectionmiscscripts = Miscclient:CreateSection("Miscellaneous (Client)", false, false, 10709759610);
PJLNF = 1.3;
function Notifies()
	pjadded = game.Players.ChildAdded:Connect(function(player)
		DT = DateTime.fromUnixTimestamp(86400 * player.AccountAge);
		Days = tonumber(DT:FormatUniversalTime("DD", "en-us"));
		Months = tonumber(DT:FormatUniversalTime("MM", "en-us"));
		Years = tonumber(DT:FormatUniversalTime("YYYY", "en-us")) - 1970;
		NSUI:Notify({Title=("" .. player.Name .. " | " .. player.DisplayName),Content=("Has joined the server\nAccount Age: " .. Days .. " Day " .. Months .. " Month " .. Years .. " Year" .. "\nAccountId: " .. player.UserId .. ""),Duration=PJLNF,Image=NSUI:GetPlayerThumbnail(player.UserId, "HeadShot")});
	end);
	pjremoved = game.Players.ChildRemoved:Connect(function(player)
		DT = DateTime.fromUnixTimestamp(86400 * player.AccountAge);
		Days = tonumber(DT:FormatUniversalTime("DD", "en-us"));
		Months = tonumber(DT:FormatUniversalTime("MM", "en-us"));
		Years = tonumber(DT:FormatUniversalTime("YYYY", "en-us")) - 1970;
		NSUI:Notify({Title=("" .. player.Name .. " | " .. player.DisplayName),Content=("Has Left the server\nAccount Age: " .. Days .. " Day " .. Months .. " Month " .. Years .. " Year" .. "" .. "\nAccountId: " .. player.UserId .. ""),Duration=PJLNF,Image=NSUI:GetPlayerThumbnail(player.UserId, "HeadShot")});
	end);
end
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="Player Join/Leave Notifications",CurrentValue=false,Flag="playerjoinsleave",Callback=function(Value)
	shared.Notify = Value;
	if shared.Notify then
		Notifies();
	elseif not shared.Notify then
		pjadded:Disconnect();
		pjremoved:Disconnect();
		return;
	end
end});
Sliderpj = Miscclient:CreateSlider({SectionParent=Sectionmiscscripts,Name="Player Join/.. Notify Duration",Range={0,10},Increment=0.5,Suffix="Duration",CurrentValue=PJLNF,Callback=function(Value)
	pcall(function()
		PJLNF = Value;
	end);
end});
Inputpj = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Player Join/.. Notify Duration",OnEnter=true,PlaceholderText=PJLNF,CharacterLimit=3,NumbersOnly=false,RemoveTextAfterFocusLost=false,Callback=function(Text)
	PJLNF = Text;
end});
Slider = Miscclient:CreateSlider({SectionParent=Sectionmiscscripts,Name="Set FPS Cap",Range={1,GameSettings.FramerateCap},Increment=1,Suffix="FPS",CurrentValue=GameSettings.FramerateCap,Callback=function(Value)
	pcall(function()
		setfpscap(Value);
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Set FPS Cap",OnEnter=true,PlaceholderText=GameSettings.FramerateCap,CharacterLimit=3,NumbersOnly=false,RemoveTextAfterFocusLost=false,Callback=function(Text)
	setfpscap(Text);
end});
xNamingTbl = {};
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="Show Usernames Not Display",CurrentValue=false,Callback=function(Value)
	showrealnamesstog = Value;
	if showrealnamesstog then
		function clean(cplr)
			if (cplr.DisplayName ~= cplr.Name) then
				if cplr.Character then
					cplr.Character:WaitForChild("Humanoid").DisplayName = cplr.Name;
				end
				cplr.CharacterAdded:Connect(function(char)
					char:WaitForChild("Humanoid").DisplayName = "(NICKNAMED)\n" .. cplr.Name;
				end);
			end
		end
		xNaming = speakers.PlayerAdded:Connect(clean);
		for _, p in pairs(speakers:GetPlayers()) do
			clean(p);
		end
	end
	if not showrealnamesstog then
		xNaming:Disconnect();
	end
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="No Network Claim",CurrentValue=false,Callback=function(Value)
	nonetworkclaimer = Value;
	if nonetworkclaimer then
		DHSaved = workspace.FallenPartsDestroyHeight;
		workspace.FallenPartsDestroyHeight = math.huge - math.huge;
	end
	if not nonetworkclaimer then
		workspace.FallenPartsDestroyHeight = DHSaved;
	end
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscscripts,Name="No Hurt Overlay",CurrentValue=false,Callback=function(Value)
	nohurtov = Value;
	if nohurtov then
		hurtOverlay = true;
		game:GetService("CoreGui").TopBar.FullScreenFrame.HurtOverlay:GetPropertyChangedSignal("Visible"):Connect(function()
			if (hurtOverlay == true) then
				game:GetService("CoreGui").TopBar.FullScreenFrame.HurtOverlay.Visible = false;
			end
		end);
	end
	if not nohurtov then
		hurtOverlay = false;
	end
end});
Paragraph = Miscclient:CreateParagraph({Title="Remove Kick GUI Info",Content="When You're Kicked From A Game It Will Remove The Prompt Saying You're Kicked."}, Sectionmiscscripts);
Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Remove Kick GUI",Interact="Click",Callback=function()
	game:GetService("GuiService"):ClearError();
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Should Be Now Working!"),Duration=3,Image=7733715400});
end});
Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Change Player ID",PlaceholderText="ID",RemoveTextAfterFocusLost=false,Callback=function(Text)
	speaker.UserId = Text;
end});
Paragraph = Miscclient:CreateParagraph({Title="Kick Yourself Info",Content="Useful When Roblox UI Disappear's."}, Sectionmiscscripts);
Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Kick Yourself",Interact="Click",Callback=function()
	game:GetService("Players").LocalPlayer:Kick("You've Kicked Yourself!");
end});
Paragraph = Miscclient:CreateParagraph({Title="Kick Yourself W/ A MSG Info",Content="In The Box First Type In The Message You Want To Be Kicked With And Press Enter."}, Sectionmiscscripts);
Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Kick Yourself W/ A Custom MSG",OnEnter=true,PlaceholderText="Enter Message",RemoveTextAfterFocusLost=false,Callback=function(Text)
	game:GetService("Players").LocalPlayer:Kick(Text);
end});
Input = Miscclient:CreateInput({SectionParent=Sectionmiscscripts,Name="Kick Yourself W/ A Custom Ban MSG",OnEnter=true,PlaceholderText="Enter Reason",RemoveTextAfterFocusLost=false,Callback=function(Text)
	game:GetService("Players").LocalPlayer:Kick("You have been banned for: " .. Text);
end});
Button = Miscclient:CreateButton({SectionParent=Sectionmiscscripts,Name="Enable Shift Lock",Interact="Click",Callback=function()
	speaker.DevEnableMouseLock = true;
	effecttrue();
	NSUI:Notify({Title="ShiftLock is Available!",Content="ShiftLock Is Now Available And Enabled!",Duration=3,Image=7733715400});
end});
Sectiontchat = Miscclient:CreateSection("LocalPlayer / Player Related | Chat", false, false, 10734888228);
Paragraph = Miscclient:CreateParagraph({Title="Chat Script's Info",Content="Script's Here Are Only For Legacy Chat (The Chat You Can't Type Out Emoji's)."}, Sectiontchat);
Togglea = Miscclient:CreateToggle({SectionParent=Sectiontchat,Name="Dark Chat Bubbles",CurrentValue=false,Callback=function(Value)
	darkchatbubble = Value;
	if darkchatbubble then
		if speaker.PlayerGui:FindFirstChild("BubbleChat") then
			_G.connections['darkbubbles'] = speaker.PlayerGui.BubbleChat.DescendantAdded:connect(function(msg)
				if ((msg:IsA("ImageLabel") and (msg.Name == "ChatBubble")) or (msg:IsA("ImageLabel") and (msg.Name == "ChatBubbleTail")) or (msg:IsA("ImageLabel") and (msg.Name == "SmallTalkBubble"))) then
					msg.ImageColor3 = Color3.fromRGB(0, 0, 0);
				end
				if (msg:IsA("TextLabel") and (msg.Name == "BubbleText")) then
					msg.TextColor3 = Color3.fromRGB(255, 255, 255);
					msg.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
				end
			end);
		end
		if not darkchatbubble then
			_G.connections['darkbubbles']:Disconnect();
			_G.connections['darkbubbles'] = nil;
		end
	end
end});
Button = Miscclient:CreateButton({SectionParent=Sectiontchat,Name="Chat Spy",Interact="Click",Callback=function()
	Players, SGui = game:GetService("Players"), game:GetService("StarterGui");
	Client, NColor3, UD, UD2 = Players.LocalPlayer, Color3.new, UDim.new, UDim2.new;
	local function ChatSpy()
		ChatSpyFrame = Client.PlayerGui.Chat.Frame;
		ChatSpyFrame.ChatChannelParentFrame.Visible = true;
		ChatSpyFrame.ChatBarParentFrame.Position = ChatSpyFrame.ChatChannelParentFrame.Position + UD2(UD(), ChatSpyFrame.ChatChannelParentFrame.Size.Y);
	end
	ChatSpy();
	getgenv().ShowHiddenMsg = function(T, C)
		SGui:SetCore("ChatMakeSystemMessage", {Text=T,Color=C});
	end;
	getgenv().Spy = function(Target)
		Target.Chatted:Connect(function(Msg)
			if (string.find(Msg, "/e ") or string.find(Msg, "/w ") or string.find(Msg, "/whisper ") or string.find(Msg, "/team ") or string.find(Msg, "/t ")) then
				ShowHiddenMsg("[SPY]: " .. "[" .. tostring(Target) .. "]: " .. Msg, NColor3(107, 107, 107));
			end
		end);
	end;
	GP = Players:GetPlayers();
	for i = 1, #GP do
		Plr = GP[i];
		if tostring(Plr) then
			Spy(Plr);
		end
	end
	Players.PlayerAdded:Connect(function(P)
		if tostring(P) then
			Spy(P);
		end
	end);
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content="Chat Spy On!",Duration=6,Image=7733715400});
end});
Sectionmiscworldscripts = Miscclient:CreateSection("LocalPlayer Related | World (Client)", false, false, 10709806631);
origsettingsbrightness = {sliderbright=game.Lighting.Brightness};
Buttonresetworld = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Reset World Values",Interact="Click",Callback=function()
	pcall(function()
		Colorpickerskybox:Set(Color3.fromRGB(0, 0, 0));
		Colorpickerskyboxoutdfor:Set(Color3.fromRGB(0, 0, 0));
		Sliderbright:Set(5);
		Sliderranggerrr:Set(30);
	end);
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Night And Day",CurrentValue=false,Callback=function(Value)
	pcall(function()
		daytonight = Value;
		if daytonight then
			TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=0}):Play();
		end
		if not daytonight then
			TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=12}):Play();
		end
	end);
end});
Button = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Full Bright",Interact="Click",Callback=function()
	Lighting.Brightness = 2;
	Lighting.ClockTime = 14;
	Lighting.FogEnd = 100000;
	Lighting.GlobalShadows = false;
	Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128);
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
origsettings = {abt=Lighting.Ambient,oabt=Lighting.OutdoorAmbient,brt=Lighting.Brightness,time=Lighting.ClockTime,fe=Lighting.FogEnd,fs=Lighting.FogStart,gs=Lighting.GlobalShadows};
Button = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Restore Lighting",Interact="Click",Callback=function()
	Lighting.Ambient = origsettings.abt;
	Lighting.OutdoorAmbient = origsettings.oabt;
	Lighting.Brightness = origsettings.brt;
	Lighting.ClockTime = origsettings.time;
	Lighting.FogEnd = origsettings.fe;
	Lighting.FogStart = origsettings.fs;
	Lighting.GlobalShadows = origsettings.gs;
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
Toggleshowhitboxes = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Show Hitboxes",CurrentValue=false,Callback=function(Value)
	pcall(function()
		showhitboxes = Value;
		if showhitboxes then
			settings():GetService("RenderSettings").ShowBoundingBoxes = true;
		end
		if not showhitboxes then
			settings():GetService("RenderSettings").ShowBoundingBoxes = false;
		end
	end);
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Show Animation Data",CurrentValue=false,Callback=function(Value)
	pcall(function()
		animdata = Value;
		if animdata then
			settings():GetService("NetworkSettings").ShowActiveAnimationAsset = true;
		end
		if not animdata then
			settings():GetService("NetworkSettings").ShowActiveAnimationAsset = false;
		end
	end);
end});
Sliderbright = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Brightness",Range={0,15},Increment=1,Suffix="Brightness",CurrentValue=math.floor(game.Lighting.Brightness),Callback=function(Value)
	pcall(function()
		game.Lighting.Brightness = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Brightness",OnEnter=true,PlaceholderText=math.floor(game.Lighting.Brightness),RemoveTextAfterFocusLost=false,Callback=function(Text)
	game.Lighting.Brightness = Text;
end});
Colorpickerskybox = Miscclient:CreateColorPicker({SectionParent=Sectionmiscworldscripts,Name="Ambient Color Picker",Color=Color3.fromRGB(0, 0, 0),Callback=function(Value)
	TweenService:Create(game.Lighting, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {Ambient=Value}):Play();
end});
Colorpickerskyboxoutdfor = Miscclient:CreateColorPicker({SectionParent=Sectionmiscworldscripts,Name="Outdoor Ambient Color Picker",Color=Color3.fromRGB(0, 0, 0),Callback=function(Value)
	TweenService:Create(game.Lighting, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0), {OutdoorAmbient=Value}):Play();
end});
SliderTOD = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Time Of Day",Range={0,24},Increment=1,Suffix="Time",CurrentValue=math.floor(game.Lighting.ClockTime),Callback=function(Value)
	pcall(function()
		TweenService:Create(game.Lighting, TweenInfo.new(1.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0), {ClockTime=Value}):Play();
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Time Of Day",OnEnter=true,PlaceholderText=math.floor(game.Lighting.ClockTime),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		TweenService:Create(game.Lighting, TweenInfo.new(1.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0), {ClockTime=Text}):Play();
	end);
end});
Button = Miscclient:CreateButton({SectionParent=Sectionmiscworldscripts,Name="Very Low GFX",Interact="Click",Callback=function()
	decalsyeeted = true;
	g = game;
	w = g.Workspace;
	l = g.Lighting;
	t = w.Terrain;
	t.WaterWaveSize = 0;
	t.WaterWaveSpeed = 0;
	t.WaterReflectance = 0;
	t.WaterTransparency = 0;
	l.GlobalShadows = false;
	l.FogEnd = 8999999488;
	l.Brightness = 0;
	settings().Rendering.QualityLevel = "Level01";
	for i, v in pairs(g:GetDescendants()) do
		if (v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart")) then
			v.Material = "Plastic";
			v.Reflectance = 0;
		elseif (v:IsA("Decal") or (v:IsA("Texture") and decalsyeeted)) then
			v.Transparency = 1;
		elseif (v:IsA("ParticleEmitter") or v:IsA("Trail")) then
			v.Lifetime = NumberRange.new(0);
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1;
			v.BlastRadius = 1;
		elseif (v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke")) then
			v.Enabled = false;
		elseif v:IsA("MeshPart") then
			v.Material = "Plastic";
			v.Reflectance = 0;
			v.TextureID = 10385902758728956;
		end
	end
	for i, e in pairs(l:GetChildren()) do
		if (e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect")) then
			e.Enabled = false;
		end
	end
	task.wait(1);
	function WindowFocusReleasedFunction()
		RunService:Set3dRenderingEnabled(false);
		setfpscap(10);
		return;
	end
	function WindowFocusedFunction()
		RunService:Set3dRenderingEnabled(true);
		setfpscap(360);
		return;
	end
	function Initialize()
		UserInputService.WindowFocusReleased:Connect(WindowFocusReleasedFunction);
		UserInputService.WindowFocused:Connect(WindowFocusedFunction);
		return;
	end
	Initialize();
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
lightrangee = 30;
lightbrightness = 5;
lightinger = false;
Togglelightclient = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Light",CurrentValue=false,Callback=function(Value)
	pcall(function()
		lightroot = Value;
		if lightroot then
			lightinger = true;
			local light = Instance.new("PointLight");
			light.Parent = getRoot(speaker.Character);
			task.spawn(function()
				while task.wait() do
					light.Range = lightrangee;
					light.Brightness = lightbrightness;
				end
			end);
		end
		if not lightroot then
			lightinger = false;
			for i, v in pairs(speaker.Character:GetDescendants()) do
				if (v.ClassName == "PointLight") then
					v:Destroy();
				end
			end
		end
	end);
end});
Sliderbright = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Change Light Brightness",Range={0,20},Increment=1,Suffix="Brightness",CurrentValue=5,Callback=function(Value)
	lightbrightness = Value;
end});
Inputbrgiht = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Change Light Brightness",OnEnter=true,PlaceholderText=lightbrightness,RemoveTextAfterFocusLost=false,Callback=function(Text)
	lightbrightness = Text;
end});
Sliderranggerrr = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="Change Light Range",Range={0,60},Increment=1,Suffix="Range",CurrentValue=30,Callback=function(Value)
	lightrangee = Value;
end});
Inputrangerrr = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="Change Light Range",OnEnter=true,PlaceholderText=lightrangee,RemoveTextAfterFocusLost=false,Callback=function(Text)
	lightrangee = Text;
end});
Toggleremovefogga = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Remove Fog",CurrentValue=false,Callback=function(Value)
	pcall(function()
		removefogga = Value;
		if removefogga then
			removefogg = game:GetService("RunService").RenderStepped:Connect(function()
				Lighting.FogStart = 0;
				Lighting.FogEnd = 99999999999;
				task.wait();
			end);
		end
		if not removefogga then
			removefogg:Disconnect();
			Lighting.FogEnd = origsettings.fe;
		end
	end);
end});
transparent = false;
transprencypartxray = 0.5;
xrayingreyer = false;
function x(v)
	if v then
		for _, i in pairs(workspace:GetDescendants()) do
			if (i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass("Humanoid") and not i.Parent.Parent:FindFirstChildOfClass("Humanoid")) then
				i.LocalTransparencyModifier = transprencypartxray;
			end
		end
	else
		for _, i in pairs(workspace:GetDescendants()) do
			if (i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass("Humanoid") and not i.Parent.Parent:FindFirstChildOfClass("Humanoid")) then
				i.LocalTransparencyModifier = 0;
			end
		end
	end
end
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="X-Ray",CurrentValue=false,Callback=function(Value)
	pcall(function()
		xrayyer = Value;
		if xrayyer then
			xrayingreyer = true;
			xraylooper = RunService.RenderStepped:Connect(function()
				transparent = true;
				x(transparent);
			end);
		end
		if not xrayyer then
			xrayingreyer = false;
			xraylooper:Disconnect();
			transparent = false;
			x(transparent);
		end
	end);
end});
Sliderxrayvalue = Miscclient:CreateSlider({SectionParent=Sectionmiscworldscripts,Name="X-Ray Part Transparency",Range={0,1},Increment=0.1,Suffix="Transparency",CurrentValue=transprencypartxray,Callback=function(Value)
	pcall(function()
		transprencypartxray = Value;
	end);
end});
Inputxrayvalue = Miscclient:CreateInput({SectionParent=Sectionmiscworldscripts,Name="X-Ray Part Transparency",OnEnter=true,PlaceholderText=transprencypartxray,NumbersOnly=false,CharacterLimit=2,RemoveTextAfterFocusLost=false,Callback=function(Text)
	transprencypartxray = Text;
end});
Pxrts = {};
Toggle = Miscclient:CreateToggle({SectionParent=Sectionmiscworldscripts,Name="Show Invisible Wall's",CurrentValue=false,Callback=function(Value)
	pcall(function()
		showinvislbewalls = Value;
		if showinvislbewalls then
			for i, v in pairs(workspace:GetDescendants()) do
				if (v:IsA("BasePart") and (v.Transparency == 1)) then
					v.Transparency = 0;
					Pxrts[#Pxrts + 1] = v;
				end
			end
		end
		if not showinvislbewalls then
			for i, v in pairs(Pxrts) do
				v.Transparency = 1;
			end
		end
	end);
end});
Sectiontodloop = Miscclient:CreateSection("LocalPlayer Related | World | Time Of Day Loop (Client)", false, true, 10709806631);
todvalue = 12;
Label = Misc:CreateLabel("Set A Value First Then Enable", Sectiontodloop);
Toggle = Misc:CreateToggle({SectionParent=Sectiontodloop,Name="Time Of Day Loop",CurrentValue=false,Callback=function(Value)
	pcall(function()
		todloop = Value;
		if todloop then
			todlooper = RunService.Heartbeat:Connect(function()
				TweenService:Create(game.Lighting, TweenInfo.new(1.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0), {ClockTime=todvalue}):Play();
			end);
		end
		if not todloop then
			todlooper:Disconnect();
		end
	end);
end});
Sliderf = Miscclient:CreateSlider({SectionParent=Sectiontodloop,Name="Time Of Day Loop",Range={0,24},Increment=1,Suffix="Time",CurrentValue=math.floor(game.Lighting.ClockTime),Callback=function(Value)
	pcall(function()
		todvalue = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectiontodloop,Name="Time Of Day Loop",OnEnter=true,PlaceholderText=math.floor(game.Lighting.ClockTime),NumbersOnly=true,CharacterLimit=2,RemoveTextAfterFocusLost=false,Callback=function(Text)
	todvalue = Text;
end});
Sectioncamera = Miscclient:CreateSection("LocalPlayer Related | Camera (Client)", false, false, 10709789686);
camzoomdistanceholder = {speaker.CameraMaxZoomDistance,speaker.CameraMinZoomDistance};
Buttonresetflysvalue = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="Reset Camera Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderfov:Set(70);
		Sliderminimalzoomnoloop:Set(camzoomdistanceholder[2]);
		Slidermaxzoomnoloop:Set(camzoomdistanceholder[1]);
	end);
end});
Button = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="Fix Camera",Interact="Click",Callback=function()
	workspace.CurrentCamera:remove();
	task.wait(0.1);
	repeat
		task.wait();
	until speaker.Character ~= nil 
	workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA("Humanoid");
	workspace.CurrentCamera.CameraType = "Custom";
	speaker.CameraMinZoomDistance = 0.5;
	speaker.CameraMaxZoomDistance = 400;
	speaker.CameraMode = "Classic";
	speaker.Character.Head.Anchored = false;
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectioncamera,Name="Simple NoClip Camera",CurrentValue=false,Callback=function(Value)
	pcall(function()
		nccamsim = Value;
		if nccamsim then
			game:GetService("Players").LocalPlayer.DevCameraOcclusionMode = 1;
		end
		if not nccamsim then
			game:GetService("Players").LocalPlayer.DevCameraOcclusionMode = 0;
		end
	end);
end});
Button = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="NoClip Camera",Interact="Click",Callback=function()
	local sc = (debug and debug.setconstant) or setconstant;
	local gc = (debug and debug.getconstants) or getconstants;
	if (not sc or not getgc or not gc) then
		effectfalse();
		return NSUI:Notify({Title="Incompatible Exploit!",Content="Missing Function('s) : setconstant or getconstants or getgc",Duration=3,Image=7733715400});
	end
	local pop = speaker.PlayerScripts.PlayerModule.CameraModule.ZoomController.Popper;
	for _, v in pairs(getgc()) do
		if ((type(v) == "function") and (getfenv(v).script == pop)) then
			for i, v1 in pairs(gc(v)) do
				if (tonumber(v1) == 0.25) then
					sc(v, i, 0);
				elseif (tonumber(v1) == 0) then
					sc(v, i, 0.25);
				end
			end
		end
	end
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content="Script Is Now Working!",Duration=3,Image=7733715400});
end});
Sliderfov = Miscclient:CreateSlider({SectionParent=Sectioncamera,Name="Field Of View",Range={45,120},Increment=1,Suffix="FOV",CurrentValue=math.floor(game:GetService("Workspace").Camera.FieldOfView),Callback=function(Value)
	pcall(function()
		TweenService:Create(game:GetService("Workspace").Camera, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0), {FieldOfView=Value}):Play();
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectioncamera,Name="Field Of View",OnEnter=true,PlaceholderText=math.floor(game:GetService("Workspace").Camera.FieldOfView),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	game:GetService("Workspace").Camera.FieldOfView = Text;
end});
Buttonfreeca = Miscclient:CreateButton({SectionParent=Sectioncamera,Name="Freecam",Interact="Click",Callback=function()
	pcall(function()
		effecttrue();
		Buttonfreeca:Set("Freecam (SHIFT+P)");
		speaker.DevEnableMouseLock = false;
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=6,Image=7733715400});
		function sandbox(var, func)
			env = getfenv(func);
			newenv = setmetatable({}, {__index=function(self, k)
				if (k == "script") then
					return var;
				else
					return env[k];
				end
			end});
			setfenv(func, newenv);
			return func;
		end
		cors = {};
		mas = Instance.new("Model", game:GetService("Lighting"));
		LocalScript0 = Instance.new("LocalScript");
		LocalScript0.Name = "FreeCamera";
		LocalScript0.Parent = mas;
		table.insert(cors, sandbox(LocalScript0, function()
			pi = math.pi;
			abs = math.abs;
			clamp = math.clamp;
			exp = math.exp;
			rad = math.rad;
			sign = math.sign;
			sqrt = math.sqrt;
			tan = math.tan;
			ContextActionService = game:GetService("ContextActionService");
			Players = game:GetService("Players");
			RunService = game:GetService("RunService");
			StarterGui = game:GetService("StarterGui");
			UserInputService = game:GetService("UserInputService");
			LocalPlayer = speaker;
			if not LocalPlayer then
				LocalPlayer = speaker;
			end
			Camera = workspace.CurrentCamera;
			workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
				newCamera = workspace.CurrentCamera;
				if newCamera then
					Camera = newCamera;
				end
			end);
			TOGGLE_INPUT_PRIORITY = Enum.ContextActionPriority.Low.Value;
			INPUT_PRIORITY = Enum.ContextActionPriority.High.Value;
			FREECAM_MACRO_KB = {Enum.KeyCode.LeftShift,Enum.KeyCode.P};
			NAV_GAIN = Vector3.new(1, 1, 1) * 64;
			PAN_GAIN = Vector2.new(0.75, 1) * 8;
			FOV_GAIN = 300;
			PITCH_LIMIT = rad(90);
			VEL_STIFFNESS = 1.5;
			PAN_STIFFNESS = 1;
			FOV_STIFFNESS = 4;
			Spring = {};
			do
				Spring.__index = Spring;
				Spring.new = function(freq, pos)
					self = setmetatable({}, Spring);
					self.f = freq;
					self.p = pos;
					self.v = pos * 0;
					return self;
				end;
				Spring.Update = function(self, dt, goal)
					f = self.f * 2 * pi;
					p0 = self.p;
					v0 = self.v;
					offset = goal - p0;
					decay = exp(-f * dt);
					p1 = goal + (((v0 * dt) - (offset * ((f * dt) + 1))) * decay);
					v1 = ((f * dt * ((offset * f) - v0)) + v0) * decay;
					self.p = p1;
					self.v = v1;
					return p1;
				end;
				Spring.Reset = function(self, pos)
					self.p = pos;
					self.v = pos * 0;
				end;
			end
			cameraPos = Vector3.new();
			cameraRot = Vector2.new();
			cameraFov = 0;
			velSpring = Spring.new(VEL_STIFFNESS, Vector3.new());
			panSpring = Spring.new(PAN_STIFFNESS, Vector2.new());
			fovSpring = Spring.new(FOV_STIFFNESS, 0);
			Input = {};
			do
				local thumbstickCurve;
				do
					K_CURVATURE = 2;
					K_DEADZONE = 0.15;
					function fCurve(x)
						return (exp(K_CURVATURE * x) - 1) / (exp(K_CURVATURE) - 1);
					end
					function fDeadzone(x)
						return fCurve((x - K_DEADZONE) / (1 - K_DEADZONE));
					end
					function thumbstickCurve(x)
						return sign(x) * clamp(fDeadzone(abs(x)), 0, 1);
					end
				end
				gamepad = {ButtonX=0,ButtonY=0,DPadDown=0,DPadUp=0,ButtonL2=0,ButtonR2=0,Thumbstick1=Vector2.new(),Thumbstick2=Vector2.new()};
				keyboard = {W=0,A=0,S=0,D=0,E=0,Q=0,U=0,H=0,J=0,K=0,I=0,Y=0,Up=0,Down=0,LeftShift=0,RightShift=0};
				mouse = {Delta=Vector2.new(),MouseWheel=0};
				NAV_GAMEPAD_SPEED = Vector3.new(1, 1, 1);
				NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1);
				PAN_MOUSE_SPEED = Vector2.new(1, 1) * (pi / 64);
				PAN_GAMEPAD_SPEED = Vector2.new(1, 1) * (pi / 8);
				FOV_WHEEL_SPEED = 1;
				FOV_GAMEPAD_SPEED = 0.25;
				NAV_ADJ_SPEED = 0.75;
				NAV_SHIFT_MUL = 0.25;
				navSpeed = 1;
				Input.Vel = function(dt)
					navSpeed = clamp(navSpeed + (dt * (keyboard.Up - keyboard.Down) * NAV_ADJ_SPEED), 0.01, 4);
					kGamepad = Vector3.new(thumbstickCurve(gamepad.Thumbstick1.x), thumbstickCurve(gamepad.ButtonR2) - thumbstickCurve(gamepad.ButtonL2), thumbstickCurve(-gamepad.Thumbstick1.y)) * NAV_GAMEPAD_SPEED;
					kKeyboard = Vector3.new(((keyboard.D - keyboard.A) + keyboard.K) - keyboard.H, ((keyboard.E - keyboard.Q) + keyboard.I) - keyboard.Y, ((keyboard.S - keyboard.W) + keyboard.J) - keyboard.U) * NAV_KEYBOARD_SPEED;
					shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift);
					return (kGamepad + kKeyboard) * navSpeed * ((shift and NAV_SHIFT_MUL) or 1);
				end;
				Input.Pan = function(dt)
					kGamepad = Vector2.new(thumbstickCurve(gamepad.Thumbstick2.y), thumbstickCurve(-gamepad.Thumbstick2.x)) * PAN_GAMEPAD_SPEED;
					kMouse = mouse.Delta * PAN_MOUSE_SPEED;
					mouse.Delta = Vector2.new();
					return kGamepad + kMouse;
				end;
				Input.Fov = function(dt)
					kGamepad = (gamepad.ButtonX - gamepad.ButtonY) * FOV_GAMEPAD_SPEED;
					kMouse = mouse.MouseWheel * FOV_WHEEL_SPEED;
					mouse.MouseWheel = 0;
					return kGamepad + kMouse;
				end;
				do
					function Keypress(action, state, input)
						keyboard[input.KeyCode.Name] = ((state == Enum.UserInputState.Begin) and 1) or 0;
						return Enum.ContextActionResult.Sink;
					end
					function GpButton(action, state, input)
						gamepad[input.KeyCode.Name] = ((state == Enum.UserInputState.Begin) and 1) or 0;
						return Enum.ContextActionResult.Sink;
					end
					function MousePan(action, state, input)
						delta = input.Delta;
						mouse.Delta = Vector2.new(-delta.y, -delta.x);
						return Enum.ContextActionResult.Sink;
					end
					function Thumb(action, state, input)
						gamepad[input.KeyCode.Name] = input.Position;
						return Enum.ContextActionResult.Sink;
					end
					function Trigger(action, state, input)
						gamepad[input.KeyCode.Name] = input.Position.z;
						return Enum.ContextActionResult.Sink;
					end
					function MouseWheel(action, state, input)
						mouse[input.UserInputType.Name] = -input.Position.z;
						return Enum.ContextActionResult.Sink;
					end
					function Zero(t)
						for k, v in pairs(t) do
							t[k] = v * 0;
						end
					end
					Input.StartCapture = function()
						ContextActionService:BindActionAtPriority("FreecamKeyboard", Keypress, false, INPUT_PRIORITY, Enum.KeyCode.W, Enum.KeyCode.U, Enum.KeyCode.A, Enum.KeyCode.H, Enum.KeyCode.S, Enum.KeyCode.J, Enum.KeyCode.D, Enum.KeyCode.K, Enum.KeyCode.E, Enum.KeyCode.I, Enum.KeyCode.Q, Enum.KeyCode.Y, Enum.KeyCode.Up, Enum.KeyCode.Down);
						ContextActionService:BindActionAtPriority("FreecamMousePan", MousePan, false, INPUT_PRIORITY, Enum.UserInputType.MouseMovement);
						ContextActionService:BindActionAtPriority("FreecamMouseWheel", MouseWheel, false, INPUT_PRIORITY, Enum.UserInputType.MouseWheel);
						ContextActionService:BindActionAtPriority("FreecamGamepadButton", GpButton, false, INPUT_PRIORITY, Enum.KeyCode.ButtonX, Enum.KeyCode.ButtonY);
						ContextActionService:BindActionAtPriority("FreecamGamepadTrigger", Trigger, false, INPUT_PRIORITY, Enum.KeyCode.ButtonR2, Enum.KeyCode.ButtonL2);
						ContextActionService:BindActionAtPriority("FreecamGamepadThumbstick", Thumb, false, INPUT_PRIORITY, Enum.KeyCode.Thumbstick1, Enum.KeyCode.Thumbstick2);
					end;
					Input.StopCapture = function()
						navSpeed = 1;
						Zero(gamepad);
						Zero(keyboard);
						Zero(mouse);
						ContextActionService:UnbindAction("FreecamKeyboard");
						ContextActionService:UnbindAction("FreecamMousePan");
						ContextActionService:UnbindAction("FreecamMouseWheel");
						ContextActionService:UnbindAction("FreecamGamepadButton");
						ContextActionService:UnbindAction("FreecamGamepadTrigger");
						ContextActionService:UnbindAction("FreecamGamepadThumbstick");
					end;
				end
			end
			function GetFocusDistance(cameraFrame)
				znear = 0.1;
				viewport = Camera.ViewportSize;
				projy = 2 * tan(cameraFov / 2);
				projx = (viewport.x / viewport.y) * projy;
				fx = cameraFrame.rightVector;
				fy = cameraFrame.upVector;
				fz = cameraFrame.lookVector;
				minVect = Vector3.new();
				minDist = 512;
				for x = 0, 1, 0.5 do
					for y = 0, 1, 0.5 do
						cx = (x - 0.5) * projx;
						cy = (y - 0.5) * projy;
						offset = ((fx * cx) - (fy * cy)) + fz;
						origin = cameraFrame.p + (offset * znear);
						part, hit = workspace:FindPartOnRay(Ray.new(origin, offset.unit * minDist));
						dist = (hit - origin).magnitude;
						if (minDist > dist) then
							minDist = dist;
							minVect = offset.unit;
						end
					end
				end
				return fz:Dot(minVect) * minDist;
			end
			function StepFreecam(dt)
				vel = velSpring:Update(dt, Input.Vel(dt));
				pan = panSpring:Update(dt, Input.Pan(dt));
				fov = fovSpring:Update(dt, Input.Fov(dt));
				zoomFactor = sqrt(tan(rad(70 / 2)) / tan(rad(cameraFov / 2)));
				cameraFov = clamp(cameraFov + (fov * FOV_GAIN * (dt / zoomFactor)), 1, 120);
				cameraRot = cameraRot + (pan * PAN_GAIN * (dt / zoomFactor));
				cameraRot = Vector2.new(clamp(cameraRot.x, -PITCH_LIMIT, PITCH_LIMIT), cameraRot.y % (2 * pi));
				cameraCFrame = CFrame.new(cameraPos) * CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0) * CFrame.new(vel * NAV_GAIN * dt);
				cameraPos = cameraCFrame.p;
				Camera.CFrame = cameraCFrame;
				Camera.Focus = cameraCFrame * CFrame.new(0, 0, -GetFocusDistance(cameraCFrame));
				Camera.FieldOfView = cameraFov;
			end
			PlayerState = {};
			do
				local mouseIconEnabled;
				local cameraSubject;
				local cameraType;
				local cameraFocus;
				local cameraCFrame;
				local cameraFieldOfView;
				screenGuis = {};
				coreGuis = {Backpack=true,Chat=true,Health=true,PlayerList=true};
				setCores = {BadgesNotificationsActive=true,PointsNotificationsActive=true};
				PlayerState.Push = function()
					for name in pairs(coreGuis) do
						coreGuis[name] = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType[name]);
						StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], false);
					end
					for name in pairs(setCores) do
						setCores[name] = StarterGui:GetCore(name);
						StarterGui:SetCore(name, false);
					end
					playergui = LocalPlayer:FindFirstChildOfClass("PlayerGui");
					if playergui then
						for _, gui in pairs(playergui:GetChildren()) do
							if (gui:IsA("ScreenGui") and gui.Enabled) then
								screenGuis[#screenGuis + 1] = gui;
								gui.Enabled = false;
							end
						end
					end
					cameraFieldOfView = Camera.FieldOfView;
					Camera.FieldOfView = 70;
					cameraType = Camera.CameraType;
					Camera.CameraType = Enum.CameraType.Custom;
					cameraSubject = Camera.CameraSubject;
					Camera.CameraSubject = nil;
					cameraCFrame = Camera.CFrame;
					cameraFocus = Camera.Focus;
					mouseIconEnabled = UserInputService.MouseIconEnabled;
					UserInputService.MouseIconEnabled = false;
					mouseBehavior = UserInputService.MouseBehavior;
					UserInputService.MouseBehavior = Enum.MouseBehavior.Default;
				end;
				PlayerState.Pop = function()
					for name, isEnabled in pairs(coreGuis) do
						StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], isEnabled);
					end
					for name, isEnabled in pairs(setCores) do
						StarterGui:SetCore(name, isEnabled);
					end
					for _, gui in pairs(screenGuis) do
						if gui.Parent then
							gui.Enabled = true;
						end
					end
					Camera.FieldOfView = cameraFieldOfView;
					cameraFieldOfView = nil;
					Camera.CameraType = cameraType;
					cameraType = nil;
					Camera.CameraSubject = cameraSubject;
					cameraSubject = nil;
					Camera.CFrame = cameraCFrame;
					cameraCFrame = nil;
					Camera.Focus = cameraFocus;
					cameraFocus = nil;
					UserInputService.MouseIconEnabled = mouseIconEnabled;
					mouseIconEnabled = nil;
					UserInputService.MouseBehavior = mouseBehavior;
					mouseBehavior = nil;
				end;
			end
			function StartFreecam()
				cameraCFrame = Camera.CFrame;
				cameraRot = Vector2.new(cameraCFrame:toEulerAnglesYXZ());
				cameraPos = cameraCFrame.p;
				cameraFov = Camera.FieldOfView;
				velSpring:Reset(Vector3.new());
				panSpring:Reset(Vector2.new());
				fovSpring:Reset(0);
				PlayerState.Push();
				RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam);
				Input.StartCapture();
			end
			function StopFreecam()
				Input.StopCapture();
				RunService:UnbindFromRenderStep("Freecam");
				PlayerState.Pop();
				speaker.DevEnableMouseLock = true;
			end
			do
				enabled = false;
				function ToggleFreecam()
					if enabled then
						StopFreecam();
					else
						StartFreecam();
					end
					enabled = not enabled;
				end
				function CheckMacro(macro)
					for i = 1, #macro - 1 do
						if not UserInputService:IsKeyDown(macro[i]) then
							return;
						end
					end
					ToggleFreecam();
				end
				function HandleActivationInput(action, state, input)
					if (state == Enum.UserInputState.Begin) then
						if (input.KeyCode == FREECAM_MACRO_KB[#FREECAM_MACRO_KB]) then
							CheckMacro(FREECAM_MACRO_KB);
						end
					end
					return Enum.ContextActionResult.Pass;
				end
				ContextActionService:BindActionAtPriority("FreecamToggle", HandleActivationInput, false, TOGGLE_INPUT_PRIORITY, FREECAM_MACRO_KB[#FREECAM_MACRO_KB]);
			end
		end));
		for i, v in pairs(mas:GetChildren()) do
			v.Parent = game:GetService("Players").LocalPlayer.PlayerGui;
			pcall(function()
				v:MakeJoints();
			end);
		end
		mas:Destroy();
		for i, v in pairs(cors) do
			task.spawn(function()
				pcall(v);
			end);
		end
	end);
end});
Slidermaxzoomnoloop = Miscclient:CreateSlider({SectionParent=Sectioncamera,Name="Change Max Zoom",Range={0,9999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMaxZoomDistance),Callback=function(Value)
	pcall(function()
		speaker.CameraMaxZoomDistance = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectioncamera,Name="Change Max Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMaxZoomDistance),RemoveTextAfterFocusLost=false,NumbersOnly=true,Callback=function(Text)
	speaker.CameraMaxZoomDistance = Text;
end});
Sliderminimalzoomnoloop = Miscclient:CreateSlider({SectionParent=Sectioncamera,Name="Change Minimal Zoom",Range={0,9999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMinZoomDistance),Callback=function(Value)
	pcall(function()
		speaker.CameraMinZoomDistance = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectioncamera,Name="Change Minimal Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMinZoomDistance),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	speaker.CameraMinZoomDistance = Text;
end});
maxzoomvalue = 128;
Sectioncameraloops = Miscclient:CreateSection("LocalPlayer Related | Camera | Zoom Loop's (Client)", false, true, 10709789686);
Label = Miscclient:CreateLabel("Set A Value First Then Enable", Sectioncameraloops);
Buttonresetflysvalue = Miscclient:CreateButton({SectionParent=Sectioncameraloops,Name="Reset Camera Loop Values",Interact="Click",Callback=function()
	pcall(function()
		Sliderloopmaxzoom:Set(camzoomdistanceholder[1]);
		Sliderloopminzoom:Set(camzoomdistanceholder[2]);
	end);
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectioncameraloops,Name="Loop Max Zoom",CurrentValue=false,Callback=function(Value)
	pcall(function()
		maxzoomloopvalue = Value;
		if maxzoomloopvalue then
			maxzoomloop = RunService.Heartbeat:Connect(function()
				speaker.CameraMaxZoomDistance = maxzoomvalue;
			end);
		end
		if not maxzoomloopvalue then
			maxzoomloop:Disconnect();
		end
	end);
end});
Sliderloopmaxzoom = Miscclient:CreateSlider({SectionParent=Sectioncameraloops,Name="Change Max Zoom",Range={0,99999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMaxZoomDistance),Callback=function(Value)
	pcall(function()
		maxzoomvalue = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectioncameraloops,Name="Change Max Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMaxZoomDistance),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	maxzoomvalue = Text;
end});
minzoomvalue = 0;
Toggle = Miscclient:CreateToggle({SectionParent=Sectioncameraloops,Name="Loop Min Zoom",CurrentValue=false,Callback=function(Value)
	pcall(function()
		minzooms = Value;
		if minzooms then
			minzoomloop = RunService.Heartbeat:Connect(function()
				speaker.CameraMinZoomDistance = minzoomvalue;
			end);
		end
		if not minzooms then
			minzoomloop:Disconnect();
		end
	end);
end});
Sliderloopminzoom = Miscclient:CreateSlider({SectionParent=Sectioncameraloops,Name="Change Min Zoom",Range={0,99999},Increment=1,Suffix="Zoom",CurrentValue=math.floor(speaker.CameraMinZoomDistance),Callback=function(Value)
	pcall(function()
		minzoomvalue = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectioncameraloops,Name="Change Min Zoom",OnEnter=true,PlaceholderText=math.floor(speaker.CameraMinZoomDistance),NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	minzoomvalue = Text;
end});
Sectiontaudio = Miscclient:CreateSection("LocalPlayer Related | Audio (Client)", false, true, 10747375679);
Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Edge's Audio Logger",Interact="Click",Callback=function()
	NSUI:Notify({Title="Wait..",Content="Loading it...",Duration=2,Image=7733715400});
	task.wait(2);
	loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/audiologger.lua", true))();
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
audioid = nil;
Input = Miscclient:CreateInput({SectionParent=Sectiontaudio,Name="Enter Audio",OnEnter=true,PlaceholderText="ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	audioid = Text;
end});
Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Play Audio",Interact="Click",Callback=function()
	Soundplayaudio = Instance.new("Sound");
	Soundplayaudio.SoundId = "rbxassetid://" .. audioid;
	Soundplayaudio:Play();
	NSUI:Notify({Title="Playing!",Content="Playing The Audio",Duration=3,Image=7733715400});
end});
Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Pause Audio",Interact="Click",Callback=function()
	Soundplayaudio:Pause();
	NSUI:Notify({Title="Paused!",Content="Paused The Audio",Duration=3,Image=7733715400});
end});
Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Resume Audio",Interact="Click",Callback=function()
	Soundplayaudio:Resume();
	NSUI:Notify({Title="Resumed!",Content="Resumed The Audio",Duration=3,Image=7733715400});
end});
Button = Miscclient:CreateButton({SectionParent=Sectiontaudio,Name="Stop Audio",Interact="Click",Callback=function()
	Soundplayaudio:Stop();
	NSUI:Notify({Title="Stopped!",Content="Stopped The Audio",Duration=3,Image=7733715400});
end});
Toggle = Miscclient:CreateToggle({SectionParent=Sectiontaudio,Name="Loop Audio",Interact="Click",CurrentValue=false,Callback=function(Value)
	pcall(function()
		playaudio = Value;
		if playaudio then
			Soundplayaudio.Looped = true;
		end
		if not playaudio then
			Soundplayaudio.Looped = false;
		end
	end);
end});
Sliderbright = Miscclient:CreateSlider({SectionParent=Sectiontaudio,Name="Audio Volume",Range={0,10},Increment=1,Suffix="Volume",CurrentValue=1,Callback=function(Value)
	pcall(function()
		Soundplayaudio.Volume = Value;
	end);
end});
Input = Miscclient:CreateInput({SectionParent=Sectiontaudio,Name="Audio Volume",OnEnter=true,PlaceholderText=1,NumbersOnly=true,CharacterLimit=2,RemoveTextAfterFocusLost=false,Callback=function(Text)
	Soundplayaudio.Volume = Text;
end});
ESPTAB = Window:CreateTab("ESP", 7072716095);
Sectionesp = ESPTAB:CreateSection("ESP", false, false, 10723346959);
Sense = {whitelist={},sharedSettings={textSize=13,textFont=2,limitDistance=false,maxDistance=150,useTeamColor=false},teamSettings={enemy={enabled=false,box=false,boxColor={Color3.new(1, 0, 0),1},boxOutline=true,boxOutlineColor={Color3.new(),1},boxFill=false,boxFillColor={Color3.new(1, 0, 0),0.5},healthBar=false,healthyColor=Color3.new(0, 1, 0),dyingColor=Color3.new(1, 0, 0),healthBarOutline=true,healthBarOutlineColor={Color3.new(),0.5},healthText=false,healthTextColor={Color3.new(1, 1, 1),1},healthTextOutline=true,healthTextOutlineColor=Color3.new(),box3d=false,box3dColor={Color3.new(1, 0, 0),1},name=false,nameColor={Color3.new(1, 1, 1),1},nameOutline=true,nameOutlineColor=Color3.new(),weapon=false,weaponColor={Color3.new(1, 1, 1),1},weaponOutline=true,weaponOutlineColor=Color3.new(),distance=false,distanceColor={Color3.new(1, 1, 1),1},distanceOutline=true,distanceOutlineColor=Color3.new(),tracer=false,tracerOrigin="Bottom",tracerColor={Color3.new(1, 0, 0),1},tracerOutline=true,tracerOutlineColor={Color3.new(),1},offScreenArrow=false,offScreenArrowColor={Color3.new(1, 1, 1),1},offScreenArrowSize=15,offScreenArrowRadius=150,offScreenArrowOutline=true,offScreenArrowOutlineColor={Color3.new(),1},chams=false,chamsVisibleOnly=false,chamsFillColor={Color3.new(0.2, 0.2, 0.2),0.5},chamsOutlineColor={Color3.new(1, 0, 0),0}},friendly={enabled=false,box=false,boxColor={Color3.new(0, 1, 0),1},boxOutline=true,boxOutlineColor={Color3.new(),1},boxFill=false,boxFillColor={Color3.new(0, 1, 0),0.5},healthBar=false,healthyColor=Color3.new(0, 1, 0),dyingColor=Color3.new(1, 0, 0),healthBarOutline=true,healthBarOutlineColor={Color3.new(),0.5},healthText=false,healthTextColor={Color3.new(1, 1, 1),1},healthTextOutline=true,healthTextOutlineColor=Color3.new(),box3d=false,box3dColor={Color3.new(0, 1, 0),1},name=false,nameColor={Color3.new(1, 1, 1),1},nameOutline=true,nameOutlineColor=Color3.new(),weapon=false,weaponColor={Color3.new(1, 1, 1),1},weaponOutline=true,weaponOutlineColor=Color3.new(),distance=false,distanceColor={Color3.new(1, 1, 1),1},distanceOutline=true,distanceOutlineColor=Color3.new(),tracer=false,tracerOrigin="Bottom",tracerColor={Color3.new(0, 1, 0),1},tracerOutline=true,tracerOutlineColor={Color3.new(),1},offScreenArrow=false,offScreenArrowColor={Color3.new(1, 1, 1),1},offScreenArrowSize=15,offScreenArrowRadius=150,offScreenArrowOutline=true,offScreenArrowOutlineColor={Color3.new(),1},chams=false,chamsVisibleOnly=false,chamsFillColor={Color3.new(0.2, 0.2, 0.2),0.5},chamsOutlineColor={Color3.new(0, 1, 0),0}}}};
Sense = loadstring(game:HttpGet("https://sirius.menu/sense"))();
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionesp,Name="Main ESP",CurrentValue=false,Callback=function(ESP)
	pcall(function()
		espfunc = ESP;
		if espfunc then
			Sense:Load();
		end
		if not espfunc then
			Sense:Unload();
		end
	end);
end});
Sectionshared = ESPTAB:CreateSection("ESP Shared Settings", false, false, 10709759610);
Slider = ESPTAB:CreateSlider({SectionParent=Sectionshared,Name="Text Size",Range={0,50},Increment=1,Suffix="Size",CurrentValue=13,Callback=function(Value)
	Sense.sharedSettings.textSize = Value;
end});
Slider = ESPTAB:CreateSlider({SectionParent=Sectionshared,Name="Text Font",Range={0,10},Increment=1,Suffix="Font",CurrentValue=2,Callback=function(Value)
	Sense.sharedSettings.textFont = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionshared,Name="Limit Distance",CurrentValue=false,Callback=function(Value)
	Sense.sharedSettings.limitDistance = Value;
end});
Slider = ESPTAB:CreateSlider({SectionParent=Sectionshared,Name="Max Distance",Range={0,10000},Increment=10,Suffix="Distance",CurrentValue=150,Callback=function(Value)
	Sense.sharedSettings.maxDistance = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionshared,Name="Use Team Color",Callback=function(Value)
	Sense.sharedSettings.useTeamColor = Value;
end});
Sectionenemy = ESPTAB:CreateSection("ESP Enemy Settings", false, true, 10709759610);
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Enabled",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.enabled = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Boxes",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.box = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.enemy.boxColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Box OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.boxOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes OutLines Color Picker",Color=Color3.fromRGB(255, 255, 255),Callback=function(Value)
	Sense.teamSettings.enemy.boxOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Boxes Fill",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.boxFill = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes Fill Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.enemy.boxFillColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Bars",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthBar = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Bars Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthyColor = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Dying Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.enemy.dyingColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Bars Outlines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthBarOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Bars OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthBarOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Text",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthText = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Text Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthTextColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Health Text OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.healthTextOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Health Text OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.healthTextOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Boxes 3D",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.box3d = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Boxes 3D Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.box3dColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Names",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.name = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Names Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.nameColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Names OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.nameOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Names OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.nameOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Weapons",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.weapon = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Weapons Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.weaponColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Weapons OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.weaponOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Weapons OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.weaponOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Distance",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.distance = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Distance Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.distanceColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Distance OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.distanceOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Distance OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.distanceOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Tracers",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.tracer = Value;
end});
TracersOrigin = ESPTAB:CreateDropdown({SectionParent=Sectionenemy,Name="Tracers Location",Options={"Mouse","Top","Bottom"},CurrentOption="Bottom",Callback=function(Option)
	Sense.teamSettings.enemy.tracerOrigin = Option;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Tracers Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.tracerColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Tracers OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.tracerOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Tracers OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.tracerOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Off Screen Arrows",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrow = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Off Screen Arrows Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowColor = Value;
end});
Slider = ESPTAB:CreateSlider({SectionParent=Sectionenemy,Name="Off Screen Arrows Size",Range={0,50},Increment=1,Suffix="Size",CurrentValue=15,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowSize = Value;
end});
Slider = ESPTAB:CreateSlider({SectionParent=Sectionenemy,Name="Off Screen Arrows Radius",Range={0,1000},Increment=1,Suffix="Radius",CurrentValue=150,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowRadius = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Off Screen Arrows OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Off Screen Arrows OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.offScreenArrowOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Chams",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.enemy.chams = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionenemy,Name="Chams Visible Only",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.enemy.chamsVisibleOnly = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Chams Fill Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.chamsFillColor = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionenemy,Name="Chams OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.enemy.chamsOutlineColor = Value;
end});
Sectionfriendly = ESPTAB:CreateSection("ESP Friendly Settings", false, true, 10709759610);
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Enabled",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.enabled = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Boxes",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.box = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.friendly.boxColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Box OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.boxOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes OutLines Color Picker",Color=Color3.fromRGB(255, 255, 255),Callback=function(Value)
	Sense.teamSettings.friendly.boxOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Boxes Fill",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.boxFill = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes Fill Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.friendly.boxFillColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Bars",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthBar = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Bars Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthyColor = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Dying Color Picker",Color=Color3.fromRGB(1, 0, 0),Callback=function(Value)
	Sense.teamSettings.friendly.dyingColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Bars Outlines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthBarOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Bars OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthBarOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Text",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthText = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Text Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthTextColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Health Text OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.healthTextOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Health Text OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.healthTextOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Boxes 3D",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.box3d = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Boxes 3D Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.box3dColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Names",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.name = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Names Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.nameColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Names OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.nameOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Names OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.nameOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Weapons",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.weapon = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Weapons Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.weaponColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Weapons OutLines",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.weaponOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Weapons OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.weaponOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Distance",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.distance = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Distance Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.distanceColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Distance OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.distanceOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Distance OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.distanceOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Tracers",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.tracer = Value;
end});
TracersOrigin = ESPTAB:CreateDropdown({SectionParent=Sectionfriendly,Name="Tracers Location",Options={"Mouse","Top","Bottom"},CurrentOption="Bottom",Callback=function(Option)
	Sense.teamSettings.friendly.tracerOrigin = Option;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Tracers Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.tracerColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Tracers OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.tracerOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Tracers OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.tracerOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Off Screen Arrows",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrow = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Off Screen Arrows Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowColor = Value;
end});
Slider = ESPTAB:CreateSlider({SectionParent=Sectionfriendly,Name="Off Screen Arrows Size",Range={0,50},Increment=1,Suffix="Size",CurrentValue=15,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowSize = Value;
end});
Slider = ESPTAB:CreateSlider({SectionParent=Sectionfriendly,Name="Off Screen Arrows Radius",Range={0,1000},Increment=1,Suffix="Radius",CurrentValue=150,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowRadius = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Off Screen Arrows OutLines",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowOutline = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Off Screen Arrows OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.offScreenArrowOutlineColor = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Chams",CurrentValue=true,Callback=function(Value)
	Sense.teamSettings.friendly.chams = Value;
end});
Toggle = ESPTAB:CreateToggle({SectionParent=Sectionfriendly,Name="Chams Visible Only",CurrentValue=false,Callback=function(Value)
	Sense.teamSettings.friendly.chamsVisibleOnly = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Chams Fill Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.chamsFillColor = Value;
end});
Colorpicker = ESPTAB:CreateColorPicker({SectionParent=Sectionfriendly,Name="Chams OutLines Color Picker",Color=Color3.fromRGB(0, 1, 0),Callback=function(Value)
	Sense.teamSettings.friendly.chamsOutlineColor = Value;
end});
Animations = Window:CreateTab("Animation's", 1114393432);
Sectiontotalscrisanim = Animations:CreateSection("Total Animation Script's: " .. ScriptcountAnim, false, false, 7743869612);
Paragraph = Animations:CreateParagraph({Title="Note",Content="Section's With FE (Filtering Enabled) Can Be Seen By Other Player's\nIf a Function Has (Client) Mean's You Only Can See It."}, Sectiontotalscrisanim);
SectionAnimHubs = Animations:CreateSection("FE LocalPlayer Related | Current Animation", false, false, 10734920149);
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="Reset Current Anim Values",Interact="Click",Callback=function()
	Char = speaker.Character;
	Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController");
	Slidercuranimspeed:Set(1);
	for i, v in next, Hum:GetPlayingAnimationTracks() do
		task.spawn(function()
			while task.wait() do
				v:AdjustSpeed(1);
			end
		end);
	end
end});
Togglefreezecurrentanims = Animations:CreateToggle({SectionParent=SectionAnimHubs,Name="Freeze Current Animation",CurrentValue=false,Callback=function(Value)
	pcall(function()
		freezeanims = Value;
		if freezeanims then
			speaker.Character.Animate.Disabled = true;
		end
		if not freezeanims then
			speaker.Character.Animate.Disabled = false;
		end
	end);
end});
Slidercuranimspeed = Animations:CreateSlider({SectionParent=SectionAnimHubs,Name="Current Animation Speed",Range={1,60},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	Char = speaker.Character;
	Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController");
	task.spawn(function()
		while true do
			for i, v in next, Hum:GetPlayingAnimationTracks() do
				v:AdjustSpeed(Value);
			end
			task.wait();
		end
	end);
end});
Input = Animations:CreateInput({SectionParent=SectionAnimHubs,Name="Current Animation Speed",OnEnter=true,PlaceholderText=1,RemoveTextAfterFocusLost=false,NumbersOnly=true,CharacterLimit=2,Callback=function(Text)
	Char = speaker.Character;
	Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController");
	task.spawn(function()
		while true do
			for i, v in next, Hum:GetPlayingAnimationTracks() do
				v:AdjustSpeed(Text);
			end
			task.wait();
		end
	end);
end});
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="Copy Current Anim ID",Interact="Click",Callback=function()
	local copyAnimId = function(player)
		local found = "Animations Copied";
		for _, v in pairs(player.Character:FindFirstChildWhichIsA("Humanoid"):GetPlayingAnimationTracks()) do
			local animationId = v.Animation.AnimationId;
			local assetId = animationId:find("rbxassetid://") and animationId:match("%d+");
			if (not string.find(animationId, "507768375") and not string.find(animationId, "180435571")) then
				if assetId then
					local success, result = pcall(function()
						return MarketplaceService:GetProductInfo(tonumber(assetId)).Name;
					end);
					local name = (success and result) or "Failed to get name";
					found = found .. "\n\nName: " .. name .. "\nAnimation Id: " .. animationId;
				else
					found = found .. "\n\nAnimation Id: " .. animationId;
				end
			end
		end
		if (found ~= "Animations Copied") then
			toClipboard(found);
			effecttrue();
			NSUI:Notify({Title="Copied Anim!",Content="Copied the Current Animation ID To Your Clipboard!",Duration=2,Image=7733715400});
		else
			NSUI:Notify({Title="Didn't Copy Anim!",Content="No Animation's To Copy!",Duration=2,Image=7733715400});
			effectfalse();
		end
	end;
	copyAnimId(speaker);
end});
SectionAnimpacks = Animations:CreateSection("FE LocalPlayer Related | Animation Pack's R15", false, true, 11932783331);
local animationPacks = {Sneaky={climb="1132461372",fall="1132469004",idle1="1132473842",idle2="1132477671",jump="1132489853",run="1132494274",swim="1132500520",swimIdle="1132506407",walk="1132510133"},Bold={climb="16738332169",fall="16738333171",idle1="16738333868",idle2="16738334710",jump="16738336650",run="16738337225",swim="16738339158",swimIdle="16738339817",walk="16738340646"},Toy={climb="782843869",fall="782846423",idle1="782841498",idle2="782845736",jump="782847020",run="782842708",swim="782844582",swimIdle="782845186",walk="782843345"},Pirate={climb="750779899",fall="750780242",idle1="750781874",idle2="750782770",jump="750782230",run="750783738",swim="750784579",swimIdle="750785176",walk="750785693"},Knight={climb="658360781",fall="657600338",idle1="657595757",idle2="657568135",jump="658409194",run="657564596",swim="657560551",swimIdle="657557095",walk="657552124"},Astronaut={climb="891609353",fall="891617961",idle1="891621366",idle2="891633237",jump="891627522",run="891636393",swim="891639666",swimIdle="891663592",walk="891636393"},Vampire={climb="1083439238",fall="1083443587",idle1="1083445855",idle2="1083450166",jump="1083455352",run="1083462077",swim="1083464683",swimIdle="1083467779",walk="1083473930"},Robot={climb="616086039",fall="616087089",idle1="616088211",idle2="616089559",jump="616090535",run="616091570",swim="616092998",swimIdle="616094091",walk="616095330"},Levitation={climb="616003713",fall="616005863",idle1="616006778",idle2="616008087",jump="616008936",run="616010382",swim="616011509",swimIdle="616012453",walk="616013216"},Bubbly={climb="909997997",fall="910001910",idle1="910004836",idle2="910009958",jump="910016857",run="910025107",swim="910028158",swimIdle="910030921",walk="910034870"},Werewolf={climb="1083182000",fall="1083189019",idle1="1083195517",idle2="1083214717",jump="1083218792",run="1083216690",swim="1083222527",swimIdle="1083225406",walk="1083178339"},Stylish={climb="616133594",fall="616134815",idle1="616136790",idle2="616138447",jump="616139451",run="616140816",swim="616143378",swimIdle="616144772",walk="616146177"},Mage={climb="707826056",fall="707829716",idle1="707742142",idle2="707855907",jump="707853694",run="707861613",swim="707876443",swimIdle="707894699",walk="707897309"},Cartoony={climb="742636889",fall="742637151",idle1="742637544",idle2="742638445",jump="742637942",run="742638842",swim="742639220",swimIdle="742639812",walk="742640026"},Zombie={climb="616156119",fall="616157476",idle1="616158929",idle2="616160636",jump="616161997",run="616163682",swim="616165109",swimIdle="616166655",walk="616168032"},Superhero={climb="616104706",fall="616108001",idle1="616111295",idle2="616113536",jump="616115533",run="616117076",swim="616119360",swimIdle="616120861",walk="616122287"},Ninja={climb="656114359",fall="656115606",idle1="656117400",idle2="656118341",jump="656117878",run="656118852",swim="656119721",swimIdle="656121397",walk="656121766"},Elder={climb="845392038",fall="845396048",idle1="845397899",idle2="845400520",jump="845398858",run="845386501",swim="845401742",swimIdle="845403127",walk="845403856"},Oldschool={climb="5319816685",fall="5319839762",idle1="5319828216",idle2="5319831086",jump="5319841935",run="5319844329",swim="5319850266",swimIdle="5319852613",walk="5319847204"},Adidas={climb="18537363391",fall="18537367238",idle1="18537376492",idle2="18537371272",jump="18537380791",run="18537384940",swim="18537389531",swimIdle="18537387180",walk="18537392113"}};
local function setAnimation(character, animName, animId)
	local animObject = character:FindFirstChild("Animate"):FindFirstChild(animName);
	if animObject then
		if animObject:IsA("Animation") then
			animObject.AnimationId = "http://www.roblox.com/asset/?id=" .. animId;
			if animObject:FindFirstChild("Weight") then
				animObject.Weight.Value = 10;
			end
		else
			for _, child in ipairs(animObject:GetChildren()) do
				if child:IsA("Animation") then
					child.AnimationId = "http://www.roblox.com/asset/?id=" .. animId;
					if child:FindFirstChild("Weight") then
						child.Weight.Value = 10;
					end
				end
			end
		end
	end
end
local function applyIdleAnimations(character, idle1Id, idle2Id)
	local animate = character:FindFirstChild("Animate");
	if animate then
		local idle = animate:FindFirstChild("idle");
		if idle then
			local idle1Anim = idle:FindFirstChild("Animation1");
			local idle2Anim = idle:FindFirstChild("Animation2");
			if idle1Anim then
				idle1Anim.AnimationId = "http://www.roblox.com/asset/?id=" .. idle1Id;
				if idle1Anim:FindFirstChild("Weight") then
					idle1Anim.Weight.Value = 10;
				end
			end
			if idle2Anim then
				idle2Anim.AnimationId = "http://www.roblox.com/asset/?id=" .. idle2Id;
				if idle2Anim:FindFirstChild("Weight") then
					idle2Anim.Weight.Value = 10;
				end
			end
		end
	end
end
local selectedPack = nil;
Dropdown = Animations:CreateDropdown({SectionParent=SectionAnimpacks,Name="Select Anim Pack",Options={"Sneaky","Bold","Toy","Knight","Astronaut","Vampire","Robot","Levitation","Bubbly","Werewolf","Stylish","Mage","Cartoony","Zombie","Superhero","Ninja","Elder","Oldschool","Adidas"},CurrentOption="Select an option",Callback=function(option)
	selectedPack = option;
end});
Button = Animations:CreateButton({SectionParent=SectionAnimpacks,Name="Apply Selected Anim Pack",Interact="Click",Callback=function()
	if r15(speaker) then
		if (selectedPack and animationPacks[selectedPack]) then
			local animations = animationPacks[selectedPack];
			effecttrue();
			NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
			local character = game.Players.LocalPlayer.Character;
			for animName, animId in pairs(animations) do
				if ((animName == "idle1") or (animName == "idle2")) then
					applyIdleAnimations(character, animations.idle1, animations.idle2);
				else
					setAnimation(character, animName, animId);
				end
			end
		else
			effectfalse();
			NSUI:Notify({Title="Error!",Content="Please Select A Valid Animation Pack.",Duration=3,Image=7733715400});
		end
	else
		effectfalse();
		NSUI:Notify({Title="R6 Needed!",Content="R6 Rig Type Is Needed To Use This!",Duration=3,Image=7733715400});
	end
end});
SectionAnimpl = Animations:CreateSection("FE LocalPlayer Related | Animation Player", false, true, 10734923549);
Input = Animations:CreateInput({SectionParent=SectionAnimpl,Name="Animation",OnEnter=true,PlaceholderText="ID",RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		Animplr = Instance.new("Animation");
		Animplr.AnimationId = "rbxassetid://" .. Text .. "";
	end);
end});
Toggleeanimplr = Animations:CreateToggle({SectionParent=SectionAnimpl,Name="Play / Stop Animation",CurrentValue=false,Callback=function(Value)
	pcall(function()
		animplrlr = Value;
		if animplrlr then
			animpla = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animplr);
			animpla:Play(0.1, 10, 1);
			animplrDied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
				animplrDied:Disconnect();
				animpla:Stop();
				Animplr:Destroy();
				Toggleeanimplr:Set(false);
			end);
		end
		if not animplrlr then
			animpla:Stop();
			Animplr:Destroy();
			animplrDied:Disconnect();
		end
	end);
end});
Slider = Animations:CreateSlider({SectionParent=SectionAnimpl,Name="Playing Anim Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		animpla:AdjustSpeed(Value);
	end);
end});
Input = Animations:CreateInput({SectionParent=SectionAnimpl,Name="Playing Anim Speed",OnEnter=true,PlaceholderText="1",CharacterLimit=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		animpla:AdjustSpeed(Text);
	end);
end});
SectionAnimHubs = Animations:CreateSection("FE Animation Hub's R6 & R15", false, true, 10709759610);
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="R6 & R15 Animation Hub",Interact="Click",Callback=function()
	effecttrue();
	loadstring(game:HttpGet("https://pastebin.com/raw/RmD3qNp7", true))();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
Button = Animations:CreateButton({SectionParent=SectionAnimHubs,Name="R15 Emote Hub",Interact="Click",Callback=function()
	NSUI:Notify({Title="Wait..",Content="Loading it...",Duration=2,Image=7733715400});
	task.wait(2);
	effecttrue();
	NSUI:Notify({Title="Open With Comma (,)!",Content="Script Is Working!",Duration=6,Image=7733715400});
	loadstring(game:HttpGet("https://raw.githubusercontent.com/Gi7331/scripts/main/Emote.lua", true))();
end});
Sectionrblxclientanims = Animations:CreateSection("FE Roblox Client Animation's", false, false, 11932783331);
Button = Misc:CreateButton({SectionParent=Sectionrblxclientanims,Name="Reset Anim Values",Interact="Click",Callback=function()
	pcall(function()
		edance1Slider:Set(1);
	end);
end});
local eedances = {Dance1={R6="rbxassetid://182491065",R15="rbxassetid://507771955"},Dance2={R6="rbxassetid://182491277",R15="rbxassetid://507776879"},Dance3={R6="rbxassetid://182491368",R15="rbxassetid://507777268"}};
local selectedPackdance = nil;
local currentAnimation = nil;
local currentAnimationTrack = nil;
local animationPlaying = false;
Dropdown = Animations:CreateDropdown({SectionParent=Sectionrblxclientanims,Name="Select /e Dance",Options={"Dance1","Dance2","Dance3"},CurrentOption="Select an option",Callback=function(option)
	selectedPackdance = option;
	if currentAnimationTrack then
		currentAnimationTrack:Stop();
		currentAnimationTrack:Destroy();
		currentAnimationTrack = nil;
	end
	animationPlaying = false;
	Toggleedance12:Set(false);
end});
Toggleedance12 = Animations:CreateToggle({SectionParent=Sectionrblxclientanims,Name="Play Selected /e Dance",CurrentValue=false,Callback=function(Value)
	if not selectedPackdance then
		return;
	end
	local danceIds = eedances[selectedPackdance];
	if Value then
		local animId = (r15(speaker) and danceIds.R15) or danceIds.R6;
		currentAnimation = Instance.new("Animation");
		currentAnimation.AnimationId = animId;
		currentAnimationTrack = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(currentAnimation);
		currentAnimationTrack:Play(0.1, 10, 1);
		animationPlaying = true;
		speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			Toggleedance1:Set(false);
		end);
	elseif currentAnimationTrack then
		currentAnimationTrack:Stop();
		currentAnimationTrack:Destroy();
		currentAnimationTrack = nil;
		animationPlaying = false;
	end
end});
edance1Slider = Animations:CreateSlider({SectionParent=Sectionrblxclientanims,Name="/e Dance Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		currentAnimationTrack:AdjustSpeed(Value);
	end);
end});
edance1Input = Animations:CreateInput({SectionParent=Sectionrblxclientanims,Name="/e Dance Speed",OnEnter=true,PlaceholderText="1",CharacterLimit=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		currentAnimationTrack:AdjustSpeed(Text);
	end);
end});
Button = Animations:CreateButton({SectionParent=Sectionrblxclientanims,Name="/e Cheer R6 & R15",Interact="Click",Callback=function()
	cheranim = Instance.new("Animation");
	if not r15(speaker) then
		cheranim.AnimationId = "rbxassetid://129423030";
	else
		cheranim.AnimationId = "rbxassetid://507770677";
	end
	ccheer = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(cheranim);
	ccheer:Play(0.1, 10, 1);
	cherdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
		cherdied:Disconnect();
		ccheer:Stop();
		cheranim:Destroy();
	end);
end});
Button = Animations:CreateButton({SectionParent=Sectionrblxclientanims,Name="/e Point R6 & R15",Interact="Click",Callback=function()
	cheranim = Instance.new("Animation");
	if not r15(speaker) then
		cheranim.AnimationId = "rbxassetid://128853357";
	else
		cheranim.AnimationId = "rbxassetid://507770453";
	end
	ccheer = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(cheranim);
	ccheer:Play(0.1, 10, 1);
	cherdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
		cherdied:Disconnect();
		ccheer:Stop();
		cheranim:Destroy();
	end);
end});
Button = Animations:CreateButton({SectionParent=Sectionrblxclientanims,Name="/e Wave R6 & R15",Interact="Click",Callback=function()
	cheranim = Instance.new("Animation");
	if not r15(speaker) then
		cheranim.AnimationId = "rbxassetid://128777973";
	else
		cheranim.AnimationId = "rbxassetid://507770239";
	end
	ccheer = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(cheranim);
	ccheer:Play(0.1, 10, 1);
	cherdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
		cherdied:Disconnect();
		ccheer:Stop();
		cheranim:Destroy();
	end);
end});
Sectionfeanims = Animations:CreateSection("FE Animation's", false, false, 10686489468);
Button = Misc:CreateButton({SectionParent=Sectionfeanims,Name="Reset Anim Values",Interact="Click",Callback=function()
	pcall(function()
		AnimpSlider:Set(1)
	end);
end});
Randomr6dances = {"27789359","30196114","248263260","45834924","33796059","28488254","52155728"};
Randomr15dances = {"3333432454","4555808220","4049037604","4555782893","10214311282","10714010337","10713981723","10714372526","10714076981","10714392151","11444443576","10714100539"};
local testdances = {Bang={R6="rbxassetid://148840371",R15="rbxassetid://5918726674",Speed=1,AllowSpeedChange=true,Looped=true},["Moving Dance"]={R6="rbxassetid://429703734",R15="rbxassetid://1379432998",Speed=1,AllowSpeedChange=true,Looped=true},["Side To Side Dance"]={R6="rbxassetid://429699657",Speed=1,AllowSpeedChange=true,Looped=true},["Random Dance"]={Speed=1,AllowSpeedChange=true,Looped=true},["Monster Mash Dance"]={R6="rbxassetid://35654637",Speed=1,AllowSpeedChange=true,Looped=true},["Full Swing"]={R6="rbxassetid://218504594",Speed=1,AllowSpeedChange=true,Looped=true},Punch={R6="rbxassetid://204062532",Speed=1,AllowSpeedChange=true,Looped=true},["Dino Walk"]={R6="rbxassetid://204328711",Speed=1,AllowSpeedChange=true,Looped=true},Carpet={R6="rbxassetid://282574440",Speed=1,AllowSpeedChange=true,Looped=true},["Staff Walk"]={R6="rbxassetid://27759788",Speed=1,AllowSpeedChange=true,Looped=true},Spasm={R6="rbxassetid://33796059",Speed=99,AllowSpeedChange=false,Looped=true},["Clone Illusion"]={R6="rbxassetid://215384594",Speed=99,AllowSpeedChange=false,Looped=true},["Glitch Jump"]={R6="rbxassetid://184574340",Speed=99,AllowSpeedChange=false,Looped=true},["Glitch Levitate"]={R6="rbxassetid://313762630",Speed=99,AllowSpeedChange=false,Looped=true},Faint={R6="rbxassetid://181526230",Speed=10000000,AllowSpeedChange=false,Looped=true},["Glitch Faint"]={R6="rbxassetid://181525546",Speed=10000000,AllowSpeedChange=false,Looped=true},["Arm Turbine"]={R6="rbxassetid://259438880",Speed=10000000,AllowSpeedChange=false,Looped=true},["Arm Detach"]={R6="rbxassetid://33169583",Speed=10000000,AllowSpeedChange=false,Looped=true},["Insane Legs"]={R6="rbxassetid://87986341",Speed=10000000,AllowSpeedChange=false,Looped=true},["Pinch Nose"]={R6="rbxassetid://30235165",Speed=1,AllowSpeedChange=true,Looped=true},["Floating Head"]={R6="rbxassetid://121572214",Speed=1,AllowSpeedChange=false,Looped=true},["Zombie Arms"]={R6="rbxassetid://183294396",Speed=1,AllowSpeedChange=false,Looped=true}};
local selectedPackanim = nil;
local acurrentAnimation = nil;
local acurrentAnimationTrack = nil;
local aanimationPlaying = false;
Dropdown = Animations:CreateDropdown({SectionParent=Sectionfeanims,Name="Select Animation",Options={"Bang","Moving Dance","Side To Side Dance","Random Dance","Monster Mash Dance","Full Swing","Punch","Dino Walk","Carpet","Staff Walk","Spasm","Clone Illusion","Glitch Jump","Glitch Levitate","Faint","Glitch Faint","Arm Turbine","Arm Detach","Insane Legs","Pinch Nose","Floating Head","Zombie Arms"},CurrentOption="Select an option",Callback=function(option)
	selectedPackanim = option;
	if acurrentAnimationTrack then
		acurrentAnimationTrack:Stop();
		acurrentAnimationTrack:Destroy();
		acurrentAnimationTrack = nil;
	end
	aanimationPlaying = false;
	Toggleeanimation:Set(false);
	local danceIds = testdances[selectedPackanim];
	if danceIds.AllowSpeedChange then
		AnimpSlider:Unlock();
		AnimpInput:Unlock();
	else
		AnimpSlider:Lock("Locked");
		AnimpInput:Lock("Locked");
	end
end});
Toggleeanimation = Animations:CreateToggle({SectionParent=Sectionfeanims,Name="Play Selected Anim",CurrentValue=false,Callback=function(Value)
	if not selectedPackanim then
		return;
	end
	local danceIds = testdances[selectedPackanim];
	if Value then
		local animId;
		if (selectedPackanim == "Random Dance") then
			local randomR6 = Randomr6dances[math.random(1, #Randomr6dances)];
			local randomR15 = Randomr15dances[math.random(1, #Randomr15dances)];
			animId = (r15(speaker) and ("rbxassetid://" .. randomR15)) or ("rbxassetid://" .. randomR6);
		else
			animId = (r15(speaker) and danceIds.R15) or danceIds.R6;
		end
		acurrentAnimation = Instance.new("Animation");
		acurrentAnimation.AnimationId = animId;
		acurrentAnimationTrack = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(acurrentAnimation);
		acurrentAnimationTrack:Play(0.1, 10, danceIds.Speed);
		acurrentAnimationTrack.Looped = danceIds.Looped;
		aanimationPlaying = true;
		speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
			Toggleeanimation:Set(false);
		end);
	elseif acurrentAnimationTrack then
		acurrentAnimationTrack:Stop();
		acurrentAnimationTrack:Destroy();
		acurrentAnimationTrack = nil;
		aanimationPlaying = false;
	end
end});
AnimpSlider = Animations:CreateSlider({SectionParent=Sectionfeanims,Name="Anim Speed",Range={0,100},Increment=1,Suffix="Speed",CurrentValue=1,Callback=function(Value)
	pcall(function()
		acurrentAnimationTrack:AdjustSpeed(Value);
	end);
end});
AnimpInput = Animations:CreateInput({SectionParent=Sectionfeanims,Name="Anim Speed",OnEnter=true,PlaceholderText="1",CharacterLimit=3,NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
	pcall(function()
		acurrentAnimationTrack:AdjustSpeed(Text);
	end);
end});
Button = Animations:CreateButton({SectionParent=Sectionfeanims,Name="HeadThrow R6",Interact="Click",Callback=function()
	if not r15(speaker) then
		HeadThrowAnim = Instance.new("Animation");
		HeadThrowAnim.AnimationId = "rbxassetid://35154961";
		headthrowk = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(HeadThrowAnim);
		headthrowk:Play(0);
		headthrowk:AdjustSpeed(1);
	else
		effectfalse();
		NSUI:Notify({Title="R6 Needed!",Content="R6 Rig Type Is Needed To Use This!",Duration=6,Image=7733715400});
	end
end});
Button = Animations:CreateButton({SectionParent=Sectionfeanims,Name="KickBoard R6",Interact="Click",Callback=function()
	if not r15(speaker) then
		monsterdancerAnim = Instance.new("Animation");
		monsterdancerAnim.AnimationId = "rbxassetid://160737244";
		monsterdancerr = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(monsterdancerAnim);
		monsterdancerr:Play(0.1, 1, 1);
	else
		effectfalse();
		NSUI:Notify({Title="R6 Needed!",Content="R6 Rig Type Is Needed To Use This!",Duration=6,Image=7733715400});
	end
end});
Button = Animations:CreateButton({SectionParent=Sectionfeanims,Name="Taunt R6",Interact="Click",Callback=function()
	if not r15(speaker) then
		monsterdancerAnim = Instance.new("Animation");
		monsterdancerAnim.AnimationId = "rbxassetid://74901237";
		monsterdancerr = speaker.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(monsterdancerAnim);
		monsterdancerr:Play(0.1, 1, 1);
	else
		effectfalse();
		NSUI:Notify({Title="R6 Needed!",Content="R6 Rig Type Is Needed To Use This!",Duration=6,Image=7733715400});
	end
end});
Sectionotherfeanimssc = Animations:CreateSection("Other FE Animation Script's", false, false, 10709759610);
Paragraph = Animations:CreateParagraph({Title="Rewind Info",Content="X = Rewind"}, Sectionotherfeanimssc);
Buttonrewinb = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Rewind R6 & R15",Interact="Click",Callback=function()
	pcall(function()
		Buttonrewinb:Set("Rewind R6 & R15 (Exed)");
		loadstring(game:HttpGet("https://pastebin.com/raw/2h8E1DVT"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end);
end});
Button = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Car R6",Interact="Click",Callback=function()
	if not r15(speaker) then
		loadstring(game:HttpGet("https://raw.githubusercontent.com/MonkoTubeYT/carscript/master/!carscript.lua", true))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	else
		effectfalse();
		NSUI:Notify({Title="R6 Needed!",Content="R6 Rig Type Is Needed To Use This!",Duration=3,Image=7733715400});
	end
end});
Button = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Roblox R6 Parkour",Interact="Click",Callback=function()
	if not r15(speaker) then
		loadstring(game:HttpGet("https://pastebin.com/raw/R5YR13pG", true))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	else
		effecttrue();
		NSUI:Notify({Title="R6 Needed!",Content="R6 Rig Type Is Needed To Use This!",Duration=3,Image=7733715400});
	end
end});
Button = Animations:CreateButton({SectionParent=Sectionotherfeanimssc,Name="Walk On Walls R6 & R15",Interact="Click",Callback=function()
	loadstring(game:HttpGet("https://pastebin.com/raw/zXk4Rq2r"))();
	effecttrue();
	NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
end});
MP = Window:CreateTab("Meepcity", 7733701625);
Sectiontotalscmp = MP:CreateSection("Total Script's: 17", false, false, 7743869612);
Paragraph = MP:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!\nMeepcity Notes: I've Added This For My Brother Because You Know."}, Sectiontotalscmp);
if ((game.PlaceId == 370731277) or (game.PlaceId == 4213655427) or (game.PlaceId == 370731277) or (game.PlaceId == 3272055484)) then
	Constants = require(ReplicatedStorage:WaitForChild("Constants"));
	MarketplaceService = game:GetService("MarketplaceService");
	Connection = ReplicatedStorage:WaitForChild("Connection");
	ConnectionEvent = ReplicatedStorage:WaitForChild("ConnectionEvent");
	Sectionavmp = MP:CreateSection("Avatar Script's", false, false, 13285615740);
	local function colorToTable(clr)
		return {tostring(clr.R * 255),tostring(clr.G * 255),tostring(clr.B * 255)};
	end
	local function AddAccessoryString(str, id)
		local ids = string.split(str or "", ",") or {};
		table.insert(ids, id);
		return table.concat(ids, ",");
	end
	local function ExtractData(humdes)
		local ava = {};
		for _, v in pairs({"WidthScale","HeadScale","HeightScale","DepthScale","BodyTypeScale","ProportionScale"}) do
			ava[v] = humdes[v];
		end
		for _, v in pairs({"Face","Head","LeftArm","RightArm","LeftLeg","RightLeg","Torso"}) do
			ava[v] = humdes[v];
		end
		for _, v in pairs({"HeadColor","LeftArmColor","RightArmColor","LeftLegColor","RightLegColor","TorsoColor"}) do
			ava[v] = colorToTable(humdes[v]);
		end
		for _, v in pairs({"GraphicTShirt","Shirt","Pants"}) do
			ava[v] = humdes[v];
		end
		for _, v in pairs({"ClimbAnimation","FallAnimation","IdleAnimation","JumpAnimation","RunAnimation","SwimAnimation","WalkAnimation"}) do
			ava[v] = humdes[v];
		end
		for _, v in pairs({"Hat","Hair","Back","Face","Front","Neck","Shoulders","Waist"}) do
			ava[v .. "Accessory"] = humdes[v .. "Accessory"];
		end
		ava.Emotes = humdes:GetEmotes();
		local layered = humdes:GetAccessories(false);
		for i, v in pairs(layered) do
			if (v.AccessoryType and (typeof(v.AccessoryType) == "EnumItem")) then
				v.AccessoryType = v.AccessoryType.Name;
			end
		end
		ava.AccessoryBlob = layered;
		return ava;
	end
	Input = MP:CreateInput({SectionParent=Sectionavmp,Name="Load Avatar From ID",OnEnter=true,PlaceholderText="Player ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		userid = Text;
		if (userid and tonumber(userid) and Players:GetHumanoidDescriptionFromUserId(tonumber(userid))) then
			local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(tonumber(userid)));
			ConnectionEvent:FireServer(315, data, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavmp,Name="Load Avatar From User",OnEnter=true,PlaceholderText="Username",RemoveTextAfterFocusLost=false,Callback=function(Text)
		username = Text;
		if (username and Players:GetUserIdFromNameAsync(username)) then
			local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(Players:GetUserIdFromNameAsync(username)));
			ConnectionEvent:FireServer(315, data, true);
		end
	end});
	Toggle = MP:CreateToggle({SectionParent=Sectionavmp,Name="No Outfit Max",CurrentValue=false,Callback=function(Value)
		pcall(function()
			Constants = require(ReplicatedStorage:WaitForChild("Constants"));
			Maxoutfitremove = Value;
			if Maxoutfitremove then
				Constants.STATS.MAXAvatarEditorCustomOutfits = 8999999488;
			elseif not Maxoutfitremove then
				Constants.STATS.MAXAvatarEditorCustomOutfits = 3;
			end
		end);
	end});
	Sectionavatareditor = MP:CreateSection("Avatar Editor", false, false, 13285615740);
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Hat Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.HeadAccessory = AddAccessoryString(wearing.HeadAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Hair Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.HairAccessory = AddAccessoryString(wearing.HairAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Face Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.FaceAccessory = AddAccessoryString(wearing.FaceAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Neck Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.NeckAccessory = AddAccessoryString(wearing.NeckAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Shoulder Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.ShoulderAccessory = AddAccessoryString(wearing.ShoulderAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Front Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.FrontAccessory = AddAccessoryString(wearing.FrontAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Back Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.BackAccessory = AddAccessoryString(wearing.BackAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Waist Accessory",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.WaistAccessory = AddAccessoryString(wearing.WaistAccessory, assetid);
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Shirt",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.Shirt = assetid;
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="Pants",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.Pants = assetid;
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Input = MP:CreateInput({SectionParent=Sectionavatareditor,Name="T-Shirt",OnEnter=true,PlaceholderText="Asset ID",NumbersOnly=true,RemoveTextAfterFocusLost=false,Callback=function(Text)
		assetid = tonumber(Text);
		if assetid then
			local info = MarketplaceService:GetProductInfo(assetid);
			local data = Connection:InvokeServer(Constants.AE_REQUEST_AE_DATA);
			local wearing = data.PlayerCurrentTemporaryOutfit or data.PlayerCurrentlyWearing;
			wearing.GraphicTShirt = assetid;
			ConnectionEvent:FireServer(315, wearing, true);
		end
	end});
	Sectionothermp = MP:CreateSection("Other Script's", false, false, 10723406988);
	onsaleran = false;
	Button = MP:CreateButton({SectionParent=Sectionothermp,Name="Make Offsale Asset's Onsale",Interact="Click",Callback=function()
		if not onsaleran then
			onsaleran = true;
			local function onsale(module)
				local fd = require(module);
				local id = 666;
				fd.Categories[id] = {CategoryId=id,Image=5277185610,CatTitle="offsale ;)"};
				for i, v in pairs(fd.Assets) do
					if not fd.Assets[i].ForSale then
						fd.Assets[i].ForSale = true;
						if fd.Assets[i].Details.Price.HalloweenCandy then
							fd.Assets[i].Details.Price.HalloweenCandy = nil;
						end
						fd.Assets[i].CatId = id;
						fd.Assets[i].Desc = "this is an offsale item that got brought back to life";
					end
				end
			end
			onsale(game.ReplicatedStorage:WaitForChild("Shop_Furniture"));
			onsale(game.ReplicatedStorage:WaitForChild("Shop_Toys"));
			onsale(game.ReplicatedStorage:WaitForChild("Shop_HomeImprovement"));
			onsale(game.ReplicatedStorage:WaitForChild("Shop_PetShop"));
		end
	end});
	oldplusfunc = nil;
	Button = MP:CreateButton({SectionParent=Sectionothermp,Name="Spoof PLUS",Interact="Click",Callback=function()
		pcall(function()
			local v9 = require(ReplicatedStorage:WaitForChild("Global"));
			oldplusfunc = hookfunction(v9.IsPlayerPLUS, function(p80)
				local v110 = Players:GetPlayerByUserId(p80);
				if not v110 then
					return;
				end
				if (v110 == Players.LocalPlayer) then
					v110:SetAttribute("PLUS", true);
					return true;
				else
					return v110:GetAttribute("PLUS") and false;
				end
			end);
		end);
	end});
else
	Sectiojointhegamemp = MP:CreateSection("Join The Game", false);
	Paragraph = MP:CreateParagraph({Title="Important Info",Content="Click The Button To Join The Game To See The Button's!"}, Sectiojointhegamemp);
	Button = MP:CreateButton({SectionParent=Sectiojointhegamemp,Name="Join Meepcity",Interact="Click",Callback=function()
		game:GetService("TeleportService"):Teleport(370731277, LocalPlayer);
	end});
end
DH = Window:CreateTab("DaHood", 14367231837);
Sectiontotaldh = DH:CreateSection("Total Script's : 13", false, false, 7743869612);
Paragraph = DH:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!"}, Sectiontotaldh);
if ((game.PlaceId == 2788229376) or (game.PlaceId == 5602055394)) then
	Sectiondhhubs = DH:CreateSection("Hub's", false, false, 10709759610);
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="RayX",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/SpaceYes/Lua/Main/DaHood.Lua"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Nyula",Interact="Click",Callback=function()
		loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/nyulachan/nyula/main/nyuladhm"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Swag Mode",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/lerkermer/lua-projects/master/SwagModeV002"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Space-X",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/spacexrandom/Lua/main/DaHood"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Destiny",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/compwnter/destiny/main/loader"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Nova",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://icxy.xyz/NovaGui/NovaGui", true))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectiondhhubs,Name="Faded",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/NighterEpic/Faded/main/YesEpic", true))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Sectionaimlockdh = DH:CreateSection("Aim Locks & Aim Viewer", false, false, 10709818534);
	Button = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Aim Viewer",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/Raycodex/Exploiting/main/Roblox/Aim%20Viewer"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Sun God AimLock",Interact="Click",Callback=function()
		Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vKhonshu/intro2/main/ui2"))();
		NotifyLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vKhonshu/intro/main/ui"))();
		NotifyLib.prompt("Sun God", "Loading..", 5);
		NotifyLib.prompt("Aimlock loaded", "Smite them with Q", 5);
		NotifyLib.prompt("Sun God", "best lock :pray:", 5);
		Settings = {rewrittenmain={Enabled=true,Key="q",DOT=true,AIRSHOT=true,NOTIF=true,AUTOPRED=false,FOV=math.huge,RESOVLER=false}};
		SelectedPart = "HumanoidRootPart";
		Prediction = true;
		PredictionValue = 0.1357363;
		AnchorCount = 0;
		MaxAnchor = 50;
		CC = game:GetService("Workspace").CurrentCamera;
		local Plr;
		enabled = false;
		accomidationfactor = 0.136;
		mouse = LocalPlayer:GetMouse();
		placemarker = Instance.new("Part", game.Workspace);
		function makemarker(Parent, Adornee, Color, Size, Size2)
			e = Instance.new("BillboardGui", Parent);
			e.Name = "PP";
			e.Adornee = Adornee;
			e.Size = UDim2.new(Size, Size2, Size, Size2);
			e.AlwaysOnTop = Settings.rewrittenmain.DOT;
			a = Instance.new("Frame", e);
			if (Settings.rewrittenmain.DOT == true) then
				a.Size = UDim2.new(1, 0, 1, 0);
			else
				a.Size = UDim2.new(0, 0, 0, 0);
			end
			if (Settings.rewrittenmain.DOT == true) then
				a.Transparency = 0;
				a.BackgroundTransparency = 0;
			else
				a.Transparency = 1;
				a.BackgroundTransparency = 1;
			end
			a.BackgroundColor3 = Color;
			g = Instance.new("UICorner", a);
			if (Settings.rewrittenmain.DOT == false) then
				g.CornerRadius = UDim.new(0, 0);
			else
				g.CornerRadius = UDim.new(1, 1);
			end
			return e;
		end
		data = game.Players:GetPlayers();
		function noob(player)
			local character;
			repeat
				task.wait();
			until player.Character 
			handler = makemarker(guimain, player.Character:WaitForChild(SelectedPart), Color3.fromRGB(240, 250, 1), 0.3, 3);
			handler.Name = player.Name;
			player.CharacterAdded:connect(function(Char)
				handler.Adornee = Char:WaitForChild(SelectedPart);
			end);
			task.spawn(function()
				while task.wait() do
					if player.Character then
					end
				end
			end);
		end
		for i = 1, #data do
			if (data[i] ~= LocalPlayer) then
				noob(data[i]);
			end
		end
		game.Players.PlayerAdded:connect(function(Player)
			noob(Player);
		end);
		task.spawn(function()
			placemarker.Anchored = true;
			placemarker.CanCollide = false;
			if (Settings.rewrittenmain.DOT == true) then
				placemarker.Size = Vector3.new(8, 8, 8);
			else
				placemarker.Size = Vector3.new(0, 0, 0);
			end
			placemarker.Transparency = 0.5;
			if Settings.rewrittenmain.DOT then
				makemarker(placemarker, placemarker, Color3.fromRGB(240, 250, 1), 0.4, 0);
			end
		end);
		LocalPlayer:GetMouse().KeyDown:Connect(function(k)
			if ((k == Settings.rewrittenmain.Key) and Settings.rewrittenmain.Enabled) then
				if (enabled == true) then
					enabled = false;
					if (Settings.rewrittenmain.NOTIF == true) then
						Plr = getClosestPlayerToCursor();
						game.StarterGui:SetCore("SendNotification", {Title="Sun God",Text="Spared Victim",Duration=3});
					end
				else
					Plr = getClosestPlayerToCursor();
					enabled = true;
					if (Settings.rewrittenmain.NOTIF == true) then
						game.StarterGui:SetCore("SendNotification", {Title="Sun God",Text=("Victim: " .. tostring(Plr.Character.Humanoid.DisplayName)),Duration=3});
					end
				end
			end
		end);
		function getClosestPlayerToCursor()
			local closestPlayer;
			shortestDistance = Settings.rewrittenmain.FOV;
			for i, v in pairs(game.Players:GetPlayers()) do
				if ((v ~= LocalPlayer) and v.Character and v.Character:FindFirstChild("Humanoid") and (v.Character.Humanoid.Health ~= 0) and v.Character:FindFirstChild("HumanoidRootPart")) then
					pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position);
					magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude;
					if (magnitude < shortestDistance) then
						closestPlayer = v;
						shortestDistance = magnitude;
					end
				end
			end
			return closestPlayer;
		end
		pingvalue = nil;
		split = nil;
		ping = nil;
		game:GetService("RunService").Stepped:connect(function()
			if (enabled and (Plr.Character ~= nil) and Plr.Character:FindFirstChild("HumanoidRootPart")) then
				placemarker.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.Position + (Plr.Character.HumanoidRootPart.Velocity * accomidationfactor));
			else
				placemarker.CFrame = CFrame.new(0, 9999, 0);
			end
			if (Settings.rewrittenmain.AUTOPRED == true) then
				pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString();
				split = string.split(pingvalue, "(");
				ping = tonumber(split[1]);
				if (ping < 130) then
					PredictionValue = 0.151;
				elseif (ping < 125) then
					PredictionValue = 0.149;
				elseif (ping < 110) then
					PredictionValue = 0.146;
				elseif (ping < 105) then
					PredictionValue = 0.138;
				elseif (ping < 90) then
					PredictionValue = 0.136;
				elseif (ping < 80) then
					PredictionValue = 0.134;
				elseif (ping < 70) then
					PredictionValue = 0.131;
				elseif (ping < 60) then
					PredictionValue = 0.1229;
				elseif (ping < 50) then
					PredictionValue = 0.1225;
				elseif (ping < 40) then
					PredictionValue = 0.1256;
				end
			end
		end);
		mt = getrawmetatable(game);
		old = mt.__namecall;
		setreadonly(mt, false);
		mt.__namecall = newcclosure(function(...)
			local args = {...};
			if (enabled and (getnamecallmethod() == "FireServer") and (args[2] == "UpdateMousePos") and Settings.rewrittenmain.Enabled and (Plr.Character ~= nil)) then
				if (Prediction == true) then
					args[3] = Plr.Character[SelectedPart].Position + (Plr.Character[SelectedPart].Velocity * PredictionValue);
				else
					args[3] = Plr.Character[SelectedPart].Position;
				end
				return old(unpack(args));
			end
			return old(...);
		end);
		game:GetService("RunService").RenderStepped:Connect(function()
			if ((Settings.rewrittenmain.RESOVLER == true) and (Plr.Character ~= nil) and enabled and Settings.rewrittenmain.Enabled) then
				if ((Settings.rewrittenmain.AIRSHOT == true) and enabled and (Plr.Character ~= nil)) then
					if (game.Workspace.Players[Plr.Name].Humanoid:GetState() == Enum.HumanoidStateType.Freefall) then
						if ((Plr.Character ~= nil) and (Plr.Character.HumanoidRootPart.Anchored == true)) then
							AnchorCount = AnchorCount + 1;
							if (AnchorCount >= MaxAnchor) then
								Prediction = false;
								task.wait(2);
								AnchorCount = 0;
							end
						else
							Prediction = true;
							AnchorCount = 0;
						end
						SelectedPart = "LeftFoot";
					else
						if ((Plr.Character ~= nil) and (Plr.Character.HumanoidRootPart.Anchored == true)) then
							AnchorCount = AnchorCount + 1;
							if (AnchorCount >= MaxAnchor) then
								Prediction = false;
								task.wait(2);
								AnchorCount = 0;
							end
						else
							Prediction = true;
							AnchorCount = 0;
						end
						SelectedPart = "HumanoidRootPart";
					end
				else
					if ((Plr.Character ~= nil) and (Plr.Character.HumanoidRootPart.Anchored == true)) then
						AnchorCount = AnchorCount + 1;
						if (AnchorCount >= MaxAnchor) then
							Prediction = false;
							task.wait(2);
							AnchorCount = 0;
						end
					else
						Prediction = true;
						AnchorCount = 0;
					end
					SelectedPart = "HumanoidRootPart";
				end
			else
				SelectedPart = "HumanoidRootPart";
			end
		end);
		UICorner_3.Parent = Submit;
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Streamable AimLock",Interact="Click",Callback=function()
		configs = {main={enabled=true,aimlockkey="q",prediction=0.173,aimpart="HumanoidRootPart",notifications=false}};
		boxsettings = {box={Showbox=false,boxsize=Vector3.new(3.3, 3, 2.8),markercolor=Color3.fromRGB(255, 245, 0),markersize=UDim2.new(0, 0, 0, 0)}};
		box = Instance.new("Part", game.Workspace);
		Mouse = LocalPlayer:GetMouse();
		function makemarker(Parent, Adornee, Color, Size, Size2)
			box = Instance.new("BillboardGui", Parent);
			box.Name = "Dashware!";
			box.Adornee = Adornee;
			box.Size = UDim2.new(Size, Size2, Size, Size2);
			box.AlwaysOnTop = true;
			a = Instance.new("Frame", box);
			a.Size = boxsettings.box.markersize;
			a.BackgroundColor3 = Color;
			g = Instance.new("UICorner", a);
			g.CornerRadius = UDim.new(0, 0);
			return box;
		end
		local Plr;
		Mouse.KeyDown:Connect(function(KeyPressed)
			if (KeyPressed == configs.main.aimlockkey) then
				if (configs.main.enabled == true) then
					configs.main.enabled = false;
					if (configs.main.notifications == true) then
						Plr = FindClosestUser();
						game.StarterGui:SetCore("SendNotification", {Title="Dashware",Text="Unlocked;"});
					end
				else
					Plr = FindClosestUser();
					configs.main.enabled = true;
					if (configs.main.notifications == true) then
						game.StarterGui:SetCore("SendNotification", {Title="Dashware",Text=("Locked On;  " .. tostring(Plr.Character.Humanoid.DisplayName))});
					end
				end
			end
		end);
		data = game.Players:GetPlayers();
		function noob(player)
			local character;
			repeat
				task.wait();
			until player.Character 
			handler = makemarker(guimain, player.Character:WaitForChild(configs.main.aimpart), Color3.fromRGB(107, 184, 255), 0.1, 8);
			handler.Name = player.Name;
			player.CharacterAdded:connect(function(Char)
				handler.Adornee = Char:WaitForChild("HumanoidRootPart");
			end);
		end
		for i = 1, #data do
			if (data[i] ~= LocalPlayer) then
				noob(data[i]);
			end
		end
		game.Players.PlayerAdded:connect(function(Player)
			noob(Player);
		end);
		task.spawn(function()
			box.Anchored = true;
			box.CanCollide = false;
			box.Size = boxsettings.box.boxsize;
			if (boxsettings.box.Showbox == true) then
				box.Transparency = 0.8;
			else
				box.Transparency = 1;
			end
			makemarker(box, box, boxsettings.box.markercolor, 0.4, 1);
		end);
		function FindClosestUser()
			local closestPlayer;
			ShortestDistance = 300;
			for i, v in pairs(game.Players:GetPlayers()) do
				if ((v ~= LocalPlayer) and v.Character and v.Character:FindFirstChild("Humanoid") and (v.Character.Humanoid.Health ~= 0) and v.Character:FindFirstChild("HumanoidRootPart")) then
					pos = game:GetService("Workspace").CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position);
					magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y)).magnitude;
					if (magnitude < ShortestDistance) then
						closestPlayer = v;
						ShortestDistance = magnitude;
					end
				end
			end
			return closestPlayer;
		end
		game:GetService("RunService").Stepped:connect(function()
			if (configs.main.enabled and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart")) then
				box.CFrame = CFrame.new(Plr.Character[configs.main.aimpart].Position + (Plr.Character.UpperTorso.Velocity * configs.main.prediction));
			else
				box.CFrame = CFrame.new(0, 9999, 0);
			end
		end);
		repeat
			task.wait();
		until game:IsLoaded() 
		mt = getrawmetatable(game);
		old = mt.__namecall;
		setreadonly(mt, false);
		mt.__namecall = newcclosure(function(...)
			args = {...};
			if (configs.main.enabled and (getnamecallmethod() == "FireServer") and (args[2] == "UpdateMousePos")) then
				args[3] = Plr.Character[configs.main.aimpart].Position + (Plr.Character[configs.main.aimpart].Velocity * configs.main.prediction);
				return old(unpack(args));
			end
			return old(...);
		end);
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Ahm Tracer Aim Lock",Interact="Click",Callback=function()
		lib = loadstring(game:HttpGet("https://pastebin.com/raw/9Cau6Xvm"))();
		win = lib:CreateWindow("amh#0001", Vector2.new(492, 598), Enum.KeyCode.RightShift);
		tab1 = win:CreateTab("main");
		sector1 = tab1:CreateSector("main", "left");
		button = sector1:AddButton("enable amh", function()
			configs = {Main={Enabled=true,Aimlockkey="c",Prediction=0.13093,Aimpart="HumanoidRootPart",Notifications=true,AirshotFunc=true},Tracer={TracerThickness=3.5,TracerTransparency=1,TracerColor=Color3.fromRGB(99, 95, 98)}};
			RunService = game:GetService("RunService");
			CurrentCamera = game:GetService("Workspace").CurrentCamera;
			Mouse = LocalPlayer:GetMouse();
			inset = game:GetService("GuiService"):GetGuiInset().Y;
			Line = Drawing.new("Line");
			local Plr;
			Mouse.KeyDown:Connect(function(KeyPressed)
				if (KeyPressed == configs.Main.Aimlockkey) then
					if (configs.Main.Enabled == true) then
						configs.Main.Enabled = false;
						if (configs.Main.Notifications == true) then
							Plr = FindClosestPlayer();
							game.StarterGui:SetCore("SendNotification", {Title="amh#0001 | <3",Text="unlocked",Icon="http://www.roblox.com/asset/?id=6917008796"});
						end
					else
						Plr = FindClosestPlayer();
						configs.Main.Enabled = true;
						if (configs.Main.Notifications == true) then
							game.StarterGui:SetCore("SendNotification", {Title="amh#0001 | <3",Text=("locked: " .. tostring(speaker.Character.Humanoid.DisplayName)),Icon="http://www.roblox.com/asset/?id=6917008796"});
						end
					end
				end
			end);
			function FindClosestPlayer()
				local closestPlayer;
				shortestDistance = math.huge;
				for i, v in pairs(game.Players:GetPlayers()) do
					if ((v ~= LocalPlayer) and v.Character and v.Character:FindFirstChild("Humanoid") and (v.Character.Humanoid.Health ~= 0) and v.Character:FindFirstChild("HumanoidRootPart")) then
						pos = CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position);
						magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude;
						if (magnitude < shortestDistance) then
							closestPlayer = v;
							shortestDistance = magnitude;
						end
					end
				end
				return closestPlayer;
			end
			RunService.Stepped:connect(function()
				if (configs.Main.Enabled == true) then
					Vector = CurrentCamera:worldToViewportPoint(Plr.Character[configs.Main.Aimpart].Position + (Plr.Character.HumanoidRootPart.Velocity * configs.Main.Prediction));
					Line.Color = configs.Tracer.TracerColor;
					Line.Thickness = configs.Tracer.TracerThickness;
					Line.Transparency = configs.Tracer.TracerTransparency;
					Line.From = Vector2.new(Mouse.X, Mouse.Y + inset);
					Line.To = Vector2.new(Vector.X, Vector.Y);
					Line.Visible = true;
				elseif (configs.Main.Enabled == false) then
					Line.Visible = false;
				end
			end);
			mt = getrawmetatable(game);
			old = mt.__namecall;
			setreadonly(mt, false);
			mt.__namecall = newcclosure(function(...)
				args = {...};
				if (configs.Main.Enabled and (getnamecallmethod() == "FireServer") and (args[2] == "UpdateMousePos")) then
					args[3] = Plr.Character[configs.Main.Aimpart].Position + (Plr.Character[configs.Main.Aimpart].Velocity * configs.Main.Prediction);
					return old(unpack(args));
				end
				return old(...);
			end);
			if (configs.Main.AirshotFunc == true) then
				if ((Plr.Character.Humanoid.Jump == true) and (Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air)) then
					settings.config.Part = "RightFoot";
				else
					Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old, new)
						if (new == Enum.HumanoidStateType.Freefall) then
							settings.config.Part = "RightFoot";
						else
							settings.config.Part = "LowerTorso";
						end
					end);
				end
			end
		end);
		sector1:AddTextbox("enter new pred here", false, function(bool)
			getgenv().Prediction = bool;
		end);
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DH:CreateButton({SectionParent=Sectionaimlockdh,Name="Cam AimLock",Interact="Click",Callback=function()
		getgenv().AimPart = "HumanoidRootPart";
		getgenv().AimlockKey = "q";
		getgenv().AimRadius = 30;
		getgenv().ThirdPerson = true;
		getgenv().FirstPerson = true;
		getgenv().TeamCheck = false;
		getgenv().PredictMovement = true;
		getgenv().PredictionVelocity = 8.8;
		Players, Uis, RService, SGui = game:GetService("Players"), game:GetService("UserInputService"), game:GetService("RunService"), game:GetService("StarterGui");
		Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new;
		Aimlock, MousePressed, CanNotify = true, false, false;
		local AimlockTarget;
		getgenv().CiazwareUniversalAimbotLoaded = true;
		getgenv().WorldToViewportPoint = function(P)
			return Camera:WorldToViewportPoint(P);
		end;
		getgenv().WorldToScreenPoint = function(P)
			return Camera.WorldToScreenPoint(Camera, P);
		end;
		getgenv().GetObscuringObjects = function(T)
			if (T and T:FindFirstChild(getgenv().AimPart) and Client and Client.Character:FindFirstChild("Head")) then
				RayPos = workspace:FindPartOnRay(RNew(T[getgenv().AimPart].Position, Client.Character.Head.Position));
				if RayPos then
					return RayPos:IsDescendantOf(T);
				end
			end
		end;
		getgenv().GetNearestTarget = function()
			players = {};
			PLAYER_HOLD = {};
			DISTANCES = {};
			for i, v in pairs(Players:GetPlayers()) do
				if (v ~= Client) then
					table.insert(players, v);
				end
			end
			for i, v in pairs(players) do
				if (v.Character ~= nil) then
					AIM = v.Character:FindFirstChild("Head");
					if ((getgenv().TeamCheck == true) and (v.Team ~= Client.Team)) then
						DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude;
						RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE);
						HIT, POS = game.Workspace:FindPartOnRay(RAY, game.Workspace);
						DIFF = math.floor((POS - AIM.Position).magnitude);
						PLAYER_HOLD[v.Name .. i] = {};
						PLAYER_HOLD[v.Name .. i].dist = DISTANCE;
						PLAYER_HOLD[v.Name .. i].plr = v;
						PLAYER_HOLD[v.Name .. i].diff = DIFF;
						table.insert(DISTANCES, DIFF);
					elseif ((getgenv().TeamCheck == false) and (v.Team == Client.Team)) then
						DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude;
						RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE);
						HIT, POS = game.Workspace:FindPartOnRay(RAY, game.Workspace);
						DIFF = math.floor((POS - AIM.Position).magnitude);
						PLAYER_HOLD[v.Name .. i] = {};
						PLAYER_HOLD[v.Name .. i].dist = DISTANCE;
						PLAYER_HOLD[v.Name .. i].plr = v;
						PLAYER_HOLD[v.Name .. i].diff = DIFF;
						table.insert(DISTANCES, DIFF);
					end
				end
			end
			if (unpack(DISTANCES) == nil) then
				return nil;
			end
			L_DISTANCE = math.floor(math.min(unpack(DISTANCES)));
			if (L_DISTANCE > getgenv().AimRadius) then
				return nil;
			end
			for i, v in pairs(PLAYER_HOLD) do
				if (v.diff == L_DISTANCE) then
					return v.plr;
				end
			end
			return nil;
		end;
		Mouse.KeyDown:Connect(function(a)
			if ((a == AimlockKey) and (AimlockTarget == nil)) then
				pcall(function()
					if (MousePressed ~= true) then
						MousePressed = true;
					end
					local Target;
					Target = GetNearestTarget();
					if (Target ~= nil) then
						AimlockTarget = Target;
					end
				end);
			elseif ((a == AimlockKey) and (AimlockTarget ~= nil)) then
				if (AimlockTarget ~= nil) then
					AimlockTarget = nil;
				end
				if (MousePressed ~= false) then
					MousePressed = false;
				end
			end
		end);
		RService.RenderStepped:Connect(function()
			if ((getgenv().ThirdPerson == true) and (getgenv().FirstPerson == true)) then
				if (((Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1) or ((Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1)) then
					CanNotify = true;
				else
					CanNotify = false;
				end
			elseif ((getgenv().ThirdPerson == true) and (getgenv().FirstPerson == false)) then
				if ((Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1) then
					CanNotify = true;
				else
					CanNotify = false;
				end
			elseif ((getgenv().ThirdPerson == false) and (getgenv().FirstPerson == true)) then
				if ((Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1) then
					CanNotify = true;
				else
					CanNotify = false;
				end
			end
			if ((Aimlock == true) and (MousePressed == true)) then
				if (AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart)) then
					if (getgenv().FirstPerson == true) then
						if (CanNotify == true) then
							if (getgenv().PredictMovement == true) then
								Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + (AimlockTarget.Character[getgenv().AimPart].Velocity / PredictionVelocity));
							elseif (getgenv().PredictMovement == false) then
								Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position);
							end
						end
					elseif (getgenv().ThirdPerson == true) then
						if (CanNotify == true) then
							if (getgenv().PredictMovement == true) then
								Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + (AimlockTarget.Character[getgenv().AimPart].Velocity / PredictionVelocity));
							elseif (getgenv().PredictMovement == false) then
								Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position);
							end
						end
					end
				end
			end
		end);
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
else
	Sectionjointhegamedh = DH:CreateSection("Join The Game!", false, false, 14754300297);
	Button = DH:CreateButton({SectionParent=Sectionjointhegamedh,Name="Join DaHood",Interact="Click",Callback=function()
		game:GetService("TeleportService"):Teleport(2788229376, LocalPlayer);
	end});
	Label = DH:CreateLabel("Join The Game To See The Button's!", Sectionjointhegamedh);
end
TOH = Window:CreateTab("Tower Of Hell", 14367002464);
Sectiontotlatoh = TOH:CreateSection("Total Script's: 5", false, false, 7743869612);
Paragraph = TOH:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!\nIf You Get Banned It's Not My Fault.\nExecute Bypass Anti-Cheat First."}, Sectiontotlatoh);
if ((game.PlaceId == 1962086868) or (game.PlaceId == 3582763398) or (game.PlaceId == 2127551566)) then
	Sectionscriptstoh = TOH:CreateSection("Script's", false, false, 10709759610);
	Button = TOH:CreateButton({SectionParent=Sectionscriptstoh,Name="Anti-Cheat Bypass",Interact="Click",Callback=function()
		task.wait(1.5);
		pcall(function()
			effecttrue();
			NSUI:Notify({Title="You've Executed The Script!",Content="You Can Now Use Fly!",Duration=3,Image=7733715400});
			v0 = getreg();
			for v6, v7 in next, v0 do
				if (type(v7) == "function") then
					local v12 = getinfo(v7);
					if (v12.name == "kick") then
						if (hookfunction(v12.func, function(...)
						end)) then
							print("succesfully hooked kick");
						else
							print("failed to hook kick");
						end
					end
				end
			end
			local v1 = game("Players").speaker.PlayerScripts;
			local v2 = v1.LocalScript;
			local v3 = v1.LocalScript2;
			local v4 = v2.Changed;
			local v5 = v3.Changed;
			for v8, v9 in next, getconnections(v4) do
				v9:Disable();
			end
			for v10, v11 in next, getconnections(v5) do
				v11:Disable();
			end
			v2:Destroy();
			v3:Destroy();
		end);
	end});
	Toggleremoa = TOH:CreateToggle({SectionParent=Sectionscriptstoh,Name="Remove Fog",CurrentValue=false,Callback=function(Value)
		pcall(function()
			removefogga = Value;
			if removefogga then
				removefogg = game:GetService("RunService").RenderStepped:Connect(function()
					Lighting.FogStart = 0;
					Lighting.FogEnd = 99999999999;
					task.wait();
				end);
			end
			if not removefogga then
				removefogg:Disconnect();
				Lighting.FogEnd = origsettings.fe;
			end
		end);
	end});
	Button = TOH:CreateButton({SectionParent=Sectionscriptstoh,Name="Get All Item's",Interact="Click",Callback=function()
		pcall(function()
			for v0, v1 in pairs(speaker.Backpack:GetDescendants()) do
				if v1:IsA("Tool") then
					v1:Destroy();
				end
			end
			task.wait();
			for v2, v3 in pairs(game.ReplicatedStorage.Gear:GetDescendants()) do
				if v3:IsA("Tool") then
					local v4 = v3:Clone();
					task.wait();
					v4.Parent = speaker.Backpack;
				end
			end
			effecttrue();
			NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
		end);
	end});
	Button = TOH:CreateButton({SectionParent=Sectionscriptstoh,Name="Remove Kill Part's",Interact="Click",Callback=function()
		pcall(function()
			for v0, v1 in pairs(game:GetService("Workspace").tower:GetDescendants()) do
				if (v1:IsA("BoolValue") and (v1.Name == "kills")) then
					v1.Parent:Destroy();
				end
			end
			effecttrue();
			NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
		end);
	end});
	Sectiontpscriptstoh = TOH:CreateSection("Teleport Script's", false, false, 6723742952);
	Button = TOH:CreateButton({SectionParent=Sectiontpscriptstoh,Name="Teleport To End",Interact="Click",Callback=function()
		pcall(function()
			v0 = game.Workspace.tower.sections.finish.FinishGlow.CFrame;
			v1 = speaker.Character;
			v1.HumanoidRootPart.CFrame = v0;
			effecttrue();
			NSUI:Notify({Title="Teleported!",Content=("Teleported " .. speaker.DisplayName .. "!"),Duration=3,Image=7733715400});
		end);
	end});
	Sectionautofarmtoh = TOH:CreateSection("Auto-Farm", false, true, 10723415766);
	function name()
		task.spawn(function()
			while getgenv().Boolean == true do
				local endzone = game.Workspace.tower.sections.finish.FinishGlow.CFrame;
				Character.HumanoidRootPart.CFrame = endzone;
				task.wait();
			end
		end);
	end
	getgenv().Boolean = false;
	Toggle = TOH:CreateToggle({SectionParent=Sectionautofarmtoh,Name="Auto End",CurrentValue=false,Callback=function(v)
		getgenv().Boolean = v;
		if (v == true) then
			name();
		end
	end});
else
	Sectionjointhegametoh = TOH:CreateSection("Join The Game!", false, false, 14754300297);
	Button = TOH:CreateButton({SectionParent=Sectionjointhegametoh,Name="Join Tower Of Hell",Interact="Click",Callback=function()
		game:GetService("TeleportService"):Teleport(1962086868, LocalPlayer);
	end});
	Label = TOH:CreateLabel("Join The Game To See The Button's!", Sectionjointhegametoh);
end
CM = Window:CreateTab("Combat Warrior's", 9616983018);
Sectiontotalsccm = CM:CreateSection("Total Script's: 2", false, false, 7743869612);
Paragraph = CM:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!"}, Sectiontotalsccm);
if (game.PlaceId == 4282985734) then
	Sectionhubscm = CM:CreateSection("Hub's", false, false, 10709759610);
	Button = CM:CreateButton({SectionParent=Sectiontotalsccm,Name="Max Hub",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/1d4db6a1b04aaeccf046f7c63fbad31a.lua"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = CM:CreateButton({SectionParent=Sectiontotalsccm,Name="Lum Ware",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/ditchmethis/Lumware-Combat-Warriors-/main/lumware_updated.lua"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
else
	Sectionjointhegamecm = CM:CreateSection("Join The Game!", false, false, 14754300297);
	Button = CM:CreateButton({SectionParent=Sectionjointhegamecm,Name="Join Combat Warrior's",Interact="Click",Callback=function()
		game:GetService("TeleportService"):Teleport(4282985734, LocalPlayer);
	end});
	Label = CM:CreateLabel("Join The Game To See The Button's!", Sectionjointhegamecm);
end
DO = Window:CreateTab("Doors", 12771027845);
Sectiontotaldoors = DO:CreateSection("Total Script's: 2", false, false, 7743869612);
Paragraph = DO:CreateParagraph({Title="Note",Content="Some Menus have Right Shift or Right Ctrl to Close or Open.\nSome Scripts Are Not Guaranteed To Work 100%. They Can Break!"}, Sectiontotaldoors);
if (game.PlaceId == 6839171747) then
	Sectiondoorshub = DO:CreateSection("Hub's", false, false, 10709759610);
	Button = DO:CreateButton({SectionParent=Sectiondoorshub,Name="Doors Vynixius",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Vynixius/main/Loader.lua"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	Button = DO:CreateButton({SectionParent=Sectiondoorshub,Name="Doors Ominous",Interact="Click",Callback=function()
		local a = game("ReplicatedStorage");
		local b = [[https://raw.githubusercontent.com/OminousVibes-Exploit/Scripts/main/doors/]];
		local c = game.GameId;
		local d = game.PlaceId;
		if (c ~= 2440500124) then
			return;
		end
		if not game() then
			game.Loaded:Wait();
			task.wait(4);
		end
		task.wait(1);
		local e = a("GameData", 10):WaitForChild("Floor", 10).Value;
		if (d == 6516141723) then
		elseif (d == 6839171747) then
			if (e == "Hotel") then
				loadstring(game:HttpGet(b .. "places/hotel.lua"))();
			elseif (e == "Rooms") then
				loadstring(game:HttpGet(b .. "places/rooms.lua"))();
			end
		end
		local f = (syn and syn.queue_on_teleport) or queue_on_teleport;
		if f then
			f('loadstring(game:HttpGet("' .. b .. 'loadstring.lua"))()');
		end
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
elseif (game.PlaceId == 6516141723) then
	Sectionelevatordoors = DO:CreateSection("Elevator", true);
	Label = DO:CreateLabel("Go Into a Elevator To See The Option's!", Sectionelevatordoors);
else
	Sectionjoingamedoors = DO:CreateSection("Join The Game!", false, false, 14754300297);
	Button = DO:CreateButton({SectionParent=Sectionjoingamedoors,Name="Join Doors",Interact="Click",Callback=function()
		game:GetService("TeleportService"):Teleport(6516141723, LocalPlayer);
	end});
	Label = DO:CreateLabel("Join The Game To See The Button's!", Sectionjoingamedoors);
end
MM = Window:CreateTab("Murder Mystery 2", 2992801749);
Sectiontotmm = MM:CreateSection("Total Script's: 3", false, false, 7743869612);
Paragraph = MM:CreateParagraph({Title="Note",Content="Some Scripts Are Not Guaranteed To Work 100%. They Can Break!"}, Sectiontotmm);
if (game.PlaceId == 142823291) then
	Sectionhubmm = MM:CreateSection("Hub's", false, false, 10709759610);
	Button = MM:CreateButton({SectionParent=Sectionhubmm,Name="Nexus",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/F2B-HUB/F2B/main/HUB"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
	if (executor == "Fluxus") then
		Label = MM:CreateLabel("Eclipse Note: Your Executor May Not Be Supported!", Sectionhubmm);
	end
	Button = MM:CreateButton({SectionParent=Sectionhubmm,Name="Eclipse",Interact="Click",Callback=function()
		pcall(function()
			local a, b, c, d, e = loadstring, request or http_request or (http and http.request) or (syn and syn.request) or (fluxus and fluxus.request), assert, tostring, "https://api.eclipsehub.xyz/auth";
			c(a and b, "Executor not Supported");
			a(b({Url=(e .. "?\107e\121\61" .. d(mainKey)),Headers={["User-Agent"]="Eclipse"}}).Body)();
			effecttrue();
			NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
		end);
	end});
	Button = MM:CreateButton({SectionParent=Sectionhubmm,Name="Lunar Hub",Interact="Click",Callback=function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/vwSaraa/LunarHub/main/mm2"))();
		effecttrue();
		NSUI:Notify({Title="You've Executed The Script!",Content=("You've Executed it " .. speaker.DisplayName .. "!\nAnd The Script Should Be Now Working!"),Duration=3,Image=7733715400});
	end});
else
	Sectionjoingamemm = MM:CreateSection("Join The Game", false, false, 14754300297);
	Button = MM:CreateButton({SectionParent=Sectionjoingamemm,Name="Join Murder Mystery 2",Interact="Click",Callback=function()
		game:GetService("TeleportService"):Teleport(142823291, LocalPlayer);
	end});
	Label = MM:CreateLabel("Join The Game To See The Button's!", Sectionjoingamemm);
end
CRD = Window:CreateTab("Credit's &\nChangelog", 7743876054);
Sectioncredit = CRD:CreateSection("Credit's", false, false, 7743876054);
Paragraphim = CRD:CreateParagraph({Title="Important People",Content="Javolo\nTripleDomm\nJavolo's Brother\nSunken\nKooggy\nNihan\nValco"}, Sectioncredit);
Paragraphim2 = CRD:CreateParagraph({Title="Other Important People",Content="Shlex (For The ESP Called Sense)\nEdgeIY\nPigeon\nPeople From V3rmillion\nPaint (For Helping With The UI)\nMoe (For Meowing)\nAmokahFox (For Invisible)\nAnd You!\nUI: Array Field Library (Modified)"}, Sectioncredit);
Sectionchangelog = CRD:CreateSection("Changelog", false, false, 7743869612);
Paragraphchangelog = CRD:CreateParagraph({Title="Changelog",Content="> Added A Lot Of Thing's.\n> Made Keybind's Better\n> Made Dropdown's Instead of Input's"}, Sectionchangelog);
Sectionpointofhub = CRD:CreateSection("Point", false, false, 8997386648);
Paragraphpoi = CRD:CreateParagraph({Title="Point",Content="I Created This Hub To Save You Time And Effort In Finding And Using Scripts.\nIt's An All-In-One Place With Scripts From The Internet And Ones I've Made."}, Sectionpointofhub);
Button = CRD:CreateButton({SectionParent=Sectionpointofhub,Name="Destroy Hub UI",Interact="Click",Callback=function()
	NSUI:Destroy();
end});
Sectionclientinfo = CRD:CreateSection("Client Information", false, false, 7743875962);
DTinfo = DateTime.fromUnixTimestamp(86400 * speaker.AccountAge);
Daysinfo = tonumber(DTinfo:FormatUniversalTime("DD", "en-us"));
Monthsinfo = tonumber(DTinfo:FormatUniversalTime("MM", "en-us"));
Yearsinfo = tonumber(DTinfo:FormatUniversalTime("YYYY", "en-us")) - 1970;
totalSeconds = math.floor(workspace.DistributedGameTime);
hours = math.floor(totalSeconds / 3600);
minutes = math.floor((totalSeconds % 3600) / 60);
seconds = totalSeconds % 60;
Paragraphc = CRD:CreateParagraph({Title="Information",Content=("Username | Display Name: " .. speaker.Name .. " | " .. speaker.DisplayName .. "" .. "\nUserId: " .. speaker.UserId .. "" .. "\nAccount Age | In Days:\n" .. Daysinfo .. " Day('s)\n" .. Monthsinfo .. " Month('s)\n" .. Yearsinfo .. " Year('s)\n" .. speaker.AccountAge .. " In Day's" .. "\nPlaceId: " .. game.PlaceId .. "")}, Sectionclientinfo);
Paragraphcrdd = CRD:CreateParagraph({Title="Detailed Information",Content=("Country: " .. country .. " / " .. countryCode .. "" .. "\nTimezone: " .. timezone .. "" .. "\nExecutor: " .. executor .. "" .. "\nPing: " .. StatsService.Network.ServerStatsItem["Data Ping"]:GetValueString() .. " ms" .. "\nFPS: " .. UpdatedFPS .. "" .. "\nMemory: " .. math.floor(stats():GetTotalMemoryUsageMb()) .. " MB" .. "\nSession Time Spent: " .. string.format("%02d:%02d:%02d", hours, minutes, seconds) .. "\nPlayers: " .. tostring(#game.Players:GetChildren()) .. "/" .. tostring(game.Players.MaxPlayers) .. "")}, Sectionclientinfo);
task.spawn(function()
	while task.wait() do
		totalSeconds = math.floor(workspace.DistributedGameTime);
		hours = math.floor(totalSeconds / 3600);
		minutes = math.floor((totalSeconds % 3600) / 60);
		seconds = totalSeconds % 60;
		Paragraphcrdd:Set({Title="Detailed Information",Content=("Country: " .. country .. " / " .. countryCode .. "" .. "\nTimezone: " .. timezone .. "" .. "\nExecutor: " .. executor .. "" .. "\nPing: " .. StatsService.Network.ServerStatsItem["Data Ping"]:GetValueString() .. " ms" .. "\nFPS: " .. UpdatedFPS .. "" .. "\nMemory: " .. math.floor(stats():GetTotalMemoryUsageMb()) .. " MB" .. "\nSession Time Spent: " .. string.format("%02d:%02d:%02d", hours, minutes, seconds) .. "\nPlayers: " .. tostring(#game.Players:GetChildren()) .. "/" .. tostring(game.Players.MaxPlayers) .. "")});
	end
end);
Button = CRD:CreateButton({SectionParent=Sectionclientinfo,Name="Print Executor Level",Interact="Click",Callback=function()
	printidentity();
	effecttrue();
	NSUI:Notify({Title="Printed!",Content="Press F9 To see Your Executor Level!",Duration=3,Image=7733715400});
end});
Sectionfriendinfo = CRD:CreateSection("Friend Information", false, false, 7743876054);
Paragraphcrddfriendrelated = CRD:CreateParagraph({Title="Information",Content=(friendsallfr .. "\n" .. friendsofflinefr .. "\n" .. friendsonlinefr .. "\n" .. friendsinserverfr .. "")}, Sectionfriendinfo);
task.spawn(function()
	while task.wait() do
		Paragraphcrddfriendrelated:Set({Title="Friend Information",Content=(friendsallfr .. "\n" .. friendsofflinefr .. "\n" .. friendsonlinefr .. "\n" .. friendsinserverfr .. "")});
	end
end);
Sectioncopysc = CRD:CreateSection("Copy Script's", false, false, 10709799288);
Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Discord Invite",Interact="Click",Callback=function()
	toClipboard("https://discord.gg/PhEH8uh9pR");
	effecttrue();
	NSUI:Notify({Title="Copied Link!",Content="Copied Discord Link To Clipboard!",Duration=3,Image=7733715400});
end});
Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Copy LocalPlayer Username",Interact="Click",Callback=function()
	toClipboard("" .. speaker.Name .. "");
	effecttrue();
	NSUI:Notify({Title="Copied!",Content="Copied To Clipboard!",Duration=3,Image=7733715400});
end});
Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Copy LocalPlayer UserId",Interact="Click",Callback=function()
	toClipboard("" .. speaker.UserId .. "");
	effecttrue();
	NSUI:Notify({Title="Copied!",Content="Copied To Clipboard!",Duration=3,Image=7733715400});
end});
AlldropdownRefresh.useriddropdown = Misc:CreateDropdown({SectionParent=Sectioncopysc,Name="Copy Selected Player's UserID",Options=gotoplayersList,CurrentOption="Select an option",Callback=function(Option)
	pcall(function()
		plrName = Option:match("^(.-) %(");
		foundPlr = getPlr(plrName);
		toClipboard("" .. foundPlr.UserId .. "");
		effecttrue();
		notifyyw("Copied Player's UserID", "Copied " .. foundPlr.Name .. "'s UserID", 2, 10709790644);
	end);
end});
Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Join Script",Interact="Click",Callback=function()
	soundnotification = Instance.new("Sound");
	effecttrue();
	NSUI:Notify({Title="Copied!",Content="Copied To Clipboard!",Duration=3,Image=7733715400});
	toClipboard("--[[Will Join Your Friend's Game\nIf Not Join The Game He's Playing and Execute]]--" .. "\ngame:GetService(\'TeleportService\'):TeleportToPlaceInstance(\'" .. game.PlaceId .. "\', \'" .. game.JobId .. "\');");
end});
Button = CRD:CreateButton({SectionParent=Sectioncopysc,Name="Copy PlaceId",Interact="Click",Callback=function()
	toClipboard("" .. game.PlaceId .. "");
	effecttrue();
	NSUI:Notify({Title="Copied!",Content="Copied To Clipboard!",Duration=3,Image=7733715400});
end});
ifuserdied = speaker.Character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
	pcall(function()
		Togglenoclip:Set(false);
		ToggleVehiclenoclip:Set(false);
		Toggleinvisibleeee:Set(false);
		Toggleseizuree:Set(false);
		Toggleflipppping:Set(false);
		Toggledoubleflipppping:Set(false);
		Togglecartwheel:Set(false);
		Togglestunned:Set(false);
		Toggleslider:Set(false);
		Toggleedgerjumper:Set(false);
		Toggleweaken:Set(false);
		Toggleswimmer:Set(false);
		Togglespinner:Set(false);
		Sliderspinspeed:Set(20);
		Sliderwalkloop:Set(16);
		Sliderjumploop:Set(7);
		Sliderwalk:Set(16);
		speaker.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16;
		if not r15(speaker) then
			Sliderhip:Set(0);
			speaker.Character.Humanoid.HipHeight = 0;
		else
			Sliderhip:Set(2);
			speaker.Character.Humanoid.HipHeight = 2;
		end
		if speaker.Character:FindFirstChildOfClass("Humanoid").UseJumpPower then
			Sliderjpower:Set(50);
		else
			Sliderjpower:Set(7);
		end
		Slidergrav:Set(196);
		game.Workspace.Gravity = 196;
		Sliderbright:Set(origsettingsbrightness.sliderbright);
		Togglelightclient:Set(false);
		Sliderfov:Set(70);
		Togglefreezecurrentanims:Set(false);
		edance1Slider:Set(1);
		edance2Slider:Set(1);
		edance3Slider:Set(1);
		bangerSlider:Set(1);
		Slidermovindanc:Set(1);
		Sliderrandance:Set(1);
		Slidermonsterdanc:Set(1);
		Sliderfulsiwing:Set(1);
		Sliderpuncha:Set(1);
		Sliderdinowalk:Set(1);
	end);
end);
local hasAcceptedNightMode = false;
function CheckTimess()
	local h = os.date("*t").hour;
	if ((h < 12) and (h > 4)) then
		return;
	elseif ((h >= 12) and (h < 20)) then
		return;
	else
		if not hasAcceptedNightMode then
			task.wait(5);
			NSUI:Notify({Title="And Also Since It's Night",Content="Do You Want to Change The Time Of Day To Night? (Make The Game Night Mode)",Duration=10,Image=10709806631,Actions={yeatrue={Name="Yea, Sure!",Callback=function()
				TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=0}):Play();
				hasAcceptedNightMode = true;
			end},nottrue={Name="Nah",Callback=function()
				return;
			end}}});
		else
			TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime=0}):Play();
		end
		effectfriendjoin();
	end
end
CheckTimess();
